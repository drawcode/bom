using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Compilation;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;

using ah.core;
using ah.core.data;
using ah.core.handlers;
using ah.core.util;

using gaming;
using gaming.ent;

namespace gaming {

    public class BaseGamingService : IBaseHandler  {	
    
	private static readonly log4net.ILog log = log4net.LogManager.GetLogger("main");
                
        public string path = "";
        public string path_parsed = "";
        public string path_info = "";
        public string qstring = "";

        public string action = "";
        public string action_params = "";

        public string url = "";
        public string ext = ".ashx";

        public HttpContext _context;
        public ServiceUtil util = new ServiceUtil();
        
        public string _format = "json";
    
        public GamingAPI api = new GamingAPI();
        
        public BaseGamingService(){
        
        }
        
        public void ParseServiceParams() {
            _format = util.GetParamValue(_context, "format");
            if(String.IsNullOrEmpty(_format)){
               _format = util.FORMAT_JSON; 
            }
            
        }
        
        public bool IsSet {
            get {
                return (_context.Request.RequestType == "POST"
                    || _context.Request.RequestType == "PUT");
            }
        }

        public bool IsGet {
            get {
                return (_context.Request.RequestType == "GET");
            }
        }

        public bool IsDelete {
            get {
                return (_context.Request.RequestType == "DELETE");
            }
        }
        
        public virtual void Render(HttpContext context) {

            _context = context;
            
            log.Debug("------------------------------------------------------------------------->");
            log.Debug(String.Format("Start Render URL: {0}", HttpContext.Current.Request.Url.ToString()));

            path = context.Request.Url.ToString();
            path_parsed = path.Replace("api/v1/", "");
            path_info = context.Request.PathInfo;
            if(path_parsed.IndexOf("?") > -1)
                    qstring = path_parsed.Split('?')[1];
			
            ParseServiceParams();
                    
            BaseProcessRequest();
            
            // If you need to render a page in the service...
            //StringWriter writer = new StringWriter();
            //HttpContext.Current.Server.Execute("~/main.aspx", writer);
            //string html = writer.ToString();
            //writer.Close();
            //writer.Dispose();
            // Emit the rendered HTML
            //context.Response.Write(html);
        }        
        
        public virtual bool IsContext(string actionRegex) {
            if (Regex.Match(path, actionRegex).Success) {
                return true;
            }
            return false;
        }

        public virtual void BaseProcessRequest() {        
            if(IsContext("game/count")){
                CountGame();
            }
            else if(IsContext("game/count/by-uuid")){
                CountGameByUuid();
            }
            else if(IsContext("game/count/by-code")){
                CountGameByCode();
            }
            else if(IsContext("game/count/by-name")){
                CountGameByName();
            }
            else if(IsContext("game/count/by-org-id")){
                CountGameByOrgId();
            }
            else if(IsContext("game/count/by-app-id")){
                CountGameByAppId();
            }
            else if(IsContext("game/count/by-org-id/by-app-id")){
                CountGameByOrgIdByAppId();
            }
            else if(IsContext("game/browse/by-filter")){
                BrowseGameListByFilter();
            }
            else if(IsContext("game/set/by-uuid")){
                SetGameByUuid();
            }
            else if(IsContext("game/set/by-code")){
                SetGameByCode();
            }
            else if(IsContext("game/set/by-name")){
                SetGameByName();
            }
            else if(IsContext("game/set/by-org-id")){
                SetGameByOrgId();
            }
            else if(IsContext("game/set/by-app-id")){
                SetGameByAppId();
            }
            else if(IsContext("game/set/by-org-id/by-app-id")){
                SetGameByOrgIdByAppId();
            }
            else if(IsContext("game/del/by-uuid")){
                DelGameByUuid();
            }
            else if(IsContext("game/del/by-code")){
                DelGameByCode();
            }
            else if(IsContext("game/del/by-name")){
                DelGameByName();
            }
            else if(IsContext("game/del/by-org-id")){
                DelGameByOrgId();
            }
            else if(IsContext("game/del/by-app-id")){
                DelGameByAppId();
            }
            else if(IsContext("game/del/by-org-id/by-app-id")){
                DelGameByOrgIdByAppId();
            }
            else if(IsContext("game/get")){
                GetGameList();
            }
            else if(IsContext("game/get/by-uuid")){
                GetGameListByUuid();
            }
            else if(IsContext("game/get/by-code")){
                GetGameListByCode();
            }
            else if(IsContext("game/get/by-name")){
                GetGameListByName();
            }
            else if(IsContext("game/get/by-org-id")){
                GetGameListByOrgId();
            }
            else if(IsContext("game/get/by-app-id")){
                GetGameListByAppId();
            }
            else if(IsContext("game/get/by-org-id/by-app-id")){
                GetGameListByOrgIdByAppId();
            }
            if(IsContext("game-attribute/count")){
                CountGameAttribute();
            }
            else if(IsContext("game-attribute/count/by-uuid")){
                CountGameAttributeByUuid();
            }
            else if(IsContext("game-attribute/count/by-code")){
                CountGameAttributeByCode();
            }
            else if(IsContext("game-attribute/count/by-type")){
                CountGameAttributeByType();
            }
            else if(IsContext("game-attribute/count/by-group")){
                CountGameAttributeByGroup();
            }
            else if(IsContext("game-attribute/count/by-code/by-type")){
                CountGameAttributeByCodeByType();
            }
            else if(IsContext("game-attribute/count/by-game-id")){
                CountGameAttributeByGameId();
            }
            else if(IsContext("game-attribute/count/by-game-id/by-code")){
                CountGameAttributeByGameIdByCode();
            }
            else if(IsContext("game-attribute/browse/by-filter")){
                BrowseGameAttributeListByFilter();
            }
            else if(IsContext("game-attribute/set/by-uuid")){
                SetGameAttributeByUuid();
            }
            else if(IsContext("game-attribute/set/by-code")){
                SetGameAttributeByCode();
            }
            else if(IsContext("game-attribute/set/by-game-id")){
                SetGameAttributeByGameId();
            }
            else if(IsContext("game-attribute/set/by-game-id/by-code")){
                SetGameAttributeByGameIdByCode();
            }
            else if(IsContext("game-attribute/del/by-uuid")){
                DelGameAttributeByUuid();
            }
            else if(IsContext("game-attribute/del/by-code")){
                DelGameAttributeByCode();
            }
            else if(IsContext("game-attribute/del/by-code/by-type")){
                DelGameAttributeByCodeByType();
            }
            else if(IsContext("game-attribute/del/by-game-id")){
                DelGameAttributeByGameId();
            }
            else if(IsContext("game-attribute/del/by-game-id/by-code")){
                DelGameAttributeByGameIdByCode();
            }
            else if(IsContext("game-attribute/get")){
                GetGameAttributeList();
            }
            else if(IsContext("game-attribute/get/by-uuid")){
                GetGameAttributeListByUuid();
            }
            else if(IsContext("game-attribute/get/by-code")){
                GetGameAttributeListByCode();
            }
            else if(IsContext("game-attribute/get/by-type")){
                GetGameAttributeListByType();
            }
            else if(IsContext("game-attribute/get/by-group")){
                GetGameAttributeListByGroup();
            }
            else if(IsContext("game-attribute/get/by-code/by-type")){
                GetGameAttributeListByCodeByType();
            }
            else if(IsContext("game-attribute/get/by-game-id/by-code")){
                GetGameAttributeListByGameIdByCode();
            }
            if(IsContext("game-attribute-text/count")){
                CountGameAttributeText();
            }
            else if(IsContext("game-attribute-text/count/by-uuid")){
                CountGameAttributeTextByUuid();
            }
            else if(IsContext("game-attribute-text/count/by-game-id")){
                CountGameAttributeTextByGameId();
            }
            else if(IsContext("game-attribute-text/count/by-attribute-id")){
                CountGameAttributeTextByAttributeId();
            }
            else if(IsContext("game-attribute-text/count/by-game-id/by-attribute-id")){
                CountGameAttributeTextByGameIdByAttributeId();
            }
            else if(IsContext("game-attribute-text/browse/by-filter")){
                BrowseGameAttributeTextListByFilter();
            }
            else if(IsContext("game-attribute-text/set/by-uuid")){
                SetGameAttributeTextByUuid();
            }
            else if(IsContext("game-attribute-text/set/by-game-id")){
                SetGameAttributeTextByGameId();
            }
            else if(IsContext("game-attribute-text/set/by-attribute-id")){
                SetGameAttributeTextByAttributeId();
            }
            else if(IsContext("game-attribute-text/set/by-game-id/by-attribute-id")){
                SetGameAttributeTextByGameIdByAttributeId();
            }
            else if(IsContext("game-attribute-text/del")){
                DelGameAttributeText();
            }
            else if(IsContext("game-attribute-text/del/by-uuid")){
                DelGameAttributeTextByUuid();
            }
            else if(IsContext("game-attribute-text/del/by-game-id")){
                DelGameAttributeTextByGameId();
            }
            else if(IsContext("game-attribute-text/del/by-attribute-id")){
                DelGameAttributeTextByAttributeId();
            }
            else if(IsContext("game-attribute-text/del/by-game-id/by-attribute-id")){
                DelGameAttributeTextByGameIdByAttributeId();
            }
            else if(IsContext("game-attribute-text/get")){
                GetGameAttributeTextList();
            }
            else if(IsContext("game-attribute-text/get/by-uuid")){
                GetGameAttributeTextListByUuid();
            }
            else if(IsContext("game-attribute-text/get/by-game-id")){
                GetGameAttributeTextListByGameId();
            }
            else if(IsContext("game-attribute-text/get/by-attribute-id")){
                GetGameAttributeTextListByAttributeId();
            }
            else if(IsContext("game-attribute-text/get/by-game-id/by-attribute-id")){
                GetGameAttributeTextListByGameIdByAttributeId();
            }
            if(IsContext("game-attribute-data/count")){
                CountGameAttributeData();
            }
            else if(IsContext("game-attribute-data/count/by-uuid")){
                CountGameAttributeDataByUuid();
            }
            else if(IsContext("game-attribute-data/count/by-game-id")){
                CountGameAttributeDataByGameId();
            }
            else if(IsContext("game-attribute-data/count/by-game-id/by-attribute-id")){
                CountGameAttributeDataByGameIdByAttributeId();
            }
            else if(IsContext("game-attribute-data/browse/by-filter")){
                BrowseGameAttributeDataListByFilter();
            }
            else if(IsContext("game-attribute-data/set/by-uuid")){
                SetGameAttributeDataByUuid();
            }
            else if(IsContext("game-attribute-data/set/by-game-id/by-attribute-id")){
                SetGameAttributeDataByGameIdByAttributeId();
            }
            else if(IsContext("game-attribute-data/del")){
                DelGameAttributeData();
            }
            else if(IsContext("game-attribute-data/del/by-uuid")){
                DelGameAttributeDataByUuid();
            }
            else if(IsContext("game-attribute-data/del/by-game-id")){
                DelGameAttributeDataByGameId();
            }
            else if(IsContext("game-attribute-data/del/by-game-id")){
                DelGameAttributeDataByGameId();
            }
            else if(IsContext("game-attribute-data/get")){
                GetGameAttributeDataList();
            }
            else if(IsContext("game-attribute-data/get/by-uuid")){
                GetGameAttributeDataListByUuid();
            }
            else if(IsContext("game-attribute-data/get/by-game-id")){
                GetGameAttributeDataListByGameId();
            }
            else if(IsContext("game-attribute-data/get/by-game-id/by-attribute-id")){
                GetGameAttributeDataListByGameIdByAttributeId();
            }
            if(IsContext("game-category/count")){
                CountGameCategory();
            }
            else if(IsContext("game-category/count/by-uuid")){
                CountGameCategoryByUuid();
            }
            else if(IsContext("game-category/count/by-code")){
                CountGameCategoryByCode();
            }
            else if(IsContext("game-category/count/by-name")){
                CountGameCategoryByName();
            }
            else if(IsContext("game-category/count/by-org-id")){
                CountGameCategoryByOrgId();
            }
            else if(IsContext("game-category/count/by-type-id")){
                CountGameCategoryByTypeId();
            }
            else if(IsContext("game-category/count/by-org-id/by-type-id")){
                CountGameCategoryByOrgIdByTypeId();
            }
            else if(IsContext("game-category/browse/by-filter")){
                BrowseGameCategoryListByFilter();
            }
            else if(IsContext("game-category/set/by-uuid")){
                SetGameCategoryByUuid();
            }
            else if(IsContext("game-category/del/by-uuid")){
                DelGameCategoryByUuid();
            }
            else if(IsContext("game-category/del/by-code/by-org-id")){
                DelGameCategoryByCodeByOrgId();
            }
            else if(IsContext("game-category/del/by-code/by-org-id/by-type-id")){
                DelGameCategoryByCodeByOrgIdByTypeId();
            }
            else if(IsContext("game-category/get")){
                GetGameCategoryList();
            }
            else if(IsContext("game-category/get/by-uuid")){
                GetGameCategoryListByUuid();
            }
            else if(IsContext("game-category/get/by-code")){
                GetGameCategoryListByCode();
            }
            else if(IsContext("game-category/get/by-name")){
                GetGameCategoryListByName();
            }
            else if(IsContext("game-category/get/by-org-id")){
                GetGameCategoryListByOrgId();
            }
            else if(IsContext("game-category/get/by-type-id")){
                GetGameCategoryListByTypeId();
            }
            else if(IsContext("game-category/get/by-org-id/by-type-id")){
                GetGameCategoryListByOrgIdByTypeId();
            }
            if(IsContext("game-category-tree/count")){
                CountGameCategoryTree();
            }
            else if(IsContext("game-category-tree/count/by-uuid")){
                CountGameCategoryTreeByUuid();
            }
            else if(IsContext("game-category-tree/count/by-parent-id")){
                CountGameCategoryTreeByParentId();
            }
            else if(IsContext("game-category-tree/count/by-category-id")){
                CountGameCategoryTreeByCategoryId();
            }
            else if(IsContext("game-category-tree/count/by-parent-id/by-category-id")){
                CountGameCategoryTreeByParentIdByCategoryId();
            }
            else if(IsContext("game-category-tree/browse/by-filter")){
                BrowseGameCategoryTreeListByFilter();
            }
            else if(IsContext("game-category-tree/set/by-uuid")){
                SetGameCategoryTreeByUuid();
            }
            else if(IsContext("game-category-tree/del/by-uuid")){
                DelGameCategoryTreeByUuid();
            }
            else if(IsContext("game-category-tree/del/by-parent-id")){
                DelGameCategoryTreeByParentId();
            }
            else if(IsContext("game-category-tree/del/by-category-id")){
                DelGameCategoryTreeByCategoryId();
            }
            else if(IsContext("game-category-tree/del/by-parent-id/by-category-id")){
                DelGameCategoryTreeByParentIdByCategoryId();
            }
            else if(IsContext("game-category-tree/get")){
                GetGameCategoryTreeList();
            }
            else if(IsContext("game-category-tree/get/by-uuid")){
                GetGameCategoryTreeListByUuid();
            }
            else if(IsContext("game-category-tree/get/by-parent-id")){
                GetGameCategoryTreeListByParentId();
            }
            else if(IsContext("game-category-tree/get/by-category-id")){
                GetGameCategoryTreeListByCategoryId();
            }
            else if(IsContext("game-category-tree/get/by-parent-id/by-category-id")){
                GetGameCategoryTreeListByParentIdByCategoryId();
            }
            if(IsContext("game-category-assoc/count")){
                CountGameCategoryAssoc();
            }
            else if(IsContext("game-category-assoc/count/by-uuid")){
                CountGameCategoryAssocByUuid();
            }
            else if(IsContext("game-category-assoc/count/by-game-id")){
                CountGameCategoryAssocByGameId();
            }
            else if(IsContext("game-category-assoc/count/by-category-id")){
                CountGameCategoryAssocByCategoryId();
            }
            else if(IsContext("game-category-assoc/count/by-game-id/by-category-id")){
                CountGameCategoryAssocByGameIdByCategoryId();
            }
            else if(IsContext("game-category-assoc/browse/by-filter")){
                BrowseGameCategoryAssocListByFilter();
            }
            else if(IsContext("game-category-assoc/set/by-uuid")){
                SetGameCategoryAssocByUuid();
            }
            else if(IsContext("game-category-assoc/del/by-uuid")){
                DelGameCategoryAssocByUuid();
            }
            else if(IsContext("game-category-assoc/get")){
                GetGameCategoryAssocList();
            }
            else if(IsContext("game-category-assoc/get/by-uuid")){
                GetGameCategoryAssocListByUuid();
            }
            else if(IsContext("game-category-assoc/get/by-game-id")){
                GetGameCategoryAssocListByGameId();
            }
            else if(IsContext("game-category-assoc/get/by-category-id")){
                GetGameCategoryAssocListByCategoryId();
            }
            else if(IsContext("game-category-assoc/get/by-game-id/by-category-id")){
                GetGameCategoryAssocListByGameIdByCategoryId();
            }
            if(IsContext("game-type/count")){
                CountGameType();
            }
            else if(IsContext("game-type/count/by-uuid")){
                CountGameTypeByUuid();
            }
            else if(IsContext("game-type/count/by-code")){
                CountGameTypeByCode();
            }
            else if(IsContext("game-type/count/by-name")){
                CountGameTypeByName();
            }
            else if(IsContext("game-type/browse/by-filter")){
                BrowseGameTypeListByFilter();
            }
            else if(IsContext("game-type/set/by-uuid")){
                SetGameTypeByUuid();
            }
            else if(IsContext("game-type/del/by-uuid")){
                DelGameTypeByUuid();
            }
            else if(IsContext("game-type/get")){
                GetGameTypeList();
            }
            else if(IsContext("game-type/get/by-uuid")){
                GetGameTypeListByUuid();
            }
            else if(IsContext("game-type/get/by-code")){
                GetGameTypeListByCode();
            }
            else if(IsContext("game-type/get/by-name")){
                GetGameTypeListByName();
            }
            if(IsContext("profile-game/count")){
                CountProfileGame();
            }
            else if(IsContext("profile-game/count/by-uuid")){
                CountProfileGameByUuid();
            }
            else if(IsContext("profile-game/count/by-game-id")){
                CountProfileGameByGameId();
            }
            else if(IsContext("profile-game/count/by-profile-id")){
                CountProfileGameByProfileId();
            }
            else if(IsContext("profile-game/count/by-profile-id/by-game-id")){
                CountProfileGameByProfileIdByGameId();
            }
            else if(IsContext("profile-game/browse/by-filter")){
                BrowseProfileGameListByFilter();
            }
            else if(IsContext("profile-game/set/by-uuid")){
                SetProfileGameByUuid();
            }
            else if(IsContext("profile-game/set/by-game-id")){
                SetProfileGameByGameId();
            }
            else if(IsContext("profile-game/set/by-profile-id")){
                SetProfileGameByProfileId();
            }
            else if(IsContext("profile-game/set/by-profile-id/by-game-id")){
                SetProfileGameByProfileIdByGameId();
            }
            else if(IsContext("profile-game/del/by-uuid")){
                DelProfileGameByUuid();
            }
            else if(IsContext("profile-game/del/by-game-id")){
                DelProfileGameByGameId();
            }
            else if(IsContext("profile-game/del/by-profile-id")){
                DelProfileGameByProfileId();
            }
            else if(IsContext("profile-game/del/by-profile-id/by-game-id")){
                DelProfileGameByProfileIdByGameId();
            }
            else if(IsContext("profile-game/get")){
                GetProfileGameList();
            }
            else if(IsContext("profile-game/get/by-uuid")){
                GetProfileGameListByUuid();
            }
            else if(IsContext("profile-game/get/by-game-id")){
                GetProfileGameListByGameId();
            }
            else if(IsContext("profile-game/get/by-profile-id")){
                GetProfileGameListByProfileId();
            }
            else if(IsContext("profile-game/get/by-profile-id/by-game-id")){
                GetProfileGameListByProfileIdByGameId();
            }
            if(IsContext("game-profile-attribute/count")){
                CountGameProfileAttribute();
            }
            else if(IsContext("game-profile-attribute/count/by-uuid")){
                CountGameProfileAttributeByUuid();
            }
            else if(IsContext("game-profile-attribute/count/by-code")){
                CountGameProfileAttributeByCode();
            }
            else if(IsContext("game-profile-attribute/count/by-type")){
                CountGameProfileAttributeByType();
            }
            else if(IsContext("game-profile-attribute/count/by-group")){
                CountGameProfileAttributeByGroup();
            }
            else if(IsContext("game-profile-attribute/count/by-code/by-type")){
                CountGameProfileAttributeByCodeByType();
            }
            else if(IsContext("game-profile-attribute/count/by-game-id")){
                CountGameProfileAttributeByGameId();
            }
            else if(IsContext("game-profile-attribute/count/by-game-id/by-code")){
                CountGameProfileAttributeByGameIdByCode();
            }
            else if(IsContext("game-profile-attribute/browse/by-filter")){
                BrowseGameProfileAttributeListByFilter();
            }
            else if(IsContext("game-profile-attribute/set/by-uuid")){
                SetGameProfileAttributeByUuid();
            }
            else if(IsContext("game-profile-attribute/set/by-code")){
                SetGameProfileAttributeByCode();
            }
            else if(IsContext("game-profile-attribute/set/by-game-id")){
                SetGameProfileAttributeByGameId();
            }
            else if(IsContext("game-profile-attribute/set/by-game-id/by-code")){
                SetGameProfileAttributeByGameIdByCode();
            }
            else if(IsContext("game-profile-attribute/del/by-uuid")){
                DelGameProfileAttributeByUuid();
            }
            else if(IsContext("game-profile-attribute/del/by-code")){
                DelGameProfileAttributeByCode();
            }
            else if(IsContext("game-profile-attribute/del/by-code/by-type")){
                DelGameProfileAttributeByCodeByType();
            }
            else if(IsContext("game-profile-attribute/del/by-game-id")){
                DelGameProfileAttributeByGameId();
            }
            else if(IsContext("game-profile-attribute/del/by-game-id/by-code")){
                DelGameProfileAttributeByGameIdByCode();
            }
            else if(IsContext("game-profile-attribute/get")){
                GetGameProfileAttributeList();
            }
            else if(IsContext("game-profile-attribute/get/by-uuid")){
                GetGameProfileAttributeListByUuid();
            }
            else if(IsContext("game-profile-attribute/get/by-code")){
                GetGameProfileAttributeListByCode();
            }
            else if(IsContext("game-profile-attribute/get/by-type")){
                GetGameProfileAttributeListByType();
            }
            else if(IsContext("game-profile-attribute/get/by-group")){
                GetGameProfileAttributeListByGroup();
            }
            else if(IsContext("game-profile-attribute/get/by-code/by-type")){
                GetGameProfileAttributeListByCodeByType();
            }
            else if(IsContext("game-profile-attribute/get/by-game-id/by-code")){
                GetGameProfileAttributeListByGameIdByCode();
            }
            if(IsContext("game-profile-attribute-text/count")){
                CountGameProfileAttributeText();
            }
            else if(IsContext("game-profile-attribute-text/count/by-uuid")){
                CountGameProfileAttributeTextByUuid();
            }
            else if(IsContext("game-profile-attribute-text/count/by-profile-id")){
                CountGameProfileAttributeTextByProfileId();
            }
            else if(IsContext("game-profile-attribute-text/count/by-profile-id/by-attribute-id")){
                CountGameProfileAttributeTextByProfileIdByAttributeId();
            }
            else if(IsContext("game-profile-attribute-text/count/by-game-id/by-profile-id")){
                CountGameProfileAttributeTextByGameIdByProfileId();
            }
            else if(IsContext("game-profile-attribute-text/count/by-game-id/by-profile-id/by-attribute-id")){
                CountGameProfileAttributeTextByGameIdByProfileIdByAttributeId();
            }
            else if(IsContext("game-profile-attribute-text/browse/by-filter")){
                BrowseGameProfileAttributeTextListByFilter();
            }
            else if(IsContext("game-profile-attribute-text/set/by-uuid")){
                SetGameProfileAttributeTextByUuid();
            }
            else if(IsContext("game-profile-attribute-text/set/by-profile-id")){
                SetGameProfileAttributeTextByProfileId();
            }
            else if(IsContext("game-profile-attribute-text/set/by-profile-id/by-attribute-id")){
                SetGameProfileAttributeTextByProfileIdByAttributeId();
            }
            else if(IsContext("game-profile-attribute-text/set/by-game-id/by-profile-id")){
                SetGameProfileAttributeTextByGameIdByProfileId();
            }
            else if(IsContext("game-profile-attribute-text/set/by-game-id/by-profile-id/by-attribute-id")){
                SetGameProfileAttributeTextByGameIdByProfileIdByAttributeId();
            }
            else if(IsContext("game-profile-attribute-text/del/by-uuid")){
                DelGameProfileAttributeTextByUuid();
            }
            else if(IsContext("game-profile-attribute-text/del/by-profile-id")){
                DelGameProfileAttributeTextByProfileId();
            }
            else if(IsContext("game-profile-attribute-text/del/by-profile-id/by-attribute-id")){
                DelGameProfileAttributeTextByProfileIdByAttributeId();
            }
            else if(IsContext("game-profile-attribute-text/del/by-game-id/by-profile-id")){
                DelGameProfileAttributeTextByGameIdByProfileId();
            }
            else if(IsContext("game-profile-attribute-text/del/by-game-id/by-profile-id/by-attribute-id")){
                DelGameProfileAttributeTextByGameIdByProfileIdByAttributeId();
            }
            else if(IsContext("game-profile-attribute-text/get/by-uuid")){
                GetGameProfileAttributeTextListByUuid();
            }
            else if(IsContext("game-profile-attribute-text/get/by-profile-id")){
                GetGameProfileAttributeTextListByProfileId();
            }
            else if(IsContext("game-profile-attribute-text/get/by-profile-id/by-attribute-id")){
                GetGameProfileAttributeTextListByProfileIdByAttributeId();
            }
            else if(IsContext("game-profile-attribute-text/get/by-game-id/by-profile-id")){
                GetGameProfileAttributeTextListByGameIdByProfileId();
            }
            else if(IsContext("game-profile-attribute-text/get/by-game-id/by-profile-id/by-attribute-id")){
                GetGameProfileAttributeTextListByGameIdByProfileIdByAttributeId();
            }
            if(IsContext("game-profile-attribute-data/count")){
                CountGameProfileAttributeData();
            }
            else if(IsContext("game-profile-attribute-data/count/by-uuid")){
                CountGameProfileAttributeDataByUuid();
            }
            else if(IsContext("game-profile-attribute-data/count/by-profile-id")){
                CountGameProfileAttributeDataByProfileId();
            }
            else if(IsContext("game-profile-attribute-data/count/by-profile-id/by-attribute-id")){
                CountGameProfileAttributeDataByProfileIdByAttributeId();
            }
            else if(IsContext("game-profile-attribute-data/count/by-game-id/by-profile-id")){
                CountGameProfileAttributeDataByGameIdByProfileId();
            }
            else if(IsContext("game-profile-attribute-data/count/by-game-id/by-profile-id/by-attribute-id")){
                CountGameProfileAttributeDataByGameIdByProfileIdByAttributeId();
            }
            else if(IsContext("game-profile-attribute-data/browse/by-filter")){
                BrowseGameProfileAttributeDataListByFilter();
            }
            else if(IsContext("game-profile-attribute-data/set/by-uuid")){
                SetGameProfileAttributeDataByUuid();
            }
            else if(IsContext("game-profile-attribute-data/set/by-profile-id/by-attribute-id")){
                SetGameProfileAttributeDataByProfileIdByAttributeId();
            }
            else if(IsContext("game-profile-attribute-data/set/by-game-id/by-profile-id")){
                SetGameProfileAttributeDataByGameIdByProfileId();
            }
            else if(IsContext("game-profile-attribute-data/set/by-game-id/by-profile-id/by-attribute-id")){
                SetGameProfileAttributeDataByGameIdByProfileIdByAttributeId();
            }
            else if(IsContext("game-profile-attribute-data/del/by-uuid")){
                DelGameProfileAttributeDataByUuid();
            }
            else if(IsContext("game-profile-attribute-data/del/by-profile-id")){
                DelGameProfileAttributeDataByProfileId();
            }
            else if(IsContext("game-profile-attribute-data/del/by-profile-id/by-attribute-id")){
                DelGameProfileAttributeDataByProfileIdByAttributeId();
            }
            else if(IsContext("game-profile-attribute-data/del/by-game-id/by-profile-id")){
                DelGameProfileAttributeDataByGameIdByProfileId();
            }
            else if(IsContext("game-profile-attribute-data/del/by-game-id/by-profile-id/by-attribute-id")){
                DelGameProfileAttributeDataByGameIdByProfileIdByAttributeId();
            }
            else if(IsContext("game-profile-attribute-data/get")){
                GetGameProfileAttributeDataList();
            }
            else if(IsContext("game-profile-attribute-data/get/by-uuid")){
                GetGameProfileAttributeDataListByUuid();
            }
            else if(IsContext("game-profile-attribute-data/get/by-profile-id")){
                GetGameProfileAttributeDataListByProfileId();
            }
            else if(IsContext("game-profile-attribute-data/get/by-profile-id/by-attribute-id")){
                GetGameProfileAttributeDataListByProfileIdByAttributeId();
            }
            else if(IsContext("game-profile-attribute-data/get/by-game-id/by-profile-id")){
                GetGameProfileAttributeDataListByGameIdByProfileId();
            }
            else if(IsContext("game-profile-attribute-data/get/by-game-id/by-profile-id/by-attribute-id")){
                GetGameProfileAttributeDataListByGameIdByProfileIdByAttributeId();
            }
            if(IsContext("game-network/count")){
                CountGameNetwork();
            }
            else if(IsContext("game-network/count/by-uuid")){
                CountGameNetworkByUuid();
            }
            else if(IsContext("game-network/count/by-code")){
                CountGameNetworkByCode();
            }
            else if(IsContext("game-network/count/by-uuid/by-type")){
                CountGameNetworkByUuidByType();
            }
            else if(IsContext("game-network/browse/by-filter")){
                BrowseGameNetworkListByFilter();
            }
            else if(IsContext("game-network/set/by-uuid")){
                SetGameNetworkByUuid();
            }
            else if(IsContext("game-network/set/by-code")){
                SetGameNetworkByCode();
            }
            else if(IsContext("game-network/del/by-uuid")){
                DelGameNetworkByUuid();
            }
            else if(IsContext("game-network/get")){
                GetGameNetworkList();
            }
            else if(IsContext("game-network/get/by-uuid")){
                GetGameNetworkListByUuid();
            }
            else if(IsContext("game-network/get/by-code")){
                GetGameNetworkListByCode();
            }
            else if(IsContext("game-network/get/by-uuid/by-type")){
                GetGameNetworkListByUuidByType();
            }
            if(IsContext("game-network-auth/count")){
                CountGameNetworkAuth();
            }
            else if(IsContext("game-network-auth/count/by-uuid")){
                CountGameNetworkAuthByUuid();
            }
            else if(IsContext("game-network-auth/count/by-game-id/by-game-network-id")){
                CountGameNetworkAuthByGameIdByGameNetworkId();
            }
            else if(IsContext("game-network-auth/browse/by-filter")){
                BrowseGameNetworkAuthListByFilter();
            }
            else if(IsContext("game-network-auth/set/by-uuid")){
                SetGameNetworkAuthByUuid();
            }
            else if(IsContext("game-network-auth/set/by-game-id/by-game-network-id")){
                SetGameNetworkAuthByGameIdByGameNetworkId();
            }
            else if(IsContext("game-network-auth/del/by-uuid")){
                DelGameNetworkAuthByUuid();
            }
            else if(IsContext("game-network-auth/get")){
                GetGameNetworkAuthList();
            }
            else if(IsContext("game-network-auth/get/by-uuid")){
                GetGameNetworkAuthListByUuid();
            }
            else if(IsContext("game-network-auth/get/by-game-id/by-game-network-id")){
                GetGameNetworkAuthListByGameIdByGameNetworkId();
            }
            if(IsContext("profile-game-network/count")){
                CountProfileGameNetwork();
            }
            else if(IsContext("profile-game-network/count/by-uuid")){
                CountProfileGameNetworkByUuid();
            }
            else if(IsContext("profile-game-network/count/by-game-id")){
                CountProfileGameNetworkByGameId();
            }
            else if(IsContext("profile-game-network/count/by-profile-id")){
                CountProfileGameNetworkByProfileId();
            }
            else if(IsContext("profile-game-network/count/by-profile-id/by-game-id")){
                CountProfileGameNetworkByProfileIdByGameId();
            }
            else if(IsContext("profile-game-network/count/by-profile-id/by-game-id")){
                CountProfileGameNetworkByProfileIdByGameId();
            }
            else if(IsContext("profile-game-network/count/by-profile-id/by-game-id/by-game-network-id")){
                CountProfileGameNetworkByProfileIdByGameIdByGameNetworkId();
            }
            else if(IsContext("profile-game-network/count/by-network-username/by-game-id/by-game-network-id")){
                CountProfileGameNetworkByNetworkUsernameByGameIdByGameNetworkId();
            }
            else if(IsContext("profile-game-network/browse/by-filter")){
                BrowseProfileGameNetworkListByFilter();
            }
            else if(IsContext("profile-game-network/set/by-uuid")){
                SetProfileGameNetworkByUuid();
            }
            else if(IsContext("profile-game-network/set/by-profile-id/by-game-id")){
                SetProfileGameNetworkByProfileIdByGameId();
            }
            else if(IsContext("profile-game-network/set/by-profile-id/by-game-id/by-game-network-id")){
                SetProfileGameNetworkByProfileIdByGameIdByGameNetworkId();
            }
            else if(IsContext("profile-game-network/set/by-network-username/by-game-id/by-game-network-id")){
                SetProfileGameNetworkByNetworkUsernameByGameIdByGameNetworkId();
            }
            else if(IsContext("profile-game-network/del/by-uuid")){
                DelProfileGameNetworkByUuid();
            }
            else if(IsContext("profile-game-network/del/by-profile-id/by-game-id")){
                DelProfileGameNetworkByProfileIdByGameId();
            }
            else if(IsContext("profile-game-network/del/by-profile-id/by-game-id/by-game-network-id")){
                DelProfileGameNetworkByProfileIdByGameIdByGameNetworkId();
            }
            else if(IsContext("profile-game-network/del/by-network-username/by-game-id/by-game-network-id")){
                DelProfileGameNetworkByNetworkUsernameByGameIdByGameNetworkId();
            }
            else if(IsContext("profile-game-network/get")){
                GetProfileGameNetworkList();
            }
            else if(IsContext("profile-game-network/get/by-uuid")){
                GetProfileGameNetworkListByUuid();
            }
            else if(IsContext("profile-game-network/get/by-game-id")){
                GetProfileGameNetworkListByGameId();
            }
            else if(IsContext("profile-game-network/get/by-profile-id")){
                GetProfileGameNetworkListByProfileId();
            }
            else if(IsContext("profile-game-network/get/by-profile-id/by-game-id")){
                GetProfileGameNetworkListByProfileIdByGameId();
            }
            else if(IsContext("profile-game-network/get/by-profile-id/by-game-id/by-game-network-id")){
                GetProfileGameNetworkListByProfileIdByGameIdByGameNetworkId();
            }
            else if(IsContext("profile-game-network/get/by-network-username/by-game-id/by-game-network-id")){
                GetProfileGameNetworkListByNetworkUsernameByGameIdByGameNetworkId();
            }
            if(IsContext("profile-game-data-attribute/count")){
                CountProfileGameDataAttribute();
            }
            else if(IsContext("profile-game-data-attribute/count/by-uuid")){
                CountProfileGameDataAttributeByUuid();
            }
            else if(IsContext("profile-game-data-attribute/count/by-profile-id")){
                CountProfileGameDataAttributeByProfileId();
            }
            else if(IsContext("profile-game-data-attribute/count/by-profile-id/by-game-id/by-code")){
                CountProfileGameDataAttributeByProfileIdByGameIdByCode();
            }
            else if(IsContext("profile-game-data-attribute/browse/by-filter")){
                BrowseProfileGameDataAttributeListByFilter();
            }
            else if(IsContext("profile-game-data-attribute/set/by-uuid")){
                SetProfileGameDataAttributeByUuid();
            }
            else if(IsContext("profile-game-data-attribute/set/by-profile-id")){
                SetProfileGameDataAttributeByProfileId();
            }
            else if(IsContext("profile-game-data-attribute/set/by-profile-id/by-game-id/by-code")){
                SetProfileGameDataAttributeByProfileIdByGameIdByCode();
            }
            else if(IsContext("profile-game-data-attribute/del/by-uuid")){
                DelProfileGameDataAttributeByUuid();
            }
            else if(IsContext("profile-game-data-attribute/del/by-profile-id")){
                DelProfileGameDataAttributeByProfileId();
            }
            else if(IsContext("profile-game-data-attribute/del/by-profile-id/by-game-id/by-code")){
                DelProfileGameDataAttributeByProfileIdByGameIdByCode();
            }
            else if(IsContext("profile-game-data-attribute/get/by-uuid")){
                GetProfileGameDataAttributeListByUuid();
            }
            else if(IsContext("profile-game-data-attribute/get/by-profile-id")){
                GetProfileGameDataAttributeListByProfileId();
            }
            else if(IsContext("profile-game-data-attribute/get/by-profile-id/by-game-id/by-code")){
                GetProfileGameDataAttributeListByProfileIdByGameIdByCode();
            }
            if(IsContext("game-session/count")){
                CountGameSession();
            }
            else if(IsContext("game-session/count/by-uuid")){
                CountGameSessionByUuid();
            }
            else if(IsContext("game-session/count/by-game-id")){
                CountGameSessionByGameId();
            }
            else if(IsContext("game-session/count/by-profile-id")){
                CountGameSessionByProfileId();
            }
            else if(IsContext("game-session/count/by-profile-id/by-game-id")){
                CountGameSessionByProfileIdByGameId();
            }
            else if(IsContext("game-session/browse/by-filter")){
                BrowseGameSessionListByFilter();
            }
            else if(IsContext("game-session/set/by-uuid")){
                SetGameSessionByUuid();
            }
            else if(IsContext("game-session/del/by-uuid")){
                DelGameSessionByUuid();
            }
            else if(IsContext("game-session/get")){
                GetGameSessionList();
            }
            else if(IsContext("game-session/get/by-uuid")){
                GetGameSessionListByUuid();
            }
            else if(IsContext("game-session/get/by-game-id")){
                GetGameSessionListByGameId();
            }
            else if(IsContext("game-session/get/by-profile-id")){
                GetGameSessionListByProfileId();
            }
            else if(IsContext("game-session/get/by-profile-id/by-game-id")){
                GetGameSessionListByProfileIdByGameId();
            }
            if(IsContext("game-session-data/count")){
                CountGameSessionData();
            }
            else if(IsContext("game-session-data/count/by-uuid")){
                CountGameSessionDataByUuid();
            }
            else if(IsContext("game-session-data/browse/by-filter")){
                BrowseGameSessionDataListByFilter();
            }
            else if(IsContext("game-session-data/set/by-uuid")){
                SetGameSessionDataByUuid();
            }
            else if(IsContext("game-session-data/del/by-uuid")){
                DelGameSessionDataByUuid();
            }
            else if(IsContext("game-session-data/get")){
                GetGameSessionDataList();
            }
            else if(IsContext("game-session-data/get/by-uuid")){
                GetGameSessionDataListByUuid();
            }
            if(IsContext("game-content/count")){
                CountGameContent();
            }
            else if(IsContext("game-content/count/by-uuid")){
                CountGameContentByUuid();
            }
            else if(IsContext("game-content/count/by-game-id")){
                CountGameContentByGameId();
            }
            else if(IsContext("game-content/count/by-game-id/by-path")){
                CountGameContentByGameIdByPath();
            }
            else if(IsContext("game-content/count/by-game-id/by-path/by-version")){
                CountGameContentByGameIdByPathByVersion();
            }
            else if(IsContext("game-content/count/by-game-id/by-path/by-version/by-platform/by-increment")){
                CountGameContentByGameIdByPathByVersionByPlatformByIncrement();
            }
            else if(IsContext("game-content/browse/by-filter")){
                BrowseGameContentListByFilter();
            }
            else if(IsContext("game-content/set/by-uuid")){
                SetGameContentByUuid();
            }
            else if(IsContext("game-content/set/by-game-id")){
                SetGameContentByGameId();
            }
            else if(IsContext("game-content/set/by-game-id/by-path")){
                SetGameContentByGameIdByPath();
            }
            else if(IsContext("game-content/set/by-game-id/by-path/by-version")){
                SetGameContentByGameIdByPathByVersion();
            }
            else if(IsContext("game-content/set/by-game-id/by-path/by-version/by-platform/by-increment")){
                SetGameContentByGameIdByPathByVersionByPlatformByIncrement();
            }
            else if(IsContext("game-content/del/by-uuid")){
                DelGameContentByUuid();
            }
            else if(IsContext("game-content/del/by-game-id")){
                DelGameContentByGameId();
            }
            else if(IsContext("game-content/del/by-game-id/by-path")){
                DelGameContentByGameIdByPath();
            }
            else if(IsContext("game-content/del/by-game-id/by-path/by-version")){
                DelGameContentByGameIdByPathByVersion();
            }
            else if(IsContext("game-content/del/by-game-id/by-path/by-version/by-platform/by-increment")){
                DelGameContentByGameIdByPathByVersionByPlatformByIncrement();
            }
            else if(IsContext("game-content/get")){
                GetGameContentList();
            }
            else if(IsContext("game-content/get/by-uuid")){
                GetGameContentListByUuid();
            }
            else if(IsContext("game-content/get/by-game-id")){
                GetGameContentListByGameId();
            }
            else if(IsContext("game-content/get/by-game-id/by-path")){
                GetGameContentListByGameIdByPath();
            }
            else if(IsContext("game-content/get/by-game-id/by-path/by-version")){
                GetGameContentListByGameIdByPathByVersion();
            }
            else if(IsContext("game-content/get/by-game-id/by-path/by-version/by-platform/by-increment")){
                GetGameContentListByGameIdByPathByVersionByPlatformByIncrement();
            }
            if(IsContext("game-profile-content/count")){
                CountGameProfileContent();
            }
            else if(IsContext("game-profile-content/count/by-uuid")){
                CountGameProfileContentByUuid();
            }
            else if(IsContext("game-profile-content/count/by-game-id/by-profile-id")){
                CountGameProfileContentByGameIdByProfileId();
            }
            else if(IsContext("game-profile-content/count/by-game-id/by-username")){
                CountGameProfileContentByGameIdByUsername();
            }
            else if(IsContext("game-profile-content/count/by-username")){
                CountGameProfileContentByUsername();
            }
            else if(IsContext("game-profile-content/count/by-game-id/by-profile-id/by-path")){
                CountGameProfileContentByGameIdByProfileIdByPath();
            }
            else if(IsContext("game-profile-content/count/by-game-id/by-profile-id/by-path/by-version")){
                CountGameProfileContentByGameIdByProfileIdByPathByVersion();
            }
            else if(IsContext("game-profile-content/count/by-game-id/by-profile-id/by-path/by-version/by-platform/by-increment")){
                CountGameProfileContentByGameIdByProfileIdByPathByVersionByPlatformByIncrement();
            }
            else if(IsContext("game-profile-content/count/by-game-id/by-username/by-path")){
                CountGameProfileContentByGameIdByUsernameByPath();
            }
            else if(IsContext("game-profile-content/count/by-game-id/by-username/by-path/by-version")){
                CountGameProfileContentByGameIdByUsernameByPathByVersion();
            }
            else if(IsContext("game-profile-content/count/by-game-id/by-username/by-path/by-version/by-platform/by-increment")){
                CountGameProfileContentByGameIdByUsernameByPathByVersionByPlatformByIncrement();
            }
            else if(IsContext("game-profile-content/browse/by-filter")){
                BrowseGameProfileContentListByFilter();
            }
            else if(IsContext("game-profile-content/set/by-uuid")){
                SetGameProfileContentByUuid();
            }
            else if(IsContext("game-profile-content/set/by-game-id/by-profile-id")){
                SetGameProfileContentByGameIdByProfileId();
            }
            else if(IsContext("game-profile-content/set/by-game-id/by-username")){
                SetGameProfileContentByGameIdByUsername();
            }
            else if(IsContext("game-profile-content/set/by-username")){
                SetGameProfileContentByUsername();
            }
            else if(IsContext("game-profile-content/set/by-game-id/by-profile-id/by-path")){
                SetGameProfileContentByGameIdByProfileIdByPath();
            }
            else if(IsContext("game-profile-content/set/by-game-id/by-profile-id/by-path/by-version")){
                SetGameProfileContentByGameIdByProfileIdByPathByVersion();
            }
            else if(IsContext("game-profile-content/set/by-game-id/by-profile-id/by-path/by-version/by-platform/by-increment")){
                SetGameProfileContentByGameIdByProfileIdByPathByVersionByPlatformByIncrement();
            }
            else if(IsContext("game-profile-content/set/by-game-id/by-username/by-path")){
                SetGameProfileContentByGameIdByUsernameByPath();
            }
            else if(IsContext("game-profile-content/set/by-game-id/by-username/by-path/by-version")){
                SetGameProfileContentByGameIdByUsernameByPathByVersion();
            }
            else if(IsContext("game-profile-content/set/by-game-id/by-username/by-path/by-version/by-platform/by-increment")){
                SetGameProfileContentByGameIdByUsernameByPathByVersionByPlatformByIncrement();
            }
            else if(IsContext("game-profile-content/del/by-uuid")){
                DelGameProfileContentByUuid();
            }
            else if(IsContext("game-profile-content/del/by-game-id/by-profile-id")){
                DelGameProfileContentByGameIdByProfileId();
            }
            else if(IsContext("game-profile-content/del/by-game-id/by-username")){
                DelGameProfileContentByGameIdByUsername();
            }
            else if(IsContext("game-profile-content/del/by-username")){
                DelGameProfileContentByUsername();
            }
            else if(IsContext("game-profile-content/del/by-game-id/by-profile-id/by-path")){
                DelGameProfileContentByGameIdByProfileIdByPath();
            }
            else if(IsContext("game-profile-content/del/by-game-id/by-profile-id/by-path/by-version")){
                DelGameProfileContentByGameIdByProfileIdByPathByVersion();
            }
            else if(IsContext("game-profile-content/del/by-game-id/by-profile-id/by-path/by-version/by-platform/by-increment")){
                DelGameProfileContentByGameIdByProfileIdByPathByVersionByPlatformByIncrement();
            }
            else if(IsContext("game-profile-content/del/by-game-id/by-username/by-path")){
                DelGameProfileContentByGameIdByUsernameByPath();
            }
            else if(IsContext("game-profile-content/del/by-game-id/by-username/by-path/by-version")){
                DelGameProfileContentByGameIdByUsernameByPathByVersion();
            }
            else if(IsContext("game-profile-content/del/by-game-id/by-username/by-path/by-version/by-platform/by-increment")){
                DelGameProfileContentByGameIdByUsernameByPathByVersionByPlatformByIncrement();
            }
            else if(IsContext("game-profile-content/get")){
                GetGameProfileContentList();
            }
            else if(IsContext("game-profile-content/get/by-uuid")){
                GetGameProfileContentListByUuid();
            }
            else if(IsContext("game-profile-content/get/by-game-id/by-profile-id")){
                GetGameProfileContentListByGameIdByProfileId();
            }
            else if(IsContext("game-profile-content/get/by-game-id/by-username")){
                GetGameProfileContentListByGameIdByUsername();
            }
            else if(IsContext("game-profile-content/get/by-username")){
                GetGameProfileContentListByUsername();
            }
            else if(IsContext("game-profile-content/get/by-game-id/by-profile-id/by-path")){
                GetGameProfileContentListByGameIdByProfileIdByPath();
            }
            else if(IsContext("game-profile-content/get/by-game-id/by-profile-id/by-path/by-version")){
                GetGameProfileContentListByGameIdByProfileIdByPathByVersion();
            }
            else if(IsContext("game-profile-content/get/by-game-id/by-profile-id/by-path/by-version/by-platform/by-increment")){
                GetGameProfileContentListByGameIdByProfileIdByPathByVersionByPlatformByIncrement();
            }
            else if(IsContext("game-profile-content/get/by-game-id/by-username/by-path")){
                GetGameProfileContentListByGameIdByUsernameByPath();
            }
            else if(IsContext("game-profile-content/get/by-game-id/by-username/by-path/by-version")){
                GetGameProfileContentListByGameIdByUsernameByPathByVersion();
            }
            else if(IsContext("game-profile-content/get/by-game-id/by-username/by-path/by-version/by-platform/by-increment")){
                GetGameProfileContentListByGameIdByUsernameByPathByVersionByPlatformByIncrement();
            }
            if(IsContext("game-app/count")){
                CountGameApp();
            }
            else if(IsContext("game-app/count/by-uuid")){
                CountGameAppByUuid();
            }
            else if(IsContext("game-app/count/by-game-id")){
                CountGameAppByGameId();
            }
            else if(IsContext("game-app/count/by-app-id")){
                CountGameAppByAppId();
            }
            else if(IsContext("game-app/count/by-game-id/by-app-id")){
                CountGameAppByGameIdByAppId();
            }
            else if(IsContext("game-app/browse/by-filter")){
                BrowseGameAppListByFilter();
            }
            else if(IsContext("game-app/set/by-uuid")){
                SetGameAppByUuid();
            }
            else if(IsContext("game-app/del/by-uuid")){
                DelGameAppByUuid();
            }
            else if(IsContext("game-app/get")){
                GetGameAppList();
            }
            else if(IsContext("game-app/get/by-uuid")){
                GetGameAppListByUuid();
            }
            else if(IsContext("game-app/get/by-game-id")){
                GetGameAppListByGameId();
            }
            else if(IsContext("game-app/get/by-app-id")){
                GetGameAppListByAppId();
            }
            else if(IsContext("game-app/get/by-game-id/by-app-id")){
                GetGameAppListByGameIdByAppId();
            }
            if(IsContext("profile-game-location/count")){
                CountProfileGameLocation();
            }
            else if(IsContext("profile-game-location/count/by-uuid")){
                CountProfileGameLocationByUuid();
            }
            else if(IsContext("profile-game-location/count/by-game-location-id")){
                CountProfileGameLocationByGameLocationId();
            }
            else if(IsContext("profile-game-location/count/by-profile-id")){
                CountProfileGameLocationByProfileId();
            }
            else if(IsContext("profile-game-location/count/by-profile-id/by-game-location-id")){
                CountProfileGameLocationByProfileIdByGameLocationId();
            }
            else if(IsContext("profile-game-location/browse/by-filter")){
                BrowseProfileGameLocationListByFilter();
            }
            else if(IsContext("profile-game-location/set/by-uuid")){
                SetProfileGameLocationByUuid();
            }
            else if(IsContext("profile-game-location/del/by-uuid")){
                DelProfileGameLocationByUuid();
            }
            else if(IsContext("profile-game-location/get")){
                GetProfileGameLocationList();
            }
            else if(IsContext("profile-game-location/get/by-uuid")){
                GetProfileGameLocationListByUuid();
            }
            else if(IsContext("profile-game-location/get/by-game-location-id")){
                GetProfileGameLocationListByGameLocationId();
            }
            else if(IsContext("profile-game-location/get/by-profile-id")){
                GetProfileGameLocationListByProfileId();
            }
            else if(IsContext("profile-game-location/get/by-profile-id/by-game-location-id")){
                GetProfileGameLocationListByProfileIdByGameLocationId();
            }
            if(IsContext("game-photo/count")){
                CountGamePhoto();
            }
            else if(IsContext("game-photo/count/by-uuid")){
                CountGamePhotoByUuid();
            }
            else if(IsContext("game-photo/count/by-external-id")){
                CountGamePhotoByExternalId();
            }
            else if(IsContext("game-photo/count/by-url")){
                CountGamePhotoByUrl();
            }
            else if(IsContext("game-photo/count/by-url/by-external-id")){
                CountGamePhotoByUrlByExternalId();
            }
            else if(IsContext("game-photo/count/by-uuid/by-external-id")){
                CountGamePhotoByUuidByExternalId();
            }
            else if(IsContext("game-photo/browse/by-filter")){
                BrowseGamePhotoListByFilter();
            }
            else if(IsContext("game-photo/set/by-uuid")){
                SetGamePhotoByUuid();
            }
            else if(IsContext("game-photo/set/by-external-id")){
                SetGamePhotoByExternalId();
            }
            else if(IsContext("game-photo/set/by-url")){
                SetGamePhotoByUrl();
            }
            else if(IsContext("game-photo/set/by-url/by-external-id")){
                SetGamePhotoByUrlByExternalId();
            }
            else if(IsContext("game-photo/set/by-uuid/by-external-id")){
                SetGamePhotoByUuidByExternalId();
            }
            else if(IsContext("game-photo/del/by-uuid")){
                DelGamePhotoByUuid();
            }
            else if(IsContext("game-photo/del/by-external-id")){
                DelGamePhotoByExternalId();
            }
            else if(IsContext("game-photo/del/by-url")){
                DelGamePhotoByUrl();
            }
            else if(IsContext("game-photo/del/by-url/by-external-id")){
                DelGamePhotoByUrlByExternalId();
            }
            else if(IsContext("game-photo/del/by-uuid/by-external-id")){
                DelGamePhotoByUuidByExternalId();
            }
            else if(IsContext("game-photo/get")){
                GetGamePhotoList();
            }
            else if(IsContext("game-photo/get/by-uuid")){
                GetGamePhotoListByUuid();
            }
            else if(IsContext("game-photo/get/by-external-id")){
                GetGamePhotoListByExternalId();
            }
            else if(IsContext("game-photo/get/by-url")){
                GetGamePhotoListByUrl();
            }
            else if(IsContext("game-photo/get/by-url/by-external-id")){
                GetGamePhotoListByUrlByExternalId();
            }
            else if(IsContext("game-photo/get/by-uuid/by-external-id")){
                GetGamePhotoListByUuidByExternalId();
            }
            if(IsContext("game-video/count")){
                CountGameVideo();
            }
            else if(IsContext("game-video/count/by-uuid")){
                CountGameVideoByUuid();
            }
            else if(IsContext("game-video/count/by-external-id")){
                CountGameVideoByExternalId();
            }
            else if(IsContext("game-video/count/by-url")){
                CountGameVideoByUrl();
            }
            else if(IsContext("game-video/count/by-url/by-external-id")){
                CountGameVideoByUrlByExternalId();
            }
            else if(IsContext("game-video/count/by-uuid/by-external-id")){
                CountGameVideoByUuidByExternalId();
            }
            else if(IsContext("game-video/browse/by-filter")){
                BrowseGameVideoListByFilter();
            }
            else if(IsContext("game-video/set/by-uuid")){
                SetGameVideoByUuid();
            }
            else if(IsContext("game-video/set/by-external-id")){
                SetGameVideoByExternalId();
            }
            else if(IsContext("game-video/set/by-url")){
                SetGameVideoByUrl();
            }
            else if(IsContext("game-video/set/by-url/by-external-id")){
                SetGameVideoByUrlByExternalId();
            }
            else if(IsContext("game-video/set/by-uuid/by-external-id")){
                SetGameVideoByUuidByExternalId();
            }
            else if(IsContext("game-video/del/by-uuid")){
                DelGameVideoByUuid();
            }
            else if(IsContext("game-video/del/by-external-id")){
                DelGameVideoByExternalId();
            }
            else if(IsContext("game-video/del/by-url")){
                DelGameVideoByUrl();
            }
            else if(IsContext("game-video/del/by-url/by-external-id")){
                DelGameVideoByUrlByExternalId();
            }
            else if(IsContext("game-video/del/by-uuid/by-external-id")){
                DelGameVideoByUuidByExternalId();
            }
            else if(IsContext("game-video/get")){
                GetGameVideoList();
            }
            else if(IsContext("game-video/get/by-uuid")){
                GetGameVideoListByUuid();
            }
            else if(IsContext("game-video/get/by-external-id")){
                GetGameVideoListByExternalId();
            }
            else if(IsContext("game-video/get/by-url")){
                GetGameVideoListByUrl();
            }
            else if(IsContext("game-video/get/by-url/by-external-id")){
                GetGameVideoListByUrlByExternalId();
            }
            else if(IsContext("game-video/get/by-uuid/by-external-id")){
                GetGameVideoListByUuidByExternalId();
            }
            if(IsContext("game-rpg-item/count")){
                CountGameRpgItem();
            }
            else if(IsContext("game-rpg-item/count/by-uuid")){
                CountGameRpgItemByUuid();
            }
            else if(IsContext("game-rpg-item/count/by-game-id")){
                CountGameRpgItemByGameId();
            }
            else if(IsContext("game-rpg-item/count/by-url")){
                CountGameRpgItemByUrl();
            }
            else if(IsContext("game-rpg-item/count/by-url/by-game-id")){
                CountGameRpgItemByUrlByGameId();
            }
            else if(IsContext("game-rpg-item/count/by-uuid/by-game-id")){
                CountGameRpgItemByUuidByGameId();
            }
            else if(IsContext("game-rpg-item/browse/by-filter")){
                BrowseGameRpgItemListByFilter();
            }
            else if(IsContext("game-rpg-item/set/by-uuid")){
                SetGameRpgItemByUuid();
            }
            else if(IsContext("game-rpg-item/set/by-game-id")){
                SetGameRpgItemByGameId();
            }
            else if(IsContext("game-rpg-item/set/by-url")){
                SetGameRpgItemByUrl();
            }
            else if(IsContext("game-rpg-item/set/by-url/by-game-id")){
                SetGameRpgItemByUrlByGameId();
            }
            else if(IsContext("game-rpg-item/set/by-uuid/by-game-id")){
                SetGameRpgItemByUuidByGameId();
            }
            else if(IsContext("game-rpg-item/del/by-uuid")){
                DelGameRpgItemByUuid();
            }
            else if(IsContext("game-rpg-item/del/by-game-id")){
                DelGameRpgItemByGameId();
            }
            else if(IsContext("game-rpg-item/del/by-url")){
                DelGameRpgItemByUrl();
            }
            else if(IsContext("game-rpg-item/del/by-url/by-game-id")){
                DelGameRpgItemByUrlByGameId();
            }
            else if(IsContext("game-rpg-item/del/by-uuid/by-game-id")){
                DelGameRpgItemByUuidByGameId();
            }
            else if(IsContext("game-rpg-item/get")){
                GetGameRpgItemList();
            }
            else if(IsContext("game-rpg-item/get/by-uuid")){
                GetGameRpgItemListByUuid();
            }
            else if(IsContext("game-rpg-item/get/by-game-id")){
                GetGameRpgItemListByGameId();
            }
            else if(IsContext("game-rpg-item/get/by-url")){
                GetGameRpgItemListByUrl();
            }
            else if(IsContext("game-rpg-item/get/by-url/by-game-id")){
                GetGameRpgItemListByUrlByGameId();
            }
            else if(IsContext("game-rpg-item/get/by-uuid/by-game-id")){
                GetGameRpgItemListByUuidByGameId();
            }
            if(IsContext("game-rpg-item-weapon/count")){
                CountGameRpgItemWeapon();
            }
            else if(IsContext("game-rpg-item-weapon/count/by-uuid")){
                CountGameRpgItemWeaponByUuid();
            }
            else if(IsContext("game-rpg-item-weapon/count/by-game-id")){
                CountGameRpgItemWeaponByGameId();
            }
            else if(IsContext("game-rpg-item-weapon/count/by-url")){
                CountGameRpgItemWeaponByUrl();
            }
            else if(IsContext("game-rpg-item-weapon/count/by-url/by-game-id")){
                CountGameRpgItemWeaponByUrlByGameId();
            }
            else if(IsContext("game-rpg-item-weapon/count/by-uuid/by-game-id")){
                CountGameRpgItemWeaponByUuidByGameId();
            }
            else if(IsContext("game-rpg-item-weapon/browse/by-filter")){
                BrowseGameRpgItemWeaponListByFilter();
            }
            else if(IsContext("game-rpg-item-weapon/set/by-uuid")){
                SetGameRpgItemWeaponByUuid();
            }
            else if(IsContext("game-rpg-item-weapon/set/by-game-id")){
                SetGameRpgItemWeaponByGameId();
            }
            else if(IsContext("game-rpg-item-weapon/set/by-url")){
                SetGameRpgItemWeaponByUrl();
            }
            else if(IsContext("game-rpg-item-weapon/set/by-url/by-game-id")){
                SetGameRpgItemWeaponByUrlByGameId();
            }
            else if(IsContext("game-rpg-item-weapon/set/by-uuid/by-game-id")){
                SetGameRpgItemWeaponByUuidByGameId();
            }
            else if(IsContext("game-rpg-item-weapon/del/by-uuid")){
                DelGameRpgItemWeaponByUuid();
            }
            else if(IsContext("game-rpg-item-weapon/del/by-game-id")){
                DelGameRpgItemWeaponByGameId();
            }
            else if(IsContext("game-rpg-item-weapon/del/by-url")){
                DelGameRpgItemWeaponByUrl();
            }
            else if(IsContext("game-rpg-item-weapon/del/by-url/by-game-id")){
                DelGameRpgItemWeaponByUrlByGameId();
            }
            else if(IsContext("game-rpg-item-weapon/del/by-uuid/by-game-id")){
                DelGameRpgItemWeaponByUuidByGameId();
            }
            else if(IsContext("game-rpg-item-weapon/get")){
                GetGameRpgItemWeaponList();
            }
            else if(IsContext("game-rpg-item-weapon/get/by-uuid")){
                GetGameRpgItemWeaponListByUuid();
            }
            else if(IsContext("game-rpg-item-weapon/get/by-game-id")){
                GetGameRpgItemWeaponListByGameId();
            }
            else if(IsContext("game-rpg-item-weapon/get/by-url")){
                GetGameRpgItemWeaponListByUrl();
            }
            else if(IsContext("game-rpg-item-weapon/get/by-url/by-game-id")){
                GetGameRpgItemWeaponListByUrlByGameId();
            }
            else if(IsContext("game-rpg-item-weapon/get/by-uuid/by-game-id")){
                GetGameRpgItemWeaponListByUuidByGameId();
            }
            if(IsContext("game-rpg-item-skill/count")){
                CountGameRpgItemSkill();
            }
            else if(IsContext("game-rpg-item-skill/count/by-uuid")){
                CountGameRpgItemSkillByUuid();
            }
            else if(IsContext("game-rpg-item-skill/count/by-game-id")){
                CountGameRpgItemSkillByGameId();
            }
            else if(IsContext("game-rpg-item-skill/count/by-url")){
                CountGameRpgItemSkillByUrl();
            }
            else if(IsContext("game-rpg-item-skill/count/by-url/by-game-id")){
                CountGameRpgItemSkillByUrlByGameId();
            }
            else if(IsContext("game-rpg-item-skill/count/by-uuid/by-game-id")){
                CountGameRpgItemSkillByUuidByGameId();
            }
            else if(IsContext("game-rpg-item-skill/browse/by-filter")){
                BrowseGameRpgItemSkillListByFilter();
            }
            else if(IsContext("game-rpg-item-skill/set/by-uuid")){
                SetGameRpgItemSkillByUuid();
            }
            else if(IsContext("game-rpg-item-skill/set/by-game-id")){
                SetGameRpgItemSkillByGameId();
            }
            else if(IsContext("game-rpg-item-skill/set/by-url")){
                SetGameRpgItemSkillByUrl();
            }
            else if(IsContext("game-rpg-item-skill/set/by-url/by-game-id")){
                SetGameRpgItemSkillByUrlByGameId();
            }
            else if(IsContext("game-rpg-item-skill/set/by-uuid/by-game-id")){
                SetGameRpgItemSkillByUuidByGameId();
            }
            else if(IsContext("game-rpg-item-skill/del/by-uuid")){
                DelGameRpgItemSkillByUuid();
            }
            else if(IsContext("game-rpg-item-skill/del/by-game-id")){
                DelGameRpgItemSkillByGameId();
            }
            else if(IsContext("game-rpg-item-skill/del/by-url")){
                DelGameRpgItemSkillByUrl();
            }
            else if(IsContext("game-rpg-item-skill/del/by-url/by-game-id")){
                DelGameRpgItemSkillByUrlByGameId();
            }
            else if(IsContext("game-rpg-item-skill/del/by-uuid/by-game-id")){
                DelGameRpgItemSkillByUuidByGameId();
            }
            else if(IsContext("game-rpg-item-skill/get")){
                GetGameRpgItemSkillList();
            }
            else if(IsContext("game-rpg-item-skill/get/by-uuid")){
                GetGameRpgItemSkillListByUuid();
            }
            else if(IsContext("game-rpg-item-skill/get/by-game-id")){
                GetGameRpgItemSkillListByGameId();
            }
            else if(IsContext("game-rpg-item-skill/get/by-url")){
                GetGameRpgItemSkillListByUrl();
            }
            else if(IsContext("game-rpg-item-skill/get/by-url/by-game-id")){
                GetGameRpgItemSkillListByUrlByGameId();
            }
            else if(IsContext("game-rpg-item-skill/get/by-uuid/by-game-id")){
                GetGameRpgItemSkillListByUuidByGameId();
            }
            if(IsContext("game-product/count")){
                CountGameProduct();
            }
            else if(IsContext("game-product/count/by-uuid")){
                CountGameProductByUuid();
            }
            else if(IsContext("game-product/count/by-game-id")){
                CountGameProductByGameId();
            }
            else if(IsContext("game-product/count/by-url")){
                CountGameProductByUrl();
            }
            else if(IsContext("game-product/count/by-url/by-game-id")){
                CountGameProductByUrlByGameId();
            }
            else if(IsContext("game-product/count/by-uuid/by-game-id")){
                CountGameProductByUuidByGameId();
            }
            else if(IsContext("game-product/browse/by-filter")){
                BrowseGameProductListByFilter();
            }
            else if(IsContext("game-product/set/by-uuid")){
                SetGameProductByUuid();
            }
            else if(IsContext("game-product/set/by-game-id")){
                SetGameProductByGameId();
            }
            else if(IsContext("game-product/set/by-url")){
                SetGameProductByUrl();
            }
            else if(IsContext("game-product/set/by-url/by-game-id")){
                SetGameProductByUrlByGameId();
            }
            else if(IsContext("game-product/set/by-uuid/by-game-id")){
                SetGameProductByUuidByGameId();
            }
            else if(IsContext("game-product/del/by-uuid")){
                DelGameProductByUuid();
            }
            else if(IsContext("game-product/del/by-game-id")){
                DelGameProductByGameId();
            }
            else if(IsContext("game-product/del/by-url")){
                DelGameProductByUrl();
            }
            else if(IsContext("game-product/del/by-url/by-game-id")){
                DelGameProductByUrlByGameId();
            }
            else if(IsContext("game-product/del/by-uuid/by-game-id")){
                DelGameProductByUuidByGameId();
            }
            else if(IsContext("game-product/get")){
                GetGameProductList();
            }
            else if(IsContext("game-product/get/by-uuid")){
                GetGameProductListByUuid();
            }
            else if(IsContext("game-product/get/by-game-id")){
                GetGameProductListByGameId();
            }
            else if(IsContext("game-product/get/by-url")){
                GetGameProductListByUrl();
            }
            else if(IsContext("game-product/get/by-url/by-game-id")){
                GetGameProductListByUrlByGameId();
            }
            else if(IsContext("game-product/get/by-uuid/by-game-id")){
                GetGameProductListByUuidByGameId();
            }
            if(IsContext("game-leaderboard/count")){
                CountGameLeaderboard();
            }
            else if(IsContext("game-leaderboard/count/by-uuid")){
                CountGameLeaderboardByUuid();
            }
            else if(IsContext("game-leaderboard/count/by-game-id")){
                CountGameLeaderboardByGameId();
            }
            else if(IsContext("game-leaderboard/count/by-code")){
                CountGameLeaderboardByCode();
            }
            else if(IsContext("game-leaderboard/count/by-code/by-game-id")){
                CountGameLeaderboardByCodeByGameId();
            }
            else if(IsContext("game-leaderboard/count/by-code/by-game-id/by-profile-id")){
                CountGameLeaderboardByCodeByGameIdByProfileId();
            }
            else if(IsContext("game-leaderboard/count/by-code/by-game-id/by-profile-id/by-timestamp")){
                CountGameLeaderboardByCodeByGameIdByProfileIdByTimestamp();
            }
            else if(IsContext("game-leaderboard/count/by-profile-id/by-game-id")){
                CountGameLeaderboardByProfileIdByGameId();
            }
            else if(IsContext("game-leaderboard/browse/by-filter")){
                BrowseGameLeaderboardListByFilter();
            }
            else if(IsContext("game-leaderboard/set/by-uuid")){
                SetGameLeaderboardByUuid();
            }
            else if(IsContext("game-leaderboard/set/by-uuid/by-profile-id/by-game-id/by-timestamp")){
                SetGameLeaderboardByUuidByProfileIdByGameIdByTimestamp();
            }
            else if(IsContext("game-leaderboard/set/by-code")){
                SetGameLeaderboardByCode();
            }
            else if(IsContext("game-leaderboard/set/by-code/by-game-id")){
                SetGameLeaderboardByCodeByGameId();
            }
            else if(IsContext("game-leaderboard/set/by-code/by-game-id/by-profile-id")){
                SetGameLeaderboardByCodeByGameIdByProfileId();
            }
            else if(IsContext("game-leaderboard/set/by-code/by-game-id/by-profile-id/by-timestamp")){
                SetGameLeaderboardByCodeByGameIdByProfileIdByTimestamp();
            }
            else if(IsContext("game-leaderboard/del/by-uuid")){
                DelGameLeaderboardByUuid();
            }
            else if(IsContext("game-leaderboard/del/by-code")){
                DelGameLeaderboardByCode();
            }
            else if(IsContext("game-leaderboard/del/by-code/by-game-id")){
                DelGameLeaderboardByCodeByGameId();
            }
            else if(IsContext("game-leaderboard/del/by-code/by-game-id/by-profile-id")){
                DelGameLeaderboardByCodeByGameIdByProfileId();
            }
            else if(IsContext("game-leaderboard/del/by-code/by-game-id/by-profile-id/by-timestamp")){
                DelGameLeaderboardByCodeByGameIdByProfileIdByTimestamp();
            }
            else if(IsContext("game-leaderboard/del/by-profile-id/by-game-id")){
                DelGameLeaderboardByProfileIdByGameId();
            }
            else if(IsContext("game-leaderboard/get")){
                GetGameLeaderboardList();
            }
            else if(IsContext("game-leaderboard/get/by-uuid")){
                GetGameLeaderboardListByUuid();
            }
            else if(IsContext("game-leaderboard/get/by-game-id")){
                GetGameLeaderboardListByGameId();
            }
            else if(IsContext("game-leaderboard/get/by-code")){
                GetGameLeaderboardListByCode();
            }
            else if(IsContext("game-leaderboard/get/by-code/by-game-id")){
                GetGameLeaderboardListByCodeByGameId();
            }
            else if(IsContext("game-leaderboard/get/by-code/by-game-id/by-profile-id")){
                GetGameLeaderboardListByCodeByGameIdByProfileId();
            }
            else if(IsContext("game-leaderboard/get/by-code/by-game-id/by-profile-id/by-timestamp")){
                GetGameLeaderboardListByCodeByGameIdByProfileIdByTimestamp();
            }
            else if(IsContext("game-leaderboard/get/by-profile-id/by-game-id")){
                GetGameLeaderboardListByProfileIdByGameId();
            }
            else if(IsContext("game-leaderboard/get/by-profile-id/by-game-id/by-timestamp")){
                GetGameLeaderboardListByProfileIdByGameIdByTimestamp();
            }
            if(IsContext("game-leaderboard-item/count")){
                CountGameLeaderboardItem();
            }
            else if(IsContext("game-leaderboard-item/count/by-uuid")){
                CountGameLeaderboardItemByUuid();
            }
            else if(IsContext("game-leaderboard-item/count/by-game-id")){
                CountGameLeaderboardItemByGameId();
            }
            else if(IsContext("game-leaderboard-item/count/by-code")){
                CountGameLeaderboardItemByCode();
            }
            else if(IsContext("game-leaderboard-item/count/by-code/by-game-id")){
                CountGameLeaderboardItemByCodeByGameId();
            }
            else if(IsContext("game-leaderboard-item/count/by-code/by-game-id/by-profile-id")){
                CountGameLeaderboardItemByCodeByGameIdByProfileId();
            }
            else if(IsContext("game-leaderboard-item/count/by-code/by-game-id/by-profile-id/by-timestamp")){
                CountGameLeaderboardItemByCodeByGameIdByProfileIdByTimestamp();
            }
            else if(IsContext("game-leaderboard-item/count/by-profile-id/by-game-id")){
                CountGameLeaderboardItemByProfileIdByGameId();
            }
            else if(IsContext("game-leaderboard-item/browse/by-filter")){
                BrowseGameLeaderboardItemListByFilter();
            }
            else if(IsContext("game-leaderboard-item/set/by-uuid")){
                SetGameLeaderboardItemByUuid();
            }
            else if(IsContext("game-leaderboard-item/set/by-uuid/by-profile-id/by-game-id/by-timestamp")){
                SetGameLeaderboardItemByUuidByProfileIdByGameIdByTimestamp();
            }
            else if(IsContext("game-leaderboard-item/set/by-code")){
                SetGameLeaderboardItemByCode();
            }
            else if(IsContext("game-leaderboard-item/set/by-code/by-game-id")){
                SetGameLeaderboardItemByCodeByGameId();
            }
            else if(IsContext("game-leaderboard-item/set/by-code/by-game-id/by-profile-id")){
                SetGameLeaderboardItemByCodeByGameIdByProfileId();
            }
            else if(IsContext("game-leaderboard-item/set/by-code/by-game-id/by-profile-id/by-timestamp")){
                SetGameLeaderboardItemByCodeByGameIdByProfileIdByTimestamp();
            }
            else if(IsContext("game-leaderboard-item/del/by-uuid")){
                DelGameLeaderboardItemByUuid();
            }
            else if(IsContext("game-leaderboard-item/del/by-code")){
                DelGameLeaderboardItemByCode();
            }
            else if(IsContext("game-leaderboard-item/del/by-code/by-game-id")){
                DelGameLeaderboardItemByCodeByGameId();
            }
            else if(IsContext("game-leaderboard-item/del/by-code/by-game-id/by-profile-id")){
                DelGameLeaderboardItemByCodeByGameIdByProfileId();
            }
            else if(IsContext("game-leaderboard-item/del/by-code/by-game-id/by-profile-id/by-timestamp")){
                DelGameLeaderboardItemByCodeByGameIdByProfileIdByTimestamp();
            }
            else if(IsContext("game-leaderboard-item/del/by-profile-id/by-game-id")){
                DelGameLeaderboardItemByProfileIdByGameId();
            }
            else if(IsContext("game-leaderboard-item/get")){
                GetGameLeaderboardItemList();
            }
            else if(IsContext("game-leaderboard-item/get/by-uuid")){
                GetGameLeaderboardItemListByUuid();
            }
            else if(IsContext("game-leaderboard-item/get/by-game-id")){
                GetGameLeaderboardItemListByGameId();
            }
            else if(IsContext("game-leaderboard-item/get/by-code")){
                GetGameLeaderboardItemListByCode();
            }
            else if(IsContext("game-leaderboard-item/get/by-code/by-game-id")){
                GetGameLeaderboardItemListByCodeByGameId();
            }
            else if(IsContext("game-leaderboard-item/get/by-code/by-game-id/by-profile-id")){
                GetGameLeaderboardItemListByCodeByGameIdByProfileId();
            }
            else if(IsContext("game-leaderboard-item/get/by-code/by-game-id/by-profile-id/by-timestamp")){
                GetGameLeaderboardItemListByCodeByGameIdByProfileIdByTimestamp();
            }
            else if(IsContext("game-leaderboard-item/get/by-profile-id/by-game-id")){
                GetGameLeaderboardItemListByProfileIdByGameId();
            }
            else if(IsContext("game-leaderboard-item/get/by-profile-id/by-game-id/by-timestamp")){
                GetGameLeaderboardItemListByProfileIdByGameIdByTimestamp();
            }
            if(IsContext("game-leaderboard-rollup/count")){
                CountGameLeaderboardRollup();
            }
            else if(IsContext("game-leaderboard-rollup/count/by-uuid")){
                CountGameLeaderboardRollupByUuid();
            }
            else if(IsContext("game-leaderboard-rollup/count/by-game-id")){
                CountGameLeaderboardRollupByGameId();
            }
            else if(IsContext("game-leaderboard-rollup/count/by-code")){
                CountGameLeaderboardRollupByCode();
            }
            else if(IsContext("game-leaderboard-rollup/count/by-code/by-game-id")){
                CountGameLeaderboardRollupByCodeByGameId();
            }
            else if(IsContext("game-leaderboard-rollup/count/by-code/by-game-id/by-profile-id")){
                CountGameLeaderboardRollupByCodeByGameIdByProfileId();
            }
            else if(IsContext("game-leaderboard-rollup/count/by-code/by-game-id/by-profile-id/by-timestamp")){
                CountGameLeaderboardRollupByCodeByGameIdByProfileIdByTimestamp();
            }
            else if(IsContext("game-leaderboard-rollup/count/by-profile-id/by-game-id")){
                CountGameLeaderboardRollupByProfileIdByGameId();
            }
            else if(IsContext("game-leaderboard-rollup/browse/by-filter")){
                BrowseGameLeaderboardRollupListByFilter();
            }
            else if(IsContext("game-leaderboard-rollup/set/by-uuid")){
                SetGameLeaderboardRollupByUuid();
            }
            else if(IsContext("game-leaderboard-rollup/set/by-uuid/by-profile-id/by-game-id/by-timestamp")){
                SetGameLeaderboardRollupByUuidByProfileIdByGameIdByTimestamp();
            }
            else if(IsContext("game-leaderboard-rollup/set/by-code")){
                SetGameLeaderboardRollupByCode();
            }
            else if(IsContext("game-leaderboard-rollup/set/by-code/by-game-id")){
                SetGameLeaderboardRollupByCodeByGameId();
            }
            else if(IsContext("game-leaderboard-rollup/set/by-code/by-game-id/by-profile-id")){
                SetGameLeaderboardRollupByCodeByGameIdByProfileId();
            }
            else if(IsContext("game-leaderboard-rollup/set/by-code/by-game-id/by-profile-id/by-timestamp")){
                SetGameLeaderboardRollupByCodeByGameIdByProfileIdByTimestamp();
            }
            else if(IsContext("game-leaderboard-rollup/del/by-uuid")){
                DelGameLeaderboardRollupByUuid();
            }
            else if(IsContext("game-leaderboard-rollup/del/by-code")){
                DelGameLeaderboardRollupByCode();
            }
            else if(IsContext("game-leaderboard-rollup/del/by-code/by-game-id")){
                DelGameLeaderboardRollupByCodeByGameId();
            }
            else if(IsContext("game-leaderboard-rollup/del/by-code/by-game-id/by-profile-id")){
                DelGameLeaderboardRollupByCodeByGameIdByProfileId();
            }
            else if(IsContext("game-leaderboard-rollup/del/by-code/by-game-id/by-profile-id/by-timestamp")){
                DelGameLeaderboardRollupByCodeByGameIdByProfileIdByTimestamp();
            }
            else if(IsContext("game-leaderboard-rollup/del/by-profile-id/by-game-id")){
                DelGameLeaderboardRollupByProfileIdByGameId();
            }
            else if(IsContext("game-leaderboard-rollup/get")){
                GetGameLeaderboardRollupList();
            }
            else if(IsContext("game-leaderboard-rollup/get/by-uuid")){
                GetGameLeaderboardRollupListByUuid();
            }
            else if(IsContext("game-leaderboard-rollup/get/by-game-id")){
                GetGameLeaderboardRollupListByGameId();
            }
            else if(IsContext("game-leaderboard-rollup/get/by-code")){
                GetGameLeaderboardRollupListByCode();
            }
            else if(IsContext("game-leaderboard-rollup/get/by-code/by-game-id")){
                GetGameLeaderboardRollupListByCodeByGameId();
            }
            else if(IsContext("game-leaderboard-rollup/get/by-code/by-game-id/by-profile-id")){
                GetGameLeaderboardRollupListByCodeByGameIdByProfileId();
            }
            else if(IsContext("game-leaderboard-rollup/get/by-code/by-game-id/by-profile-id/by-timestamp")){
                GetGameLeaderboardRollupListByCodeByGameIdByProfileIdByTimestamp();
            }
            else if(IsContext("game-leaderboard-rollup/get/by-profile-id/by-game-id")){
                GetGameLeaderboardRollupListByProfileIdByGameId();
            }
            else if(IsContext("game-leaderboard-rollup/get/by-profile-id/by-game-id/by-timestamp")){
                GetGameLeaderboardRollupListByProfileIdByGameIdByTimestamp();
            }
            if(IsContext("game-live-queue/count")){
                CountGameLiveQueue();
            }
            else if(IsContext("game-live-queue/count/by-uuid")){
                CountGameLiveQueueByUuid();
            }
            else if(IsContext("game-live-queue/count/by-profile-id/by-game-id")){
                CountGameLiveQueueByProfileIdByGameId();
            }
            else if(IsContext("game-live-queue/browse/by-filter")){
                BrowseGameLiveQueueListByFilter();
            }
            else if(IsContext("game-live-queue/set/by-uuid")){
                SetGameLiveQueueByUuid();
            }
            else if(IsContext("game-live-queue/set/by-profile-id/by-game-id")){
                SetGameLiveQueueByProfileIdByGameId();
            }
            else if(IsContext("game-live-queue/del/by-uuid")){
                DelGameLiveQueueByUuid();
            }
            else if(IsContext("game-live-queue/del/by-profile-id/by-game-id")){
                DelGameLiveQueueByProfileIdByGameId();
            }
            else if(IsContext("game-live-queue/get")){
                GetGameLiveQueueList();
            }
            else if(IsContext("game-live-queue/get/by-uuid")){
                GetGameLiveQueueListByUuid();
            }
            else if(IsContext("game-live-queue/get/by-game-id")){
                GetGameLiveQueueListByGameId();
            }
            else if(IsContext("game-live-queue/get/by-profile-id/by-game-id")){
                GetGameLiveQueueListByProfileIdByGameId();
            }
            if(IsContext("game-live-recent-queue/count")){
                CountGameLiveRecentQueue();
            }
            else if(IsContext("game-live-recent-queue/count/by-uuid")){
                CountGameLiveRecentQueueByUuid();
            }
            else if(IsContext("game-live-recent-queue/count/by-profile-id/by-game-id")){
                CountGameLiveRecentQueueByProfileIdByGameId();
            }
            else if(IsContext("game-live-recent-queue/browse/by-filter")){
                BrowseGameLiveRecentQueueListByFilter();
            }
            else if(IsContext("game-live-recent-queue/set/by-uuid")){
                SetGameLiveRecentQueueByUuid();
            }
            else if(IsContext("game-live-recent-queue/set/by-profile-id/by-game-id")){
                SetGameLiveRecentQueueByProfileIdByGameId();
            }
            else if(IsContext("game-live-recent-queue/del/by-uuid")){
                DelGameLiveRecentQueueByUuid();
            }
            else if(IsContext("game-live-recent-queue/del/by-profile-id/by-game-id")){
                DelGameLiveRecentQueueByProfileIdByGameId();
            }
            else if(IsContext("game-live-recent-queue/get")){
                GetGameLiveRecentQueueList();
            }
            else if(IsContext("game-live-recent-queue/get/by-uuid")){
                GetGameLiveRecentQueueListByUuid();
            }
            else if(IsContext("game-live-recent-queue/get/by-game-id")){
                GetGameLiveRecentQueueListByGameId();
            }
            else if(IsContext("game-live-recent-queue/get/by-profile-id/by-game-id")){
                GetGameLiveRecentQueueListByProfileIdByGameId();
            }
            if(IsContext("game-profile-statistic/count")){
                CountGameProfileStatistic();
            }
            else if(IsContext("game-profile-statistic/count/by-uuid")){
                CountGameProfileStatisticByUuid();
            }
            else if(IsContext("game-profile-statistic/count/by-code")){
                CountGameProfileStatisticByCode();
            }
            else if(IsContext("game-profile-statistic/count/by-game-id")){
                CountGameProfileStatisticByGameId();
            }
            else if(IsContext("game-profile-statistic/count/by-code/by-game-id")){
                CountGameProfileStatisticByCodeByGameId();
            }
            else if(IsContext("game-profile-statistic/count/by-profile-id/by-game-id")){
                CountGameProfileStatisticByProfileIdByGameId();
            }
            else if(IsContext("game-profile-statistic/count/by-code/by-profile-id/by-game-id")){
                CountGameProfileStatisticByCodeByProfileIdByGameId();
            }
            else if(IsContext("game-profile-statistic/count/by-code/by-profile-id/by-game-id/by-timestamp")){
                CountGameProfileStatisticByCodeByProfileIdByGameIdByTimestamp();
            }
            else if(IsContext("game-profile-statistic/browse/by-filter")){
                BrowseGameProfileStatisticListByFilter();
            }
            else if(IsContext("game-profile-statistic/set/by-uuid")){
                SetGameProfileStatisticByUuid();
            }
            else if(IsContext("game-profile-statistic/set/by-uuid/by-profile-id/by-game-id/by-timestamp")){
                SetGameProfileStatisticByUuidByProfileIdByGameIdByTimestamp();
            }
            else if(IsContext("game-profile-statistic/set/by-profile-id/by-code")){
                SetGameProfileStatisticByProfileIdByCode();
            }
            else if(IsContext("game-profile-statistic/set/by-profile-id/by-code/by-timestamp")){
                SetGameProfileStatisticByProfileIdByCodeByTimestamp();
            }
            else if(IsContext("game-profile-statistic/set/by-code/by-profile-id/by-game-id/by-timestamp")){
                SetGameProfileStatisticByCodeByProfileIdByGameIdByTimestamp();
            }
            else if(IsContext("game-profile-statistic/set/by-code/by-profile-id/by-game-id")){
                SetGameProfileStatisticByCodeByProfileIdByGameId();
            }
            else if(IsContext("game-profile-statistic/del/by-uuid")){
                DelGameProfileStatisticByUuid();
            }
            else if(IsContext("game-profile-statistic/del/by-code/by-game-id")){
                DelGameProfileStatisticByCodeByGameId();
            }
            else if(IsContext("game-profile-statistic/del/by-profile-id/by-game-id")){
                DelGameProfileStatisticByProfileIdByGameId();
            }
            else if(IsContext("game-profile-statistic/del/by-code/by-profile-id/by-game-id")){
                DelGameProfileStatisticByCodeByProfileIdByGameId();
            }
            else if(IsContext("game-profile-statistic/get/by-uuid")){
                GetGameProfileStatisticListByUuid();
            }
            else if(IsContext("game-profile-statistic/get/by-code")){
                GetGameProfileStatisticListByCode();
            }
            else if(IsContext("game-profile-statistic/get/by-game-id")){
                GetGameProfileStatisticListByGameId();
            }
            else if(IsContext("game-profile-statistic/get/by-code/by-game-id")){
                GetGameProfileStatisticListByCodeByGameId();
            }
            else if(IsContext("game-profile-statistic/get/by-profile-id/by-game-id")){
                GetGameProfileStatisticListByProfileIdByGameId();
            }
            else if(IsContext("game-profile-statistic/get/by-profile-id/by-game-id/by-timestamp")){
                GetGameProfileStatisticListByProfileIdByGameIdByTimestamp();
            }
            else if(IsContext("game-profile-statistic/get/by-code/by-profile-id/by-game-id")){
                GetGameProfileStatisticListByCodeByProfileIdByGameId();
            }
            else if(IsContext("game-profile-statistic/get/by-code/by-profile-id/by-game-id/by-timestamp")){
                GetGameProfileStatisticListByCodeByProfileIdByGameIdByTimestamp();
            }
            if(IsContext("game-statistic-meta/count")){
                CountGameStatisticMeta();
            }
            else if(IsContext("game-statistic-meta/count/by-uuid")){
                CountGameStatisticMetaByUuid();
            }
            else if(IsContext("game-statistic-meta/count/by-code")){
                CountGameStatisticMetaByCode();
            }
            else if(IsContext("game-statistic-meta/count/by-code/by-game-id")){
                CountGameStatisticMetaByCodeByGameId();
            }
            else if(IsContext("game-statistic-meta/count/by-name")){
                CountGameStatisticMetaByName();
            }
            else if(IsContext("game-statistic-meta/count/by-game-id")){
                CountGameStatisticMetaByGameId();
            }
            else if(IsContext("game-statistic-meta/browse/by-filter")){
                BrowseGameStatisticMetaListByFilter();
            }
            else if(IsContext("game-statistic-meta/set/by-uuid")){
                SetGameStatisticMetaByUuid();
            }
            else if(IsContext("game-statistic-meta/set/by-code/by-game-id")){
                SetGameStatisticMetaByCodeByGameId();
            }
            else if(IsContext("game-statistic-meta/del/by-uuid")){
                DelGameStatisticMetaByUuid();
            }
            else if(IsContext("game-statistic-meta/del/by-code/by-game-id")){
                DelGameStatisticMetaByCodeByGameId();
            }
            else if(IsContext("game-statistic-meta/get/by-uuid")){
                GetGameStatisticMetaListByUuid();
            }
            else if(IsContext("game-statistic-meta/get/by-code")){
                GetGameStatisticMetaListByCode();
            }
            else if(IsContext("game-statistic-meta/get/by-name")){
                GetGameStatisticMetaListByName();
            }
            else if(IsContext("game-statistic-meta/get/by-game-id")){
                GetGameStatisticMetaListByGameId();
            }
            else if(IsContext("game-statistic-meta/get/by-code/by-game-id")){
                GetGameStatisticMetaListByCodeByGameId();
            }
            if(IsContext("game-profile-statistic-item/count")){
                CountGameProfileStatisticItem();
            }
            else if(IsContext("game-profile-statistic-item/count/by-uuid")){
                CountGameProfileStatisticItemByUuid();
            }
            else if(IsContext("game-profile-statistic-item/count/by-code")){
                CountGameProfileStatisticItemByCode();
            }
            else if(IsContext("game-profile-statistic-item/count/by-game-id")){
                CountGameProfileStatisticItemByGameId();
            }
            else if(IsContext("game-profile-statistic-item/count/by-code/by-game-id")){
                CountGameProfileStatisticItemByCodeByGameId();
            }
            else if(IsContext("game-profile-statistic-item/count/by-profile-id/by-game-id")){
                CountGameProfileStatisticItemByProfileIdByGameId();
            }
            else if(IsContext("game-profile-statistic-item/count/by-code/by-profile-id/by-game-id")){
                CountGameProfileStatisticItemByCodeByProfileIdByGameId();
            }
            else if(IsContext("game-profile-statistic-item/count/by-code/by-profile-id/by-game-id/by-timestamp")){
                CountGameProfileStatisticItemByCodeByProfileIdByGameIdByTimestamp();
            }
            else if(IsContext("game-profile-statistic-item/browse/by-filter")){
                BrowseGameProfileStatisticItemListByFilter();
            }
            else if(IsContext("game-profile-statistic-item/set/by-uuid")){
                SetGameProfileStatisticItemByUuid();
            }
            else if(IsContext("game-profile-statistic-item/set/by-uuid/by-profile-id/by-game-id/by-timestamp")){
                SetGameProfileStatisticItemByUuidByProfileIdByGameIdByTimestamp();
            }
            else if(IsContext("game-profile-statistic-item/set/by-profile-id/by-code")){
                SetGameProfileStatisticItemByProfileIdByCode();
            }
            else if(IsContext("game-profile-statistic-item/set/by-profile-id/by-code/by-timestamp")){
                SetGameProfileStatisticItemByProfileIdByCodeByTimestamp();
            }
            else if(IsContext("game-profile-statistic-item/set/by-code/by-profile-id/by-game-id/by-timestamp")){
                SetGameProfileStatisticItemByCodeByProfileIdByGameIdByTimestamp();
            }
            else if(IsContext("game-profile-statistic-item/set/by-code/by-profile-id/by-game-id")){
                SetGameProfileStatisticItemByCodeByProfileIdByGameId();
            }
            else if(IsContext("game-profile-statistic-item/del/by-uuid")){
                DelGameProfileStatisticItemByUuid();
            }
            else if(IsContext("game-profile-statistic-item/del/by-code/by-game-id")){
                DelGameProfileStatisticItemByCodeByGameId();
            }
            else if(IsContext("game-profile-statistic-item/del/by-profile-id/by-game-id")){
                DelGameProfileStatisticItemByProfileIdByGameId();
            }
            else if(IsContext("game-profile-statistic-item/del/by-code/by-profile-id/by-game-id")){
                DelGameProfileStatisticItemByCodeByProfileIdByGameId();
            }
            else if(IsContext("game-profile-statistic-item/get/by-uuid")){
                GetGameProfileStatisticItemListByUuid();
            }
            else if(IsContext("game-profile-statistic-item/get/by-code")){
                GetGameProfileStatisticItemListByCode();
            }
            else if(IsContext("game-profile-statistic-item/get/by-game-id")){
                GetGameProfileStatisticItemListByGameId();
            }
            else if(IsContext("game-profile-statistic-item/get/by-code/by-game-id")){
                GetGameProfileStatisticItemListByCodeByGameId();
            }
            else if(IsContext("game-profile-statistic-item/get/by-profile-id/by-game-id")){
                GetGameProfileStatisticItemListByProfileIdByGameId();
            }
            else if(IsContext("game-profile-statistic-item/get/by-profile-id/by-game-id/by-timestamp")){
                GetGameProfileStatisticItemListByProfileIdByGameIdByTimestamp();
            }
            else if(IsContext("game-profile-statistic-item/get/by-code/by-profile-id/by-game-id")){
                GetGameProfileStatisticItemListByCodeByProfileIdByGameId();
            }
            else if(IsContext("game-profile-statistic-item/get/by-code/by-profile-id/by-game-id/by-timestamp")){
                GetGameProfileStatisticItemListByCodeByProfileIdByGameIdByTimestamp();
            }
            if(IsContext("game-key-meta/count")){
                CountGameKeyMeta();
            }
            else if(IsContext("game-key-meta/count/by-uuid")){
                CountGameKeyMetaByUuid();
            }
            else if(IsContext("game-key-meta/count/by-code")){
                CountGameKeyMetaByCode();
            }
            else if(IsContext("game-key-meta/count/by-code/by-game-id")){
                CountGameKeyMetaByCodeByGameId();
            }
            else if(IsContext("game-key-meta/count/by-name")){
                CountGameKeyMetaByName();
            }
            else if(IsContext("game-key-meta/count/by-key")){
                CountGameKeyMetaByKey();
            }
            else if(IsContext("game-key-meta/count/by-game-id")){
                CountGameKeyMetaByGameId();
            }
            else if(IsContext("game-key-meta/count/by-key/by-game-id")){
                CountGameKeyMetaByKeyByGameId();
            }
            else if(IsContext("game-key-meta/browse/by-filter")){
                BrowseGameKeyMetaListByFilter();
            }
            else if(IsContext("game-key-meta/set/by-uuid")){
                SetGameKeyMetaByUuid();
            }
            else if(IsContext("game-key-meta/set/by-code/by-game-id")){
                SetGameKeyMetaByCodeByGameId();
            }
            else if(IsContext("game-key-meta/set/by-key/by-game-id")){
                SetGameKeyMetaByKeyByGameId();
            }
            else if(IsContext("game-key-meta/set/by-key/by-game-id/by-level")){
                SetGameKeyMetaByKeyByGameIdByLevel();
            }
            else if(IsContext("game-key-meta/del/by-uuid")){
                DelGameKeyMetaByUuid();
            }
            else if(IsContext("game-key-meta/del/by-code/by-game-id")){
                DelGameKeyMetaByCodeByGameId();
            }
            else if(IsContext("game-key-meta/del/by-key/by-game-id")){
                DelGameKeyMetaByKeyByGameId();
            }
            else if(IsContext("game-key-meta/get/by-uuid")){
                GetGameKeyMetaListByUuid();
            }
            else if(IsContext("game-key-meta/get/by-code")){
                GetGameKeyMetaListByCode();
            }
            else if(IsContext("game-key-meta/get/by-code/by-game-id")){
                GetGameKeyMetaListByCodeByGameId();
            }
            else if(IsContext("game-key-meta/get/by-name")){
                GetGameKeyMetaListByName();
            }
            else if(IsContext("game-key-meta/get/by-key")){
                GetGameKeyMetaListByKey();
            }
            else if(IsContext("game-key-meta/get/by-game-id")){
                GetGameKeyMetaListByGameId();
            }
            else if(IsContext("game-key-meta/get/by-key/by-game-id")){
                GetGameKeyMetaListByKeyByGameId();
            }
            else if(IsContext("game-key-meta/get/by-code/by-level")){
                GetGameKeyMetaListByCodeByLevel();
            }
            if(IsContext("game-level/count")){
                CountGameLevel();
            }
            else if(IsContext("game-level/count/by-uuid")){
                CountGameLevelByUuid();
            }
            else if(IsContext("game-level/count/by-code")){
                CountGameLevelByCode();
            }
            else if(IsContext("game-level/count/by-code/by-game-id")){
                CountGameLevelByCodeByGameId();
            }
            else if(IsContext("game-level/count/by-name")){
                CountGameLevelByName();
            }
            else if(IsContext("game-level/count/by-game-id")){
                CountGameLevelByGameId();
            }
            else if(IsContext("game-level/browse/by-filter")){
                BrowseGameLevelListByFilter();
            }
            else if(IsContext("game-level/set/by-uuid")){
                SetGameLevelByUuid();
            }
            else if(IsContext("game-level/set/by-code/by-game-id")){
                SetGameLevelByCodeByGameId();
            }
            else if(IsContext("game-level/del/by-uuid")){
                DelGameLevelByUuid();
            }
            else if(IsContext("game-level/del/by-code/by-game-id")){
                DelGameLevelByCodeByGameId();
            }
            else if(IsContext("game-level/get/by-uuid")){
                GetGameLevelListByUuid();
            }
            else if(IsContext("game-level/get/by-code")){
                GetGameLevelListByCode();
            }
            else if(IsContext("game-level/get/by-code/by-game-id")){
                GetGameLevelListByCodeByGameId();
            }
            else if(IsContext("game-level/get/by-name")){
                GetGameLevelListByName();
            }
            else if(IsContext("game-level/get/by-game-id")){
                GetGameLevelListByGameId();
            }
            if(IsContext("game-profile-achievement/count")){
                CountGameProfileAchievement();
            }
            else if(IsContext("game-profile-achievement/count/by-uuid")){
                CountGameProfileAchievementByUuid();
            }
            else if(IsContext("game-profile-achievement/count/by-profile-id/by-code")){
                CountGameProfileAchievementByProfileIdByCode();
            }
            else if(IsContext("game-profile-achievement/count/by-username")){
                CountGameProfileAchievementByUsername();
            }
            else if(IsContext("game-profile-achievement/count/by-code/by-profile-id/by-game-id")){
                CountGameProfileAchievementByCodeByProfileIdByGameId();
            }
            else if(IsContext("game-profile-achievement/count/by-code/by-profile-id/by-game-id/by-timestamp")){
                CountGameProfileAchievementByCodeByProfileIdByGameIdByTimestamp();
            }
            else if(IsContext("game-profile-achievement/browse/by-filter")){
                BrowseGameProfileAchievementListByFilter();
            }
            else if(IsContext("game-profile-achievement/set/by-uuid")){
                SetGameProfileAchievementByUuid();
            }
            else if(IsContext("game-profile-achievement/set/by-uuid/by-code")){
                SetGameProfileAchievementByUuidByCode();
            }
            else if(IsContext("game-profile-achievement/set/by-profile-id/by-code")){
                SetGameProfileAchievementByProfileIdByCode();
            }
            else if(IsContext("game-profile-achievement/set/by-code/by-profile-id/by-game-id")){
                SetGameProfileAchievementByCodeByProfileIdByGameId();
            }
            else if(IsContext("game-profile-achievement/set/by-code/by-profile-id/by-game-id/by-timestamp")){
                SetGameProfileAchievementByCodeByProfileIdByGameIdByTimestamp();
            }
            else if(IsContext("game-profile-achievement/del/by-uuid")){
                DelGameProfileAchievementByUuid();
            }
            else if(IsContext("game-profile-achievement/del/by-profile-id/by-code")){
                DelGameProfileAchievementByProfileIdByCode();
            }
            else if(IsContext("game-profile-achievement/del/by-uuid/by-code")){
                DelGameProfileAchievementByUuidByCode();
            }
            else if(IsContext("game-profile-achievement/get/by-uuid")){
                GetGameProfileAchievementListByUuid();
            }
            else if(IsContext("game-profile-achievement/get/by-profile-id/by-code")){
                GetGameProfileAchievementListByProfileIdByCode();
            }
            else if(IsContext("game-profile-achievement/get/by-username")){
                GetGameProfileAchievementListByUsername();
            }
            else if(IsContext("game-profile-achievement/get/by-code")){
                GetGameProfileAchievementListByCode();
            }
            else if(IsContext("game-profile-achievement/get/by-game-id")){
                GetGameProfileAchievementListByGameId();
            }
            else if(IsContext("game-profile-achievement/get/by-code/by-game-id")){
                GetGameProfileAchievementListByCodeByGameId();
            }
            else if(IsContext("game-profile-achievement/get/by-profile-id/by-game-id")){
                GetGameProfileAchievementListByProfileIdByGameId();
            }
            else if(IsContext("game-profile-achievement/get/by-profile-id/by-game-id/by-timestamp")){
                GetGameProfileAchievementListByProfileIdByGameIdByTimestamp();
            }
            else if(IsContext("game-profile-achievement/get/by-code/by-profile-id/by-game-id")){
                GetGameProfileAchievementListByCodeByProfileIdByGameId();
            }
            else if(IsContext("game-profile-achievement/get/by-code/by-profile-id/by-game-id/by-timestamp")){
                GetGameProfileAchievementListByCodeByProfileIdByGameIdByTimestamp();
            }
            if(IsContext("game-achievement-meta/count")){
                CountGameAchievementMeta();
            }
            else if(IsContext("game-achievement-meta/count/by-uuid")){
                CountGameAchievementMetaByUuid();
            }
            else if(IsContext("game-achievement-meta/count/by-code")){
                CountGameAchievementMetaByCode();
            }
            else if(IsContext("game-achievement-meta/count/by-code/by-game-id")){
                CountGameAchievementMetaByCodeByGameId();
            }
            else if(IsContext("game-achievement-meta/count/by-name")){
                CountGameAchievementMetaByName();
            }
            else if(IsContext("game-achievement-meta/count/by-game-id")){
                CountGameAchievementMetaByGameId();
            }
            else if(IsContext("game-achievement-meta/browse/by-filter")){
                BrowseGameAchievementMetaListByFilter();
            }
            else if(IsContext("game-achievement-meta/set/by-uuid")){
                SetGameAchievementMetaByUuid();
            }
            else if(IsContext("game-achievement-meta/set/by-code/by-game-id")){
                SetGameAchievementMetaByCodeByGameId();
            }
            else if(IsContext("game-achievement-meta/del/by-uuid")){
                DelGameAchievementMetaByUuid();
            }
            else if(IsContext("game-achievement-meta/del/by-code/by-game-id")){
                DelGameAchievementMetaByCodeByGameId();
            }
            else if(IsContext("game-achievement-meta/get/by-uuid")){
                GetGameAchievementMetaListByUuid();
            }
            else if(IsContext("game-achievement-meta/get/by-code")){
                GetGameAchievementMetaListByCode();
            }
            else if(IsContext("game-achievement-meta/get/by-code/by-game-id")){
                GetGameAchievementMetaListByCodeByGameId();
            }
            else if(IsContext("game-achievement-meta/get/by-name")){
                GetGameAchievementMetaListByName();
            }
            else if(IsContext("game-achievement-meta/get/by-game-id")){
                GetGameAchievementMetaListByGameId();
            }
            if(IsContext("profile-reward/count")){
                CountProfileReward();
            }
            else if(IsContext("profile-reward/count/by-uuid")){
                CountProfileRewardByUuid();
            }
            else if(IsContext("profile-reward/count/by-profile-id")){
                CountProfileRewardByProfileId();
            }
            else if(IsContext("profile-reward/count/by-reward-id")){
                CountProfileRewardByRewardId();
            }
            else if(IsContext("profile-reward/count/by-profile-id/by-reward-id")){
                CountProfileRewardByProfileIdByRewardId();
            }
            else if(IsContext("profile-reward/count/by-profile-id/by-channel-id")){
                CountProfileRewardByProfileIdByChannelId();
            }
            else if(IsContext("profile-reward/count/by-profile-id/by-channel-id/by-reward-id")){
                CountProfileRewardByProfileIdByChannelIdByRewardId();
            }
            else if(IsContext("profile-reward/browse/by-filter")){
                BrowseProfileRewardListByFilter();
            }
            else if(IsContext("profile-reward/set/by-uuid")){
                SetProfileRewardByUuid();
            }
            else if(IsContext("profile-reward/set/by-profile-id/by-channel-id/by-reward-id")){
                SetProfileRewardByProfileIdByChannelIdByRewardId();
            }
            else if(IsContext("profile-reward/del/by-uuid")){
                DelProfileRewardByUuid();
            }
            else if(IsContext("profile-reward/del/by-profile-id/by-reward-id")){
                DelProfileRewardByProfileIdByRewardId();
            }
            else if(IsContext("profile-reward/get/by-uuid")){
                GetProfileRewardListByUuid();
            }
            else if(IsContext("profile-reward/get/by-profile-id")){
                GetProfileRewardListByProfileId();
            }
            else if(IsContext("profile-reward/get/by-reward-id")){
                GetProfileRewardListByRewardId();
            }
            else if(IsContext("profile-reward/get/by-profile-id/by-reward-id")){
                GetProfileRewardListByProfileIdByRewardId();
            }
            else if(IsContext("profile-reward/get/by-profile-id/by-channel-id")){
                GetProfileRewardListByProfileIdByChannelId();
            }
            else if(IsContext("profile-reward/get/by-profile-id/by-channel-id/by-reward-id")){
                GetProfileRewardListByProfileIdByChannelIdByRewardId();
            }
            if(IsContext("coupon/count")){
                CountCoupon();
            }
            else if(IsContext("coupon/count/by-uuid")){
                CountCouponByUuid();
            }
            else if(IsContext("coupon/count/by-code")){
                CountCouponByCode();
            }
            else if(IsContext("coupon/count/by-name")){
                CountCouponByName();
            }
            else if(IsContext("coupon/count/by-org-id")){
                CountCouponByOrgId();
            }
            else if(IsContext("coupon/browse/by-filter")){
                BrowseCouponListByFilter();
            }
            else if(IsContext("coupon/set/by-uuid")){
                SetCouponByUuid();
            }
            else if(IsContext("coupon/del/by-uuid")){
                DelCouponByUuid();
            }
            else if(IsContext("coupon/del/by-org-id")){
                DelCouponByOrgId();
            }
            else if(IsContext("coupon/get/by-uuid")){
                GetCouponListByUuid();
            }
            else if(IsContext("coupon/get/by-code")){
                GetCouponListByCode();
            }
            else if(IsContext("coupon/get/by-name")){
                GetCouponListByName();
            }
            else if(IsContext("coupon/get/by-org-id")){
                GetCouponListByOrgId();
            }
            if(IsContext("profile-coupon/count")){
                CountProfileCoupon();
            }
            else if(IsContext("profile-coupon/count/by-uuid")){
                CountProfileCouponByUuid();
            }
            else if(IsContext("profile-coupon/count/by-profile-id")){
                CountProfileCouponByProfileId();
            }
            else if(IsContext("profile-coupon/browse/by-filter")){
                BrowseProfileCouponListByFilter();
            }
            else if(IsContext("profile-coupon/set/by-uuid")){
                SetProfileCouponByUuid();
            }
            else if(IsContext("profile-coupon/del/by-uuid")){
                DelProfileCouponByUuid();
            }
            else if(IsContext("profile-coupon/del/by-profile-id")){
                DelProfileCouponByProfileId();
            }
            else if(IsContext("profile-coupon/get/by-uuid")){
                GetProfileCouponListByUuid();
            }
            else if(IsContext("profile-coupon/get/by-profile-id")){
                GetProfileCouponListByProfileId();
            }
            if(IsContext("org/count")){
                CountOrg();
            }
            else if(IsContext("org/count/by-uuid")){
                CountOrgByUuid();
            }
            else if(IsContext("org/count/by-code")){
                CountOrgByCode();
            }
            else if(IsContext("org/count/by-name")){
                CountOrgByName();
            }
            else if(IsContext("org/browse/by-filter")){
                BrowseOrgListByFilter();
            }
            else if(IsContext("org/set/by-uuid")){
                SetOrgByUuid();
            }
            else if(IsContext("org/del/by-uuid")){
                DelOrgByUuid();
            }
            else if(IsContext("org/get/by-uuid")){
                GetOrgListByUuid();
            }
            else if(IsContext("org/get/by-code")){
                GetOrgListByCode();
            }
            else if(IsContext("org/get/by-name")){
                GetOrgListByName();
            }
            if(IsContext("channel/count")){
                CountChannel();
            }
            else if(IsContext("channel/count/by-uuid")){
                CountChannelByUuid();
            }
            else if(IsContext("channel/count/by-code")){
                CountChannelByCode();
            }
            else if(IsContext("channel/count/by-name")){
                CountChannelByName();
            }
            else if(IsContext("channel/count/by-org-id")){
                CountChannelByOrgId();
            }
            else if(IsContext("channel/count/by-type-id")){
                CountChannelByTypeId();
            }
            else if(IsContext("channel/count/by-org-id/by-type-id")){
                CountChannelByOrgIdByTypeId();
            }
            else if(IsContext("channel/browse/by-filter")){
                BrowseChannelListByFilter();
            }
            else if(IsContext("channel/set/by-uuid")){
                SetChannelByUuid();
            }
            else if(IsContext("channel/del/by-uuid")){
                DelChannelByUuid();
            }
            else if(IsContext("channel/del/by-code/by-org-id")){
                DelChannelByCodeByOrgId();
            }
            else if(IsContext("channel/del/by-code/by-org-id/by-type-id")){
                DelChannelByCodeByOrgIdByTypeId();
            }
            else if(IsContext("channel/get/by-uuid")){
                GetChannelListByUuid();
            }
            else if(IsContext("channel/get/by-code")){
                GetChannelListByCode();
            }
            else if(IsContext("channel/get/by-name")){
                GetChannelListByName();
            }
            else if(IsContext("channel/get/by-org-id")){
                GetChannelListByOrgId();
            }
            else if(IsContext("channel/get/by-type-id")){
                GetChannelListByTypeId();
            }
            else if(IsContext("channel/get/by-org-id/by-type-id")){
                GetChannelListByOrgIdByTypeId();
            }
            if(IsContext("channel-type/count")){
                CountChannelType();
            }
            else if(IsContext("channel-type/count/by-uuid")){
                CountChannelTypeByUuid();
            }
            else if(IsContext("channel-type/count/by-code")){
                CountChannelTypeByCode();
            }
            else if(IsContext("channel-type/count/by-name")){
                CountChannelTypeByName();
            }
            else if(IsContext("channel-type/browse/by-filter")){
                BrowseChannelTypeListByFilter();
            }
            else if(IsContext("channel-type/set/by-uuid")){
                SetChannelTypeByUuid();
            }
            else if(IsContext("channel-type/del/by-uuid")){
                DelChannelTypeByUuid();
            }
            else if(IsContext("channel-type/get/by-uuid")){
                GetChannelTypeListByUuid();
            }
            else if(IsContext("channel-type/get/by-code")){
                GetChannelTypeListByCode();
            }
            else if(IsContext("channel-type/get/by-name")){
                GetChannelTypeListByName();
            }
            if(IsContext("reward/count")){
                CountReward();
            }
            else if(IsContext("reward/count/by-uuid")){
                CountRewardByUuid();
            }
            else if(IsContext("reward/count/by-code")){
                CountRewardByCode();
            }
            else if(IsContext("reward/count/by-name")){
                CountRewardByName();
            }
            else if(IsContext("reward/count/by-org-id")){
                CountRewardByOrgId();
            }
            else if(IsContext("reward/count/by-channel-id")){
                CountRewardByChannelId();
            }
            else if(IsContext("reward/count/by-org-id/by-channel-id")){
                CountRewardByOrgIdByChannelId();
            }
            else if(IsContext("reward/browse/by-filter")){
                BrowseRewardListByFilter();
            }
            else if(IsContext("reward/set/by-uuid")){
                SetRewardByUuid();
            }
            else if(IsContext("reward/del/by-uuid")){
                DelRewardByUuid();
            }
            else if(IsContext("reward/del/by-org-id/by-channel-id")){
                DelRewardByOrgIdByChannelId();
            }
            else if(IsContext("reward/get/by-uuid")){
                GetRewardListByUuid();
            }
            else if(IsContext("reward/get/by-code")){
                GetRewardListByCode();
            }
            else if(IsContext("reward/get/by-name")){
                GetRewardListByName();
            }
            else if(IsContext("reward/get/by-org-id")){
                GetRewardListByOrgId();
            }
            else if(IsContext("reward/get/by-channel-id")){
                GetRewardListByChannelId();
            }
            else if(IsContext("reward/get/by-org-id/by-channel-id")){
                GetRewardListByOrgIdByChannelId();
            }
            if(IsContext("reward-type/count")){
                CountRewardType();
            }
            else if(IsContext("reward-type/count/by-uuid")){
                CountRewardTypeByUuid();
            }
            else if(IsContext("reward-type/count/by-code")){
                CountRewardTypeByCode();
            }
            else if(IsContext("reward-type/count/by-name")){
                CountRewardTypeByName();
            }
            else if(IsContext("reward-type/count/by-type")){
                CountRewardTypeByType();
            }
            else if(IsContext("reward-type/browse/by-filter")){
                BrowseRewardTypeListByFilter();
            }
            else if(IsContext("reward-type/set/by-uuid")){
                SetRewardTypeByUuid();
            }
            else if(IsContext("reward-type/del/by-uuid")){
                DelRewardTypeByUuid();
            }
            else if(IsContext("reward-type/get/by-uuid")){
                GetRewardTypeListByUuid();
            }
            else if(IsContext("reward-type/get/by-code")){
                GetRewardTypeListByCode();
            }
            else if(IsContext("reward-type/get/by-name")){
                GetRewardTypeListByName();
            }
            else if(IsContext("reward-type/get/by-type")){
                GetRewardTypeListByType();
            }
            if(IsContext("reward-condition/count")){
                CountRewardCondition();
            }
            else if(IsContext("reward-condition/count/by-uuid")){
                CountRewardConditionByUuid();
            }
            else if(IsContext("reward-condition/count/by-code")){
                CountRewardConditionByCode();
            }
            else if(IsContext("reward-condition/count/by-name")){
                CountRewardConditionByName();
            }
            else if(IsContext("reward-condition/count/by-org-id")){
                CountRewardConditionByOrgId();
            }
            else if(IsContext("reward-condition/count/by-channel-id")){
                CountRewardConditionByChannelId();
            }
            else if(IsContext("reward-condition/count/by-org-id/by-channel-id")){
                CountRewardConditionByOrgIdByChannelId();
            }
            else if(IsContext("reward-condition/count/by-org-id/by-channel-id/by-reward-id")){
                CountRewardConditionByOrgIdByChannelIdByRewardId();
            }
            else if(IsContext("reward-condition/count/by-reward-id")){
                CountRewardConditionByRewardId();
            }
            else if(IsContext("reward-condition/browse/by-filter")){
                BrowseRewardConditionListByFilter();
            }
            else if(IsContext("reward-condition/set/by-uuid")){
                SetRewardConditionByUuid();
            }
            else if(IsContext("reward-condition/del/by-uuid")){
                DelRewardConditionByUuid();
            }
            else if(IsContext("reward-condition/del/by-org-id/by-channel-id/by-reward-id")){
                DelRewardConditionByOrgIdByChannelIdByRewardId();
            }
            else if(IsContext("reward-condition/get/by-uuid")){
                GetRewardConditionListByUuid();
            }
            else if(IsContext("reward-condition/get/by-code")){
                GetRewardConditionListByCode();
            }
            else if(IsContext("reward-condition/get/by-name")){
                GetRewardConditionListByName();
            }
            else if(IsContext("reward-condition/get/by-org-id")){
                GetRewardConditionListByOrgId();
            }
            else if(IsContext("reward-condition/get/by-channel-id")){
                GetRewardConditionListByChannelId();
            }
            else if(IsContext("reward-condition/get/by-org-id/by-channel-id")){
                GetRewardConditionListByOrgIdByChannelId();
            }
            else if(IsContext("reward-condition/get/by-org-id/by-channel-id/by-reward-id")){
                GetRewardConditionListByOrgIdByChannelIdByRewardId();
            }
            else if(IsContext("reward-condition/get/by-reward-id")){
                GetRewardConditionListByRewardId();
            }
            if(IsContext("reward-condition-type/count")){
                CountRewardConditionType();
            }
            else if(IsContext("reward-condition-type/count/by-uuid")){
                CountRewardConditionTypeByUuid();
            }
            else if(IsContext("reward-condition-type/count/by-code")){
                CountRewardConditionTypeByCode();
            }
            else if(IsContext("reward-condition-type/count/by-name")){
                CountRewardConditionTypeByName();
            }
            else if(IsContext("reward-condition-type/count/by-type")){
                CountRewardConditionTypeByType();
            }
            else if(IsContext("reward-condition-type/browse/by-filter")){
                BrowseRewardConditionTypeListByFilter();
            }
            else if(IsContext("reward-condition-type/set/by-uuid")){
                SetRewardConditionTypeByUuid();
            }
            else if(IsContext("reward-condition-type/del/by-uuid")){
                DelRewardConditionTypeByUuid();
            }
            else if(IsContext("reward-condition-type/get/by-uuid")){
                GetRewardConditionTypeListByUuid();
            }
            else if(IsContext("reward-condition-type/get/by-code")){
                GetRewardConditionTypeListByCode();
            }
            else if(IsContext("reward-condition-type/get/by-name")){
                GetRewardConditionTypeListByName();
            }
            else if(IsContext("reward-condition-type/get/by-type")){
                GetRewardConditionTypeListByType();
            }
            if(IsContext("question/count")){
                CountQuestion();
            }
            else if(IsContext("question/count/by-uuid")){
                CountQuestionByUuid();
            }
            else if(IsContext("question/count/by-code")){
                CountQuestionByCode();
            }
            else if(IsContext("question/count/by-name")){
                CountQuestionByName();
            }
            else if(IsContext("question/count/by-channel-id")){
                CountQuestionByChannelId();
            }
            else if(IsContext("question/count/by-org-id")){
                CountQuestionByOrgId();
            }
            else if(IsContext("question/count/by-channel-id/by-org-id")){
                CountQuestionByChannelIdByOrgId();
            }
            else if(IsContext("question/count/by-channel-id/by-code")){
                CountQuestionByChannelIdByCode();
            }
            else if(IsContext("question/browse/by-filter")){
                BrowseQuestionListByFilter();
            }
            else if(IsContext("question/set/by-uuid")){
                SetQuestionByUuid();
            }
            else if(IsContext("question/set/by-channel-id/by-code")){
                SetQuestionByChannelIdByCode();
            }
            else if(IsContext("question/del/by-uuid")){
                DelQuestionByUuid();
            }
            else if(IsContext("question/del/by-channel-id/by-org-id")){
                DelQuestionByChannelIdByOrgId();
            }
            else if(IsContext("question/get/by-uuid")){
                GetQuestionListByUuid();
            }
            else if(IsContext("question/get/by-code")){
                GetQuestionListByCode();
            }
            else if(IsContext("question/get/by-name")){
                GetQuestionListByName();
            }
            else if(IsContext("question/get/by-type")){
                GetQuestionListByType();
            }
            else if(IsContext("question/get/by-channel-id")){
                GetQuestionListByChannelId();
            }
            else if(IsContext("question/get/by-org-id")){
                GetQuestionListByOrgId();
            }
            else if(IsContext("question/get/by-channel-id/by-org-id")){
                GetQuestionListByChannelIdByOrgId();
            }
            else if(IsContext("question/get/by-channel-id/by-code")){
                GetQuestionListByChannelIdByCode();
            }
            if(IsContext("profile-question/count")){
                CountProfileQuestion();
            }
            else if(IsContext("profile-question/count/by-uuid")){
                CountProfileQuestionByUuid();
            }
            else if(IsContext("profile-question/count/by-channel-id")){
                CountProfileQuestionByChannelId();
            }
            else if(IsContext("profile-question/count/by-org-id")){
                CountProfileQuestionByOrgId();
            }
            else if(IsContext("profile-question/count/by-profile-id")){
                CountProfileQuestionByProfileId();
            }
            else if(IsContext("profile-question/count/by-question-id")){
                CountProfileQuestionByQuestionId();
            }
            else if(IsContext("profile-question/count/by-channel-id/by-org-id")){
                CountProfileQuestionByChannelIdByOrgId();
            }
            else if(IsContext("profile-question/count/by-channel-id/by-profile-id")){
                CountProfileQuestionByChannelIdByProfileId();
            }
            else if(IsContext("profile-question/count/by-question-id/by-profile-id")){
                CountProfileQuestionByQuestionIdByProfileId();
            }
            else if(IsContext("profile-question/browse/by-filter")){
                BrowseProfileQuestionListByFilter();
            }
            else if(IsContext("profile-question/set/by-uuid")){
                SetProfileQuestionByUuid();
            }
            else if(IsContext("profile-question/set/by-channel-id/by-profile-id")){
                SetProfileQuestionByChannelIdByProfileId();
            }
            else if(IsContext("profile-question/set/by-question-id/by-profile-id")){
                SetProfileQuestionByQuestionIdByProfileId();
            }
            else if(IsContext("profile-question/set/by-channel-id/by-question-id/by-profile-id")){
                SetProfileQuestionByChannelIdByQuestionIdByProfileId();
            }
            else if(IsContext("profile-question/del/by-uuid")){
                DelProfileQuestionByUuid();
            }
            else if(IsContext("profile-question/del/by-channel-id/by-org-id")){
                DelProfileQuestionByChannelIdByOrgId();
            }
            else if(IsContext("profile-question/get/by-uuid")){
                GetProfileQuestionListByUuid();
            }
            else if(IsContext("profile-question/get/by-channel-id")){
                GetProfileQuestionListByChannelId();
            }
            else if(IsContext("profile-question/get/by-org-id")){
                GetProfileQuestionListByOrgId();
            }
            else if(IsContext("profile-question/get/by-profile-id")){
                GetProfileQuestionListByProfileId();
            }
            else if(IsContext("profile-question/get/by-question-id")){
                GetProfileQuestionListByQuestionId();
            }
            else if(IsContext("profile-question/get/by-channel-id/by-org-id")){
                GetProfileQuestionListByChannelIdByOrgId();
            }
            else if(IsContext("profile-question/get/by-channel-id/by-profile-id")){
                GetProfileQuestionListByChannelIdByProfileId();
            }
            else if(IsContext("profile-question/get/by-question-id/by-profile-id")){
                GetProfileQuestionListByQuestionIdByProfileId();
            }
            if(IsContext("profile-channel/count")){
                CountProfileChannel();
            }
            else if(IsContext("profile-channel/count/by-uuid")){
                CountProfileChannelByUuid();
            }
            else if(IsContext("profile-channel/count/by-channel-id")){
                CountProfileChannelByChannelId();
            }
            else if(IsContext("profile-channel/count/by-profile-id")){
                CountProfileChannelByProfileId();
            }
            else if(IsContext("profile-channel/count/by-channel-id/by-profile-id")){
                CountProfileChannelByChannelIdByProfileId();
            }
            else if(IsContext("profile-channel/browse/by-filter")){
                BrowseProfileChannelListByFilter();
            }
            else if(IsContext("profile-channel/set/by-uuid")){
                SetProfileChannelByUuid();
            }
            else if(IsContext("profile-channel/set/by-channel-id/by-profile-id")){
                SetProfileChannelByChannelIdByProfileId();
            }
            else if(IsContext("profile-channel/del/by-uuid")){
                DelProfileChannelByUuid();
            }
            else if(IsContext("profile-channel/del/by-channel-id/by-profile-id")){
                DelProfileChannelByChannelIdByProfileId();
            }
            else if(IsContext("profile-channel/get/by-uuid")){
                GetProfileChannelListByUuid();
            }
            else if(IsContext("profile-channel/get/by-channel-id")){
                GetProfileChannelListByChannelId();
            }
            else if(IsContext("profile-channel/get/by-profile-id")){
                GetProfileChannelListByProfileId();
            }
            else if(IsContext("profile-channel/get/by-channel-id/by-profile-id")){
                GetProfileChannelListByChannelIdByProfileId();
            }
            if(IsContext("profile-reward-points/count")){
                CountProfileRewardPoints();
            }
            else if(IsContext("profile-reward-points/count/by-uuid")){
                CountProfileRewardPointsByUuid();
            }
            else if(IsContext("profile-reward-points/count/by-channel-id")){
                CountProfileRewardPointsByChannelId();
            }
            else if(IsContext("profile-reward-points/count/by-org-id")){
                CountProfileRewardPointsByOrgId();
            }
            else if(IsContext("profile-reward-points/count/by-profile-id")){
                CountProfileRewardPointsByProfileId();
            }
            else if(IsContext("profile-reward-points/count/by-channel-id/by-org-id")){
                CountProfileRewardPointsByChannelIdByOrgId();
            }
            else if(IsContext("profile-reward-points/count/by-channel-id/by-profile-id")){
                CountProfileRewardPointsByChannelIdByProfileId();
            }
            else if(IsContext("profile-reward-points/browse/by-filter")){
                BrowseProfileRewardPointsListByFilter();
            }
            else if(IsContext("profile-reward-points/set/by-uuid")){
                SetProfileRewardPointsByUuid();
            }
            else if(IsContext("profile-reward-points/del/by-uuid")){
                DelProfileRewardPointsByUuid();
            }
            else if(IsContext("profile-reward-points/del/by-channel-id/by-org-id")){
                DelProfileRewardPointsByChannelIdByOrgId();
            }
            else if(IsContext("profile-reward-points/get/by-uuid")){
                GetProfileRewardPointsListByUuid();
            }
            else if(IsContext("profile-reward-points/get/by-channel-id")){
                GetProfileRewardPointsListByChannelId();
            }
            else if(IsContext("profile-reward-points/get/by-org-id")){
                GetProfileRewardPointsListByOrgId();
            }
            else if(IsContext("profile-reward-points/get/by-profile-id")){
                GetProfileRewardPointsListByProfileId();
            }
            else if(IsContext("profile-reward-points/get/by-channel-id/by-org-id")){
                GetProfileRewardPointsListByChannelIdByOrgId();
            }
            else if(IsContext("profile-reward-points/get/by-channel-id/by-profile-id")){
                GetProfileRewardPointsListByChannelIdByProfileId();
            }
            if(IsContext("reward-competition/count/by-uuid")){
                CountRewardCompetitionByUuid();
            }
            else if(IsContext("reward-competition/count/by-code")){
                CountRewardCompetitionByCode();
            }
            else if(IsContext("reward-competition/count/by-name")){
                CountRewardCompetitionByName();
            }
            else if(IsContext("reward-competition/count/by-path")){
                CountRewardCompetitionByPath();
            }
            else if(IsContext("reward-competition/count/by-channel-id")){
                CountRewardCompetitionByChannelId();
            }
            else if(IsContext("reward-competition/count/by-channel-id/by-completed")){
                CountRewardCompetitionByChannelIdByCompleted();
            }
            else if(IsContext("reward-competition/browse/by-filter")){
                BrowseRewardCompetitionListByFilter();
            }
            else if(IsContext("reward-competition/set/by-uuid")){
                SetRewardCompetitionByUuid();
            }
            else if(IsContext("reward-competition/del/by-uuid")){
                DelRewardCompetitionByUuid();
            }
            else if(IsContext("reward-competition/del/by-code")){
                DelRewardCompetitionByCode();
            }
            else if(IsContext("reward-competition/del/by-path/by-channel-id")){
                DelRewardCompetitionByPathByChannelId();
            }
            else if(IsContext("reward-competition/del/by-path")){
                DelRewardCompetitionByPath();
            }
            else if(IsContext("reward-competition/del/by-channel-id/by-path")){
                DelRewardCompetitionByChannelIdByPath();
            }
            else if(IsContext("reward-competition/get/by-uuid")){
                GetRewardCompetitionListByUuid();
            }
            else if(IsContext("reward-competition/get/by-code")){
                GetRewardCompetitionListByCode();
            }
            else if(IsContext("reward-competition/get/by-name")){
                GetRewardCompetitionListByName();
            }
            else if(IsContext("reward-competition/get/by-path")){
                GetRewardCompetitionListByPath();
            }
            else if(IsContext("reward-competition/get/by-channel-id")){
                GetRewardCompetitionListByChannelId();
            }
            else if(IsContext("reward-competition/get/by-channel-id/by-completed")){
                GetRewardCompetitionListByChannelIdByCompleted();
            }
            else if(IsContext("reward-competition/get/by-channel-id/by-path")){
                GetRewardCompetitionListByChannelIdByPath();
            }
        }    
        
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGame() {
        

            ResponseGameInt wrapper = new ResponseGameInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/count";

            int i = api.CountGame(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameInt wrapper = new ResponseGameInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/count/by-uuid";

            int i = api.CountGameByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameInt wrapper = new ResponseGameInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/count/by-code";

            int i = api.CountGameByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseGameInt wrapper = new ResponseGameInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/count/by-name";

            int i = api.CountGameByName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameByOrgId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseGameInt wrapper = new ResponseGameInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/count/by-org-id";

            int i = api.CountGameByOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameByAppId() {
        
            string _app_id = (string)util.GetParamValue(_context, "app_id");

            ResponseGameInt wrapper = new ResponseGameInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/count/by-app-id";

            int i = api.CountGameByAppId(
                _app_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameByOrgIdByAppId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");
            string _app_id = (string)util.GetParamValue(_context, "app_id");

            ResponseGameInt wrapper = new ResponseGameInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/count/by-org-id/by-app-id";

            int i = api.CountGameByOrgIdByAppId(
                _org_id
                , _app_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameListByFilter()  {
        
            ResponseGameList wrapper = new ResponseGameList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameResult result = api.BrowseGameListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameByUuid()  {
        
            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/set/by-uuid";
                        
            Game obj = new Game();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _org_id = util.GetParamValue(_context, "org_id");
            if(!String.IsNullOrEmpty(_org_id))
                obj.org_id = (string)_org_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _app_id = util.GetParamValue(_context, "app_id");
            if(!String.IsNullOrEmpty(_app_id))
                obj.app_id = (string)_app_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameByCode()  {
        
            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/set/by-code";
                        
            Game obj = new Game();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _org_id = util.GetParamValue(_context, "org_id");
            if(!String.IsNullOrEmpty(_org_id))
                obj.org_id = (string)_org_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _app_id = util.GetParamValue(_context, "app_id");
            if(!String.IsNullOrEmpty(_app_id))
                obj.app_id = (string)_app_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameByCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameByName()  {
        
            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/set/by-name";
                        
            Game obj = new Game();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _org_id = util.GetParamValue(_context, "org_id");
            if(!String.IsNullOrEmpty(_org_id))
                obj.org_id = (string)_org_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _app_id = util.GetParamValue(_context, "app_id");
            if(!String.IsNullOrEmpty(_app_id))
                obj.app_id = (string)_app_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameByName(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameByOrgId()  {
        
            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/set/by-org-id";
                        
            Game obj = new Game();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _org_id = util.GetParamValue(_context, "org_id");
            if(!String.IsNullOrEmpty(_org_id))
                obj.org_id = (string)_org_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _app_id = util.GetParamValue(_context, "app_id");
            if(!String.IsNullOrEmpty(_app_id))
                obj.app_id = (string)_app_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameByOrgId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameByAppId()  {
        
            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/set/by-app-id";
                        
            Game obj = new Game();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _org_id = util.GetParamValue(_context, "org_id");
            if(!String.IsNullOrEmpty(_org_id))
                obj.org_id = (string)_org_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _app_id = util.GetParamValue(_context, "app_id");
            if(!String.IsNullOrEmpty(_app_id))
                obj.app_id = (string)_app_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameByAppId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameByOrgIdByAppId()  {
        
            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/set/by-org-id/by-app-id";
                        
            Game obj = new Game();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _org_id = util.GetParamValue(_context, "org_id");
            if(!String.IsNullOrEmpty(_org_id))
                obj.org_id = (string)_org_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _app_id = util.GetParamValue(_context, "app_id");
            if(!String.IsNullOrEmpty(_app_id))
                obj.app_id = (string)_app_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameByOrgIdByAppId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/del/by-uuid";

            bool completed = api.DelGameByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/del/by-code";

            bool completed = api.DelGameByCode(
                        
                _code
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/del/by-name";

            bool completed = api.DelGameByName(
                        
                _name
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameByOrgId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/del/by-org-id";

            bool completed = api.DelGameByOrgId(
                        
                _org_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameByAppId() {
        
            string _app_id = (string)util.GetParamValue(_context, "app_id");

            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/del/by-app-id";

            bool completed = api.DelGameByAppId(
                        
                _app_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameByOrgIdByAppId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");
            string _app_id = (string)util.GetParamValue(_context, "app_id");

            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/del/by-org-id/by-app-id";

            bool completed = api.DelGameByOrgIdByAppId(
                        
                _org_id
                , _app_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameList() {
        

            ResponseGameList wrapper = new ResponseGameList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/get";

            List<Game> objs = api.GetGameList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameList wrapper = new ResponseGameList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/get/by-uuid";

            List<Game> objs = api.GetGameListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameList wrapper = new ResponseGameList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/get/by-code";

            List<Game> objs = api.GetGameListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameListByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseGameList wrapper = new ResponseGameList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/get/by-name";

            List<Game> objs = api.GetGameListByName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameListByOrgId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseGameList wrapper = new ResponseGameList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/get/by-org-id";

            List<Game> objs = api.GetGameListByOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameListByAppId() {
        
            string _app_id = (string)util.GetParamValue(_context, "app_id");

            ResponseGameList wrapper = new ResponseGameList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/get/by-app-id";

            List<Game> objs = api.GetGameListByAppId(
                _app_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameListByOrgIdByAppId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");
            string _app_id = (string)util.GetParamValue(_context, "app_id");

            ResponseGameList wrapper = new ResponseGameList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game/get/by-org-id/by-app-id";

            List<Game> objs = api.GetGameListByOrgIdByAppId(
                _org_id
                , _app_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAttribute() {
        

            ResponseGameAttributeInt wrapper = new ResponseGameAttributeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/count";

            int i = api.CountGameAttribute(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAttributeByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameAttributeInt wrapper = new ResponseGameAttributeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/count/by-uuid";

            int i = api.CountGameAttributeByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAttributeByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameAttributeInt wrapper = new ResponseGameAttributeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/count/by-code";

            int i = api.CountGameAttributeByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAttributeByType() {
        
            int _type = int.Parse(util.GetParamValue(_context, "type"));

            ResponseGameAttributeInt wrapper = new ResponseGameAttributeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/count/by-type";

            int i = api.CountGameAttributeByType(
                _type
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAttributeByGroup() {
        
            int _group = int.Parse(util.GetParamValue(_context, "group"));

            ResponseGameAttributeInt wrapper = new ResponseGameAttributeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/count/by-group";

            int i = api.CountGameAttributeByGroup(
                _group
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAttributeByCodeByType() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            int _type = int.Parse(util.GetParamValue(_context, "type"));

            ResponseGameAttributeInt wrapper = new ResponseGameAttributeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/count/by-code/by-type";

            int i = api.CountGameAttributeByCodeByType(
                _code
                , _type
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAttributeByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameAttributeInt wrapper = new ResponseGameAttributeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/count/by-game-id";

            int i = api.CountGameAttributeByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAttributeByGameIdByCode() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameAttributeInt wrapper = new ResponseGameAttributeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/count/by-game-id/by-code";

            int i = api.CountGameAttributeByGameIdByCode(
                _game_id
                , _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameAttributeListByFilter()  {
        
            ResponseGameAttributeList wrapper = new ResponseGameAttributeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameAttributeResult result = api.BrowseGameAttributeListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameAttributeByUuid()  {
        
            ResponseGameAttributeBool wrapper = new ResponseGameAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/set/by-uuid";
                        
            GameAttribute obj = new GameAttribute();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameAttributeByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameAttributeByCode()  {
        
            ResponseGameAttributeBool wrapper = new ResponseGameAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/set/by-code";
                        
            GameAttribute obj = new GameAttribute();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameAttributeByCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameAttributeByGameId()  {
        
            ResponseGameAttributeBool wrapper = new ResponseGameAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/set/by-game-id";
                        
            GameAttribute obj = new GameAttribute();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameAttributeByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameAttributeByGameIdByCode()  {
        
            ResponseGameAttributeBool wrapper = new ResponseGameAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/set/by-game-id/by-code";
                        
            GameAttribute obj = new GameAttribute();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameAttributeByGameIdByCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameAttributeByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameAttributeBool wrapper = new ResponseGameAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/del/by-uuid";

            bool completed = api.DelGameAttributeByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameAttributeByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameAttributeBool wrapper = new ResponseGameAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/del/by-code";

            bool completed = api.DelGameAttributeByCode(
                        
                _code
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameAttributeByCodeByType() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            int _type = int.Parse(util.GetParamValue(_context, "type"));

            ResponseGameAttributeBool wrapper = new ResponseGameAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/del/by-code/by-type";

            bool completed = api.DelGameAttributeByCodeByType(
                        
                _code
                , _type
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameAttributeByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameAttributeBool wrapper = new ResponseGameAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/del/by-game-id";

            bool completed = api.DelGameAttributeByGameId(
                        
                _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameAttributeByGameIdByCode() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameAttributeBool wrapper = new ResponseGameAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/del/by-game-id/by-code";

            bool completed = api.DelGameAttributeByGameIdByCode(
                        
                _game_id
                , _code
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAttributeList() {
        

            ResponseGameAttributeList wrapper = new ResponseGameAttributeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/get";

            List<GameAttribute> objs = api.GetGameAttributeList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAttributeListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameAttributeList wrapper = new ResponseGameAttributeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/get/by-uuid";

            List<GameAttribute> objs = api.GetGameAttributeListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAttributeListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameAttributeList wrapper = new ResponseGameAttributeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/get/by-code";

            List<GameAttribute> objs = api.GetGameAttributeListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAttributeListByType() {
        
            int _type = int.Parse(util.GetParamValue(_context, "type"));

            ResponseGameAttributeList wrapper = new ResponseGameAttributeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/get/by-type";

            List<GameAttribute> objs = api.GetGameAttributeListByType(
                _type
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAttributeListByGroup() {
        
            int _group = int.Parse(util.GetParamValue(_context, "group"));

            ResponseGameAttributeList wrapper = new ResponseGameAttributeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/get/by-group";

            List<GameAttribute> objs = api.GetGameAttributeListByGroup(
                _group
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAttributeListByCodeByType() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            int _type = int.Parse(util.GetParamValue(_context, "type"));

            ResponseGameAttributeList wrapper = new ResponseGameAttributeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/get/by-code/by-type";

            List<GameAttribute> objs = api.GetGameAttributeListByCodeByType(
                _code
                , _type
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAttributeListByGameIdByCode() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameAttributeList wrapper = new ResponseGameAttributeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute/get/by-game-id/by-code";

            List<GameAttribute> objs = api.GetGameAttributeListByGameIdByCode(
                _game_id
                , _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAttributeText() {
        

            ResponseGameAttributeTextInt wrapper = new ResponseGameAttributeTextInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-text/count";

            int i = api.CountGameAttributeText(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAttributeTextByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameAttributeTextInt wrapper = new ResponseGameAttributeTextInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-text/count/by-uuid";

            int i = api.CountGameAttributeTextByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAttributeTextByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameAttributeTextInt wrapper = new ResponseGameAttributeTextInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-text/count/by-game-id";

            int i = api.CountGameAttributeTextByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAttributeTextByAttributeId() {
        
            string _attribute_id = (string)util.GetParamValue(_context, "attribute_id");

            ResponseGameAttributeTextInt wrapper = new ResponseGameAttributeTextInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-text/count/by-attribute-id";

            int i = api.CountGameAttributeTextByAttributeId(
                _attribute_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAttributeTextByGameIdByAttributeId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _attribute_id = (string)util.GetParamValue(_context, "attribute_id");

            ResponseGameAttributeTextInt wrapper = new ResponseGameAttributeTextInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-text/count/by-game-id/by-attribute-id";

            int i = api.CountGameAttributeTextByGameIdByAttributeId(
                _game_id
                , _attribute_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameAttributeTextListByFilter()  {
        
            ResponseGameAttributeTextList wrapper = new ResponseGameAttributeTextList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-text/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameAttributeTextResult result = api.BrowseGameAttributeTextListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameAttributeTextByUuid()  {
        
            ResponseGameAttributeTextBool wrapper = new ResponseGameAttributeTextBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-text/set/by-uuid";
                        
            GameAttributeText obj = new GameAttributeText();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _attribute_value = util.GetParamValue(_context, "attribute_value");
            if(!String.IsNullOrEmpty(_attribute_value))
                obj.attribute_value = (string)_attribute_value;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _attribute_id = util.GetParamValue(_context, "attribute_id");
            if(!String.IsNullOrEmpty(_attribute_id))
                obj.attribute_id = (string)_attribute_id;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            
            // get data
            wrapper.data = api.SetGameAttributeTextByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameAttributeTextByGameId()  {
        
            ResponseGameAttributeTextBool wrapper = new ResponseGameAttributeTextBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-text/set/by-game-id";
                        
            GameAttributeText obj = new GameAttributeText();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _attribute_value = util.GetParamValue(_context, "attribute_value");
            if(!String.IsNullOrEmpty(_attribute_value))
                obj.attribute_value = (string)_attribute_value;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _attribute_id = util.GetParamValue(_context, "attribute_id");
            if(!String.IsNullOrEmpty(_attribute_id))
                obj.attribute_id = (string)_attribute_id;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            
            // get data
            wrapper.data = api.SetGameAttributeTextByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameAttributeTextByAttributeId()  {
        
            ResponseGameAttributeTextBool wrapper = new ResponseGameAttributeTextBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-text/set/by-attribute-id";
                        
            GameAttributeText obj = new GameAttributeText();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _attribute_value = util.GetParamValue(_context, "attribute_value");
            if(!String.IsNullOrEmpty(_attribute_value))
                obj.attribute_value = (string)_attribute_value;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _attribute_id = util.GetParamValue(_context, "attribute_id");
            if(!String.IsNullOrEmpty(_attribute_id))
                obj.attribute_id = (string)_attribute_id;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            
            // get data
            wrapper.data = api.SetGameAttributeTextByAttributeId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameAttributeTextByGameIdByAttributeId()  {
        
            ResponseGameAttributeTextBool wrapper = new ResponseGameAttributeTextBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-text/set/by-game-id/by-attribute-id";
                        
            GameAttributeText obj = new GameAttributeText();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _attribute_value = util.GetParamValue(_context, "attribute_value");
            if(!String.IsNullOrEmpty(_attribute_value))
                obj.attribute_value = (string)_attribute_value;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _attribute_id = util.GetParamValue(_context, "attribute_id");
            if(!String.IsNullOrEmpty(_attribute_id))
                obj.attribute_id = (string)_attribute_id;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            
            // get data
            wrapper.data = api.SetGameAttributeTextByGameIdByAttributeId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameAttributeText() {
        

            ResponseGameAttributeTextBool wrapper = new ResponseGameAttributeTextBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-text/del";

            bool completed = api.DelGameAttributeText(
                        
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameAttributeTextByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameAttributeTextBool wrapper = new ResponseGameAttributeTextBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-text/del/by-uuid";

            bool completed = api.DelGameAttributeTextByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameAttributeTextByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameAttributeTextBool wrapper = new ResponseGameAttributeTextBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-text/del/by-game-id";

            bool completed = api.DelGameAttributeTextByGameId(
                        
                _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameAttributeTextByAttributeId() {
        
            string _attribute_id = (string)util.GetParamValue(_context, "attribute_id");

            ResponseGameAttributeTextBool wrapper = new ResponseGameAttributeTextBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-text/del/by-attribute-id";

            bool completed = api.DelGameAttributeTextByAttributeId(
                        
                _attribute_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameAttributeTextByGameIdByAttributeId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _attribute_id = (string)util.GetParamValue(_context, "attribute_id");

            ResponseGameAttributeTextBool wrapper = new ResponseGameAttributeTextBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-text/del/by-game-id/by-attribute-id";

            bool completed = api.DelGameAttributeTextByGameIdByAttributeId(
                        
                _game_id
                , _attribute_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAttributeTextList() {
        

            ResponseGameAttributeTextList wrapper = new ResponseGameAttributeTextList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-text/get";

            List<GameAttributeText> objs = api.GetGameAttributeTextList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAttributeTextListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameAttributeTextList wrapper = new ResponseGameAttributeTextList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-text/get/by-uuid";

            List<GameAttributeText> objs = api.GetGameAttributeTextListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAttributeTextListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameAttributeTextList wrapper = new ResponseGameAttributeTextList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-text/get/by-game-id";

            List<GameAttributeText> objs = api.GetGameAttributeTextListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAttributeTextListByAttributeId() {
        
            string _attribute_id = (string)util.GetParamValue(_context, "attribute_id");

            ResponseGameAttributeTextList wrapper = new ResponseGameAttributeTextList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-text/get/by-attribute-id";

            List<GameAttributeText> objs = api.GetGameAttributeTextListByAttributeId(
                _attribute_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAttributeTextListByGameIdByAttributeId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _attribute_id = (string)util.GetParamValue(_context, "attribute_id");

            ResponseGameAttributeTextList wrapper = new ResponseGameAttributeTextList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-text/get/by-game-id/by-attribute-id";

            List<GameAttributeText> objs = api.GetGameAttributeTextListByGameIdByAttributeId(
                _game_id
                , _attribute_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAttributeData() {
        

            ResponseGameAttributeDataInt wrapper = new ResponseGameAttributeDataInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-data/count";

            int i = api.CountGameAttributeData(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAttributeDataByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameAttributeDataInt wrapper = new ResponseGameAttributeDataInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-data/count/by-uuid";

            int i = api.CountGameAttributeDataByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAttributeDataByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameAttributeDataInt wrapper = new ResponseGameAttributeDataInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-data/count/by-game-id";

            int i = api.CountGameAttributeDataByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAttributeDataByGameIdByAttributeId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _attribute_id = (string)util.GetParamValue(_context, "attribute_id");

            ResponseGameAttributeDataInt wrapper = new ResponseGameAttributeDataInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-data/count/by-game-id/by-attribute-id";

            int i = api.CountGameAttributeDataByGameIdByAttributeId(
                _game_id
                , _attribute_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameAttributeDataListByFilter()  {
        
            ResponseGameAttributeDataList wrapper = new ResponseGameAttributeDataList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-data/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameAttributeDataResult result = api.BrowseGameAttributeDataListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameAttributeDataByUuid()  {
        
            ResponseGameAttributeDataBool wrapper = new ResponseGameAttributeDataBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-data/set/by-uuid";
                        
            GameAttributeData obj = new GameAttributeData();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _attribute_value = util.GetParamValue(_context, "attribute_value");
            if(!String.IsNullOrEmpty(_attribute_value))
                obj.attribute_value = (string)_attribute_value;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _attribute_id = util.GetParamValue(_context, "attribute_id");
            if(!String.IsNullOrEmpty(_attribute_id))
                obj.attribute_id = (string)_attribute_id;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            
            // get data
            wrapper.data = api.SetGameAttributeDataByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameAttributeDataByGameIdByAttributeId()  {
        
            ResponseGameAttributeDataBool wrapper = new ResponseGameAttributeDataBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-data/set/by-game-id/by-attribute-id";
                        
            GameAttributeData obj = new GameAttributeData();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _attribute_value = util.GetParamValue(_context, "attribute_value");
            if(!String.IsNullOrEmpty(_attribute_value))
                obj.attribute_value = (string)_attribute_value;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _attribute_id = util.GetParamValue(_context, "attribute_id");
            if(!String.IsNullOrEmpty(_attribute_id))
                obj.attribute_id = (string)_attribute_id;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            
            // get data
            wrapper.data = api.SetGameAttributeDataByGameIdByAttributeId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameAttributeData() {
        

            ResponseGameAttributeDataBool wrapper = new ResponseGameAttributeDataBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-data/del";

            bool completed = api.DelGameAttributeData(
                        
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameAttributeDataByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameAttributeDataBool wrapper = new ResponseGameAttributeDataBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-data/del/by-uuid";

            bool completed = api.DelGameAttributeDataByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameAttributeDataByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameAttributeDataBool wrapper = new ResponseGameAttributeDataBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-data/del/by-game-id";

            bool completed = api.DelGameAttributeDataByGameId(
                        
                _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameAttributeDataByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameAttributeDataBool wrapper = new ResponseGameAttributeDataBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-data/del/by-game-id";

            bool completed = api.DelGameAttributeDataByGameId(
                        
                _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAttributeDataList() {
        

            ResponseGameAttributeDataList wrapper = new ResponseGameAttributeDataList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-data/get";

            List<GameAttributeData> objs = api.GetGameAttributeDataList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAttributeDataListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameAttributeDataList wrapper = new ResponseGameAttributeDataList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-data/get/by-uuid";

            List<GameAttributeData> objs = api.GetGameAttributeDataListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAttributeDataListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameAttributeDataList wrapper = new ResponseGameAttributeDataList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-data/get/by-game-id";

            List<GameAttributeData> objs = api.GetGameAttributeDataListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAttributeDataListByGameIdByAttributeId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _attribute_id = (string)util.GetParamValue(_context, "attribute_id");

            ResponseGameAttributeDataList wrapper = new ResponseGameAttributeDataList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-attribute-data/get/by-game-id/by-attribute-id";

            List<GameAttributeData> objs = api.GetGameAttributeDataListByGameIdByAttributeId(
                _game_id
                , _attribute_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategory() {
        

            ResponseGameCategoryInt wrapper = new ResponseGameCategoryInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category/count";

            int i = api.CountGameCategory(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameCategoryInt wrapper = new ResponseGameCategoryInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category/count/by-uuid";

            int i = api.CountGameCategoryByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameCategoryInt wrapper = new ResponseGameCategoryInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category/count/by-code";

            int i = api.CountGameCategoryByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseGameCategoryInt wrapper = new ResponseGameCategoryInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category/count/by-name";

            int i = api.CountGameCategoryByName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryByOrgId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseGameCategoryInt wrapper = new ResponseGameCategoryInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category/count/by-org-id";

            int i = api.CountGameCategoryByOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryByTypeId() {
        
            string _type_id = (string)util.GetParamValue(_context, "type_id");

            ResponseGameCategoryInt wrapper = new ResponseGameCategoryInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category/count/by-type-id";

            int i = api.CountGameCategoryByTypeId(
                _type_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryByOrgIdByTypeId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");
            string _type_id = (string)util.GetParamValue(_context, "type_id");

            ResponseGameCategoryInt wrapper = new ResponseGameCategoryInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category/count/by-org-id/by-type-id";

            int i = api.CountGameCategoryByOrgIdByTypeId(
                _org_id
                , _type_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameCategoryListByFilter()  {
        
            ResponseGameCategoryList wrapper = new ResponseGameCategoryList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameCategoryResult result = api.BrowseGameCategoryListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameCategoryByUuid()  {
        
            ResponseGameCategoryBool wrapper = new ResponseGameCategoryBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category/set/by-uuid";
                        
            GameCategory obj = new GameCategory();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _type_id = util.GetParamValue(_context, "type_id");
            if(!String.IsNullOrEmpty(_type_id))
                obj.type_id = (string)_type_id;
            
            string _org_id = util.GetParamValue(_context, "org_id");
            if(!String.IsNullOrEmpty(_org_id))
                obj.org_id = (string)_org_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameCategoryByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameCategoryByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameCategoryBool wrapper = new ResponseGameCategoryBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category/del/by-uuid";

            bool completed = api.DelGameCategoryByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameCategoryByCodeByOrgId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseGameCategoryBool wrapper = new ResponseGameCategoryBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category/del/by-code/by-org-id";

            bool completed = api.DelGameCategoryByCodeByOrgId(
                        
                _code
                , _org_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameCategoryByCodeByOrgIdByTypeId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _org_id = (string)util.GetParamValue(_context, "org_id");
            string _type_id = (string)util.GetParamValue(_context, "type_id");

            ResponseGameCategoryBool wrapper = new ResponseGameCategoryBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category/del/by-code/by-org-id/by-type-id";

            bool completed = api.DelGameCategoryByCodeByOrgIdByTypeId(
                        
                _code
                , _org_id
                , _type_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryList() {
        

            ResponseGameCategoryList wrapper = new ResponseGameCategoryList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category/get";

            List<GameCategory> objs = api.GetGameCategoryList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameCategoryList wrapper = new ResponseGameCategoryList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category/get/by-uuid";

            List<GameCategory> objs = api.GetGameCategoryListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameCategoryList wrapper = new ResponseGameCategoryList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category/get/by-code";

            List<GameCategory> objs = api.GetGameCategoryListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryListByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseGameCategoryList wrapper = new ResponseGameCategoryList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category/get/by-name";

            List<GameCategory> objs = api.GetGameCategoryListByName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryListByOrgId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseGameCategoryList wrapper = new ResponseGameCategoryList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category/get/by-org-id";

            List<GameCategory> objs = api.GetGameCategoryListByOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryListByTypeId() {
        
            string _type_id = (string)util.GetParamValue(_context, "type_id");

            ResponseGameCategoryList wrapper = new ResponseGameCategoryList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category/get/by-type-id";

            List<GameCategory> objs = api.GetGameCategoryListByTypeId(
                _type_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryListByOrgIdByTypeId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");
            string _type_id = (string)util.GetParamValue(_context, "type_id");

            ResponseGameCategoryList wrapper = new ResponseGameCategoryList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category/get/by-org-id/by-type-id";

            List<GameCategory> objs = api.GetGameCategoryListByOrgIdByTypeId(
                _org_id
                , _type_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryTree() {
        

            ResponseGameCategoryTreeInt wrapper = new ResponseGameCategoryTreeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-tree/count";

            int i = api.CountGameCategoryTree(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryTreeByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameCategoryTreeInt wrapper = new ResponseGameCategoryTreeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-tree/count/by-uuid";

            int i = api.CountGameCategoryTreeByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryTreeByParentId() {
        
            string _parent_id = (string)util.GetParamValue(_context, "parent_id");

            ResponseGameCategoryTreeInt wrapper = new ResponseGameCategoryTreeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-tree/count/by-parent-id";

            int i = api.CountGameCategoryTreeByParentId(
                _parent_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryTreeByCategoryId() {
        
            string _category_id = (string)util.GetParamValue(_context, "category_id");

            ResponseGameCategoryTreeInt wrapper = new ResponseGameCategoryTreeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-tree/count/by-category-id";

            int i = api.CountGameCategoryTreeByCategoryId(
                _category_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryTreeByParentIdByCategoryId() {
        
            string _parent_id = (string)util.GetParamValue(_context, "parent_id");
            string _category_id = (string)util.GetParamValue(_context, "category_id");

            ResponseGameCategoryTreeInt wrapper = new ResponseGameCategoryTreeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-tree/count/by-parent-id/by-category-id";

            int i = api.CountGameCategoryTreeByParentIdByCategoryId(
                _parent_id
                , _category_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameCategoryTreeListByFilter()  {
        
            ResponseGameCategoryTreeList wrapper = new ResponseGameCategoryTreeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-tree/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameCategoryTreeResult result = api.BrowseGameCategoryTreeListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameCategoryTreeByUuid()  {
        
            ResponseGameCategoryTreeBool wrapper = new ResponseGameCategoryTreeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-tree/set/by-uuid";
                        
            GameCategoryTree obj = new GameCategoryTree();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _parent_id = util.GetParamValue(_context, "parent_id");
            if(!String.IsNullOrEmpty(_parent_id))
                obj.parent_id = (string)_parent_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _category_id = util.GetParamValue(_context, "category_id");
            if(!String.IsNullOrEmpty(_category_id))
                obj.category_id = (string)_category_id;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameCategoryTreeByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameCategoryTreeByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameCategoryTreeBool wrapper = new ResponseGameCategoryTreeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-tree/del/by-uuid";

            bool completed = api.DelGameCategoryTreeByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameCategoryTreeByParentId() {
        
            string _parent_id = (string)util.GetParamValue(_context, "parent_id");

            ResponseGameCategoryTreeBool wrapper = new ResponseGameCategoryTreeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-tree/del/by-parent-id";

            bool completed = api.DelGameCategoryTreeByParentId(
                        
                _parent_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameCategoryTreeByCategoryId() {
        
            string _category_id = (string)util.GetParamValue(_context, "category_id");

            ResponseGameCategoryTreeBool wrapper = new ResponseGameCategoryTreeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-tree/del/by-category-id";

            bool completed = api.DelGameCategoryTreeByCategoryId(
                        
                _category_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameCategoryTreeByParentIdByCategoryId() {
        
            string _parent_id = (string)util.GetParamValue(_context, "parent_id");
            string _category_id = (string)util.GetParamValue(_context, "category_id");

            ResponseGameCategoryTreeBool wrapper = new ResponseGameCategoryTreeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-tree/del/by-parent-id/by-category-id";

            bool completed = api.DelGameCategoryTreeByParentIdByCategoryId(
                        
                _parent_id
                , _category_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryTreeList() {
        

            ResponseGameCategoryTreeList wrapper = new ResponseGameCategoryTreeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-tree/get";

            List<GameCategoryTree> objs = api.GetGameCategoryTreeList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryTreeListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameCategoryTreeList wrapper = new ResponseGameCategoryTreeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-tree/get/by-uuid";

            List<GameCategoryTree> objs = api.GetGameCategoryTreeListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryTreeListByParentId() {
        
            string _parent_id = (string)util.GetParamValue(_context, "parent_id");

            ResponseGameCategoryTreeList wrapper = new ResponseGameCategoryTreeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-tree/get/by-parent-id";

            List<GameCategoryTree> objs = api.GetGameCategoryTreeListByParentId(
                _parent_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryTreeListByCategoryId() {
        
            string _category_id = (string)util.GetParamValue(_context, "category_id");

            ResponseGameCategoryTreeList wrapper = new ResponseGameCategoryTreeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-tree/get/by-category-id";

            List<GameCategoryTree> objs = api.GetGameCategoryTreeListByCategoryId(
                _category_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryTreeListByParentIdByCategoryId() {
        
            string _parent_id = (string)util.GetParamValue(_context, "parent_id");
            string _category_id = (string)util.GetParamValue(_context, "category_id");

            ResponseGameCategoryTreeList wrapper = new ResponseGameCategoryTreeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-tree/get/by-parent-id/by-category-id";

            List<GameCategoryTree> objs = api.GetGameCategoryTreeListByParentIdByCategoryId(
                _parent_id
                , _category_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryAssoc() {
        

            ResponseGameCategoryAssocInt wrapper = new ResponseGameCategoryAssocInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-assoc/count";

            int i = api.CountGameCategoryAssoc(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryAssocByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameCategoryAssocInt wrapper = new ResponseGameCategoryAssocInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-assoc/count/by-uuid";

            int i = api.CountGameCategoryAssocByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryAssocByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameCategoryAssocInt wrapper = new ResponseGameCategoryAssocInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-assoc/count/by-game-id";

            int i = api.CountGameCategoryAssocByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryAssocByCategoryId() {
        
            string _category_id = (string)util.GetParamValue(_context, "category_id");

            ResponseGameCategoryAssocInt wrapper = new ResponseGameCategoryAssocInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-assoc/count/by-category-id";

            int i = api.CountGameCategoryAssocByCategoryId(
                _category_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryAssocByGameIdByCategoryId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _category_id = (string)util.GetParamValue(_context, "category_id");

            ResponseGameCategoryAssocInt wrapper = new ResponseGameCategoryAssocInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-assoc/count/by-game-id/by-category-id";

            int i = api.CountGameCategoryAssocByGameIdByCategoryId(
                _game_id
                , _category_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameCategoryAssocListByFilter()  {
        
            ResponseGameCategoryAssocList wrapper = new ResponseGameCategoryAssocList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-assoc/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameCategoryAssocResult result = api.BrowseGameCategoryAssocListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameCategoryAssocByUuid()  {
        
            ResponseGameCategoryAssocBool wrapper = new ResponseGameCategoryAssocBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-assoc/set/by-uuid";
                        
            GameCategoryAssoc obj = new GameCategoryAssoc();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _category_id = util.GetParamValue(_context, "category_id");
            if(!String.IsNullOrEmpty(_category_id))
                obj.category_id = (string)_category_id;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameCategoryAssocByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameCategoryAssocByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameCategoryAssocBool wrapper = new ResponseGameCategoryAssocBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-assoc/del/by-uuid";

            bool completed = api.DelGameCategoryAssocByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryAssocList() {
        

            ResponseGameCategoryAssocList wrapper = new ResponseGameCategoryAssocList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-assoc/get";

            List<GameCategoryAssoc> objs = api.GetGameCategoryAssocList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryAssocListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameCategoryAssocList wrapper = new ResponseGameCategoryAssocList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-assoc/get/by-uuid";

            List<GameCategoryAssoc> objs = api.GetGameCategoryAssocListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryAssocListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameCategoryAssocList wrapper = new ResponseGameCategoryAssocList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-assoc/get/by-game-id";

            List<GameCategoryAssoc> objs = api.GetGameCategoryAssocListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryAssocListByCategoryId() {
        
            string _category_id = (string)util.GetParamValue(_context, "category_id");

            ResponseGameCategoryAssocList wrapper = new ResponseGameCategoryAssocList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-assoc/get/by-category-id";

            List<GameCategoryAssoc> objs = api.GetGameCategoryAssocListByCategoryId(
                _category_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryAssocListByGameIdByCategoryId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _category_id = (string)util.GetParamValue(_context, "category_id");

            ResponseGameCategoryAssocList wrapper = new ResponseGameCategoryAssocList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-category-assoc/get/by-game-id/by-category-id";

            List<GameCategoryAssoc> objs = api.GetGameCategoryAssocListByGameIdByCategoryId(
                _game_id
                , _category_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameType() {
        

            ResponseGameTypeInt wrapper = new ResponseGameTypeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-type/count";

            int i = api.CountGameType(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameTypeByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameTypeInt wrapper = new ResponseGameTypeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-type/count/by-uuid";

            int i = api.CountGameTypeByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameTypeByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameTypeInt wrapper = new ResponseGameTypeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-type/count/by-code";

            int i = api.CountGameTypeByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameTypeByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseGameTypeInt wrapper = new ResponseGameTypeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-type/count/by-name";

            int i = api.CountGameTypeByName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameTypeListByFilter()  {
        
            ResponseGameTypeList wrapper = new ResponseGameTypeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-type/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameTypeResult result = api.BrowseGameTypeListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameTypeByUuid()  {
        
            ResponseGameTypeBool wrapper = new ResponseGameTypeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-type/set/by-uuid";
                        
            GameType obj = new GameType();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameTypeByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameTypeByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameTypeBool wrapper = new ResponseGameTypeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-type/del/by-uuid";

            bool completed = api.DelGameTypeByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameTypeList() {
        

            ResponseGameTypeList wrapper = new ResponseGameTypeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-type/get";

            List<GameType> objs = api.GetGameTypeList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameTypeListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameTypeList wrapper = new ResponseGameTypeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-type/get/by-uuid";

            List<GameType> objs = api.GetGameTypeListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameTypeListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameTypeList wrapper = new ResponseGameTypeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-type/get/by-code";

            List<GameType> objs = api.GetGameTypeListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameTypeListByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseGameTypeList wrapper = new ResponseGameTypeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-type/get/by-name";

            List<GameType> objs = api.GetGameTypeListByName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGame() {
        

            ResponseProfileGameInt wrapper = new ResponseProfileGameInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game/count";

            int i = api.CountProfileGame(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileGameInt wrapper = new ResponseProfileGameInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game/count/by-uuid";

            int i = api.CountProfileGameByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseProfileGameInt wrapper = new ResponseProfileGameInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game/count/by-game-id";

            int i = api.CountProfileGameByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileGameInt wrapper = new ResponseProfileGameInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game/count/by-profile-id";

            int i = api.CountProfileGameByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseProfileGameInt wrapper = new ResponseProfileGameInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game/count/by-profile-id/by-game-id";

            int i = api.CountProfileGameByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseProfileGameListByFilter()  {
        
            ResponseProfileGameList wrapper = new ResponseProfileGameList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            ProfileGameResult result = api.BrowseProfileGameListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileGameByUuid()  {
        
            ResponseProfileGameBool wrapper = new ResponseProfileGameBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game/set/by-uuid";
                        
            ProfileGame obj = new ProfileGame();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _type_id = util.GetParamValue(_context, "type_id");
            if(!String.IsNullOrEmpty(_type_id))
                obj.type_id = (string)_type_id;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _profile_iteration = util.GetParamValue(_context, "profile_iteration");
            if(!String.IsNullOrEmpty(_profile_iteration))
                obj.profile_iteration = (string)_profile_iteration;
            
            string _game_profile = util.GetParamValue(_context, "game_profile");
            if(!String.IsNullOrEmpty(_game_profile))
                obj.game_profile = (string)_game_profile;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _profile_version = util.GetParamValue(_context, "profile_version");
            if(!String.IsNullOrEmpty(_profile_version))
                obj.profile_version = (string)_profile_version;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetProfileGameByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileGameByGameId()  {
        
            ResponseProfileGameBool wrapper = new ResponseProfileGameBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game/set/by-game-id";
                        
            ProfileGame obj = new ProfileGame();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _type_id = util.GetParamValue(_context, "type_id");
            if(!String.IsNullOrEmpty(_type_id))
                obj.type_id = (string)_type_id;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _profile_iteration = util.GetParamValue(_context, "profile_iteration");
            if(!String.IsNullOrEmpty(_profile_iteration))
                obj.profile_iteration = (string)_profile_iteration;
            
            string _game_profile = util.GetParamValue(_context, "game_profile");
            if(!String.IsNullOrEmpty(_game_profile))
                obj.game_profile = (string)_game_profile;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _profile_version = util.GetParamValue(_context, "profile_version");
            if(!String.IsNullOrEmpty(_profile_version))
                obj.profile_version = (string)_profile_version;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetProfileGameByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileGameByProfileId()  {
        
            ResponseProfileGameBool wrapper = new ResponseProfileGameBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game/set/by-profile-id";
                        
            ProfileGame obj = new ProfileGame();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _type_id = util.GetParamValue(_context, "type_id");
            if(!String.IsNullOrEmpty(_type_id))
                obj.type_id = (string)_type_id;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _profile_iteration = util.GetParamValue(_context, "profile_iteration");
            if(!String.IsNullOrEmpty(_profile_iteration))
                obj.profile_iteration = (string)_profile_iteration;
            
            string _game_profile = util.GetParamValue(_context, "game_profile");
            if(!String.IsNullOrEmpty(_game_profile))
                obj.game_profile = (string)_game_profile;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _profile_version = util.GetParamValue(_context, "profile_version");
            if(!String.IsNullOrEmpty(_profile_version))
                obj.profile_version = (string)_profile_version;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetProfileGameByProfileId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileGameByProfileIdByGameId()  {
        
            ResponseProfileGameBool wrapper = new ResponseProfileGameBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game/set/by-profile-id/by-game-id";
                        
            ProfileGame obj = new ProfileGame();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _type_id = util.GetParamValue(_context, "type_id");
            if(!String.IsNullOrEmpty(_type_id))
                obj.type_id = (string)_type_id;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _profile_iteration = util.GetParamValue(_context, "profile_iteration");
            if(!String.IsNullOrEmpty(_profile_iteration))
                obj.profile_iteration = (string)_profile_iteration;
            
            string _game_profile = util.GetParamValue(_context, "game_profile");
            if(!String.IsNullOrEmpty(_game_profile))
                obj.game_profile = (string)_game_profile;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _profile_version = util.GetParamValue(_context, "profile_version");
            if(!String.IsNullOrEmpty(_profile_version))
                obj.profile_version = (string)_profile_version;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetProfileGameByProfileIdByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileGameByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileGameBool wrapper = new ResponseProfileGameBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game/del/by-uuid";

            bool completed = api.DelProfileGameByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileGameByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseProfileGameBool wrapper = new ResponseProfileGameBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game/del/by-game-id";

            bool completed = api.DelProfileGameByGameId(
                        
                _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileGameByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileGameBool wrapper = new ResponseProfileGameBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game/del/by-profile-id";

            bool completed = api.DelProfileGameByProfileId(
                        
                _profile_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileGameByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseProfileGameBool wrapper = new ResponseProfileGameBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game/del/by-profile-id/by-game-id";

            bool completed = api.DelProfileGameByProfileIdByGameId(
                        
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameList() {
        

            ResponseProfileGameList wrapper = new ResponseProfileGameList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game/get";

            List<ProfileGame> objs = api.GetProfileGameList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileGameList wrapper = new ResponseProfileGameList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game/get/by-uuid";

            List<ProfileGame> objs = api.GetProfileGameListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseProfileGameList wrapper = new ResponseProfileGameList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game/get/by-game-id";

            List<ProfileGame> objs = api.GetProfileGameListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameListByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileGameList wrapper = new ResponseProfileGameList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game/get/by-profile-id";

            List<ProfileGame> objs = api.GetProfileGameListByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameListByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseProfileGameList wrapper = new ResponseProfileGameList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game/get/by-profile-id/by-game-id";

            List<ProfileGame> objs = api.GetProfileGameListByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAttribute() {
        

            ResponseGameProfileAttributeInt wrapper = new ResponseGameProfileAttributeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/count";

            int i = api.CountGameProfileAttribute(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAttributeByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProfileAttributeInt wrapper = new ResponseGameProfileAttributeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/count/by-uuid";

            int i = api.CountGameProfileAttributeByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAttributeByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameProfileAttributeInt wrapper = new ResponseGameProfileAttributeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/count/by-code";

            int i = api.CountGameProfileAttributeByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAttributeByType() {
        
            int _type = int.Parse(util.GetParamValue(_context, "type"));

            ResponseGameProfileAttributeInt wrapper = new ResponseGameProfileAttributeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/count/by-type";

            int i = api.CountGameProfileAttributeByType(
                _type
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAttributeByGroup() {
        
            int _group = int.Parse(util.GetParamValue(_context, "group"));

            ResponseGameProfileAttributeInt wrapper = new ResponseGameProfileAttributeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/count/by-group";

            int i = api.CountGameProfileAttributeByGroup(
                _group
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAttributeByCodeByType() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            int _type = int.Parse(util.GetParamValue(_context, "type"));

            ResponseGameProfileAttributeInt wrapper = new ResponseGameProfileAttributeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/count/by-code/by-type";

            int i = api.CountGameProfileAttributeByCodeByType(
                _code
                , _type
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAttributeByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileAttributeInt wrapper = new ResponseGameProfileAttributeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/count/by-game-id";

            int i = api.CountGameProfileAttributeByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAttributeByGameIdByCode() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameProfileAttributeInt wrapper = new ResponseGameProfileAttributeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/count/by-game-id/by-code";

            int i = api.CountGameProfileAttributeByGameIdByCode(
                _game_id
                , _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameProfileAttributeListByFilter()  {
        
            ResponseGameProfileAttributeList wrapper = new ResponseGameProfileAttributeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameProfileAttributeResult result = api.BrowseGameProfileAttributeListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAttributeByUuid()  {
        
            ResponseGameProfileAttributeBool wrapper = new ResponseGameProfileAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/set/by-uuid";
                        
            GameProfileAttribute obj = new GameProfileAttribute();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameProfileAttributeByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAttributeByCode()  {
        
            ResponseGameProfileAttributeBool wrapper = new ResponseGameProfileAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/set/by-code";
                        
            GameProfileAttribute obj = new GameProfileAttribute();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameProfileAttributeByCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAttributeByGameId()  {
        
            ResponseGameProfileAttributeBool wrapper = new ResponseGameProfileAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/set/by-game-id";
                        
            GameProfileAttribute obj = new GameProfileAttribute();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameProfileAttributeByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAttributeByGameIdByCode()  {
        
            ResponseGameProfileAttributeBool wrapper = new ResponseGameProfileAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/set/by-game-id/by-code";
                        
            GameProfileAttribute obj = new GameProfileAttribute();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameProfileAttributeByGameIdByCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileAttributeByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProfileAttributeBool wrapper = new ResponseGameProfileAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/del/by-uuid";

            bool completed = api.DelGameProfileAttributeByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileAttributeByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameProfileAttributeBool wrapper = new ResponseGameProfileAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/del/by-code";

            bool completed = api.DelGameProfileAttributeByCode(
                        
                _code
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileAttributeByCodeByType() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            int _type = int.Parse(util.GetParamValue(_context, "type"));

            ResponseGameProfileAttributeBool wrapper = new ResponseGameProfileAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/del/by-code/by-type";

            bool completed = api.DelGameProfileAttributeByCodeByType(
                        
                _code
                , _type
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileAttributeByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileAttributeBool wrapper = new ResponseGameProfileAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/del/by-game-id";

            bool completed = api.DelGameProfileAttributeByGameId(
                        
                _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileAttributeByGameIdByCode() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameProfileAttributeBool wrapper = new ResponseGameProfileAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/del/by-game-id/by-code";

            bool completed = api.DelGameProfileAttributeByGameIdByCode(
                        
                _game_id
                , _code
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAttributeList() {
        

            ResponseGameProfileAttributeList wrapper = new ResponseGameProfileAttributeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/get";

            List<GameProfileAttribute> objs = api.GetGameProfileAttributeList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAttributeListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProfileAttributeList wrapper = new ResponseGameProfileAttributeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/get/by-uuid";

            List<GameProfileAttribute> objs = api.GetGameProfileAttributeListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAttributeListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameProfileAttributeList wrapper = new ResponseGameProfileAttributeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/get/by-code";

            List<GameProfileAttribute> objs = api.GetGameProfileAttributeListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAttributeListByType() {
        
            int _type = int.Parse(util.GetParamValue(_context, "type"));

            ResponseGameProfileAttributeList wrapper = new ResponseGameProfileAttributeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/get/by-type";

            List<GameProfileAttribute> objs = api.GetGameProfileAttributeListByType(
                _type
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAttributeListByGroup() {
        
            int _group = int.Parse(util.GetParamValue(_context, "group"));

            ResponseGameProfileAttributeList wrapper = new ResponseGameProfileAttributeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/get/by-group";

            List<GameProfileAttribute> objs = api.GetGameProfileAttributeListByGroup(
                _group
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAttributeListByCodeByType() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            int _type = int.Parse(util.GetParamValue(_context, "type"));

            ResponseGameProfileAttributeList wrapper = new ResponseGameProfileAttributeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/get/by-code/by-type";

            List<GameProfileAttribute> objs = api.GetGameProfileAttributeListByCodeByType(
                _code
                , _type
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAttributeListByGameIdByCode() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameProfileAttributeList wrapper = new ResponseGameProfileAttributeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute/get/by-game-id/by-code";

            List<GameProfileAttribute> objs = api.GetGameProfileAttributeListByGameIdByCode(
                _game_id
                , _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAttributeText() {
        

            ResponseGameProfileAttributeTextInt wrapper = new ResponseGameProfileAttributeTextInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/count";

            int i = api.CountGameProfileAttributeText(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAttributeTextByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProfileAttributeTextInt wrapper = new ResponseGameProfileAttributeTextInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/count/by-uuid";

            int i = api.CountGameProfileAttributeTextByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAttributeTextByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameProfileAttributeTextInt wrapper = new ResponseGameProfileAttributeTextInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/count/by-profile-id";

            int i = api.CountGameProfileAttributeTextByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAttributeTextByProfileIdByAttributeId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _attribute_id = (string)util.GetParamValue(_context, "attribute_id");

            ResponseGameProfileAttributeTextInt wrapper = new ResponseGameProfileAttributeTextInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/count/by-profile-id/by-attribute-id";

            int i = api.CountGameProfileAttributeTextByProfileIdByAttributeId(
                _profile_id
                , _attribute_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAttributeTextByGameIdByProfileId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameProfileAttributeTextInt wrapper = new ResponseGameProfileAttributeTextInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/count/by-game-id/by-profile-id";

            int i = api.CountGameProfileAttributeTextByGameIdByProfileId(
                _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAttributeTextByGameIdByProfileIdByAttributeId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _attribute_id = (string)util.GetParamValue(_context, "attribute_id");

            ResponseGameProfileAttributeTextInt wrapper = new ResponseGameProfileAttributeTextInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/count/by-game-id/by-profile-id/by-attribute-id";

            int i = api.CountGameProfileAttributeTextByGameIdByProfileIdByAttributeId(
                _game_id
                , _profile_id
                , _attribute_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameProfileAttributeTextListByFilter()  {
        
            ResponseGameProfileAttributeTextList wrapper = new ResponseGameProfileAttributeTextList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameProfileAttributeTextResult result = api.BrowseGameProfileAttributeTextListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAttributeTextByUuid()  {
        
            ResponseGameProfileAttributeTextBool wrapper = new ResponseGameProfileAttributeTextBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/set/by-uuid";
                        
            GameProfileAttributeText obj = new GameProfileAttributeText();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _attribute_value = util.GetParamValue(_context, "attribute_value");
            if(!String.IsNullOrEmpty(_attribute_value))
                obj.attribute_value = (string)_attribute_value;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _attribute_id = util.GetParamValue(_context, "attribute_id");
            if(!String.IsNullOrEmpty(_attribute_id))
                obj.attribute_id = (string)_attribute_id;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            
            // get data
            wrapper.data = api.SetGameProfileAttributeTextByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAttributeTextByProfileId()  {
        
            ResponseGameProfileAttributeTextBool wrapper = new ResponseGameProfileAttributeTextBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/set/by-profile-id";
                        
            GameProfileAttributeText obj = new GameProfileAttributeText();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _attribute_value = util.GetParamValue(_context, "attribute_value");
            if(!String.IsNullOrEmpty(_attribute_value))
                obj.attribute_value = (string)_attribute_value;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _attribute_id = util.GetParamValue(_context, "attribute_id");
            if(!String.IsNullOrEmpty(_attribute_id))
                obj.attribute_id = (string)_attribute_id;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            
            // get data
            wrapper.data = api.SetGameProfileAttributeTextByProfileId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAttributeTextByProfileIdByAttributeId()  {
        
            ResponseGameProfileAttributeTextBool wrapper = new ResponseGameProfileAttributeTextBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/set/by-profile-id/by-attribute-id";
                        
            GameProfileAttributeText obj = new GameProfileAttributeText();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _attribute_value = util.GetParamValue(_context, "attribute_value");
            if(!String.IsNullOrEmpty(_attribute_value))
                obj.attribute_value = (string)_attribute_value;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _attribute_id = util.GetParamValue(_context, "attribute_id");
            if(!String.IsNullOrEmpty(_attribute_id))
                obj.attribute_id = (string)_attribute_id;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            
            // get data
            wrapper.data = api.SetGameProfileAttributeTextByProfileIdByAttributeId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAttributeTextByGameIdByProfileId()  {
        
            ResponseGameProfileAttributeTextBool wrapper = new ResponseGameProfileAttributeTextBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/set/by-game-id/by-profile-id";
                        
            GameProfileAttributeText obj = new GameProfileAttributeText();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _attribute_value = util.GetParamValue(_context, "attribute_value");
            if(!String.IsNullOrEmpty(_attribute_value))
                obj.attribute_value = (string)_attribute_value;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _attribute_id = util.GetParamValue(_context, "attribute_id");
            if(!String.IsNullOrEmpty(_attribute_id))
                obj.attribute_id = (string)_attribute_id;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            
            // get data
            wrapper.data = api.SetGameProfileAttributeTextByGameIdByProfileId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAttributeTextByGameIdByProfileIdByAttributeId()  {
        
            ResponseGameProfileAttributeTextBool wrapper = new ResponseGameProfileAttributeTextBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/set/by-game-id/by-profile-id/by-attribute-id";
                        
            GameProfileAttributeText obj = new GameProfileAttributeText();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _attribute_value = util.GetParamValue(_context, "attribute_value");
            if(!String.IsNullOrEmpty(_attribute_value))
                obj.attribute_value = (string)_attribute_value;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _attribute_id = util.GetParamValue(_context, "attribute_id");
            if(!String.IsNullOrEmpty(_attribute_id))
                obj.attribute_id = (string)_attribute_id;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            
            // get data
            wrapper.data = api.SetGameProfileAttributeTextByGameIdByProfileIdByAttributeId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileAttributeTextByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProfileAttributeTextBool wrapper = new ResponseGameProfileAttributeTextBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/del/by-uuid";

            bool completed = api.DelGameProfileAttributeTextByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileAttributeTextByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameProfileAttributeTextBool wrapper = new ResponseGameProfileAttributeTextBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/del/by-profile-id";

            bool completed = api.DelGameProfileAttributeTextByProfileId(
                        
                _profile_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileAttributeTextByProfileIdByAttributeId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _attribute_id = (string)util.GetParamValue(_context, "attribute_id");

            ResponseGameProfileAttributeTextBool wrapper = new ResponseGameProfileAttributeTextBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/del/by-profile-id/by-attribute-id";

            bool completed = api.DelGameProfileAttributeTextByProfileIdByAttributeId(
                        
                _profile_id
                , _attribute_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileAttributeTextByGameIdByProfileId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameProfileAttributeTextBool wrapper = new ResponseGameProfileAttributeTextBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/del/by-game-id/by-profile-id";

            bool completed = api.DelGameProfileAttributeTextByGameIdByProfileId(
                        
                _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileAttributeTextByGameIdByProfileIdByAttributeId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _attribute_id = (string)util.GetParamValue(_context, "attribute_id");

            ResponseGameProfileAttributeTextBool wrapper = new ResponseGameProfileAttributeTextBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/del/by-game-id/by-profile-id/by-attribute-id";

            bool completed = api.DelGameProfileAttributeTextByGameIdByProfileIdByAttributeId(
                        
                _game_id
                , _profile_id
                , _attribute_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAttributeTextListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProfileAttributeTextList wrapper = new ResponseGameProfileAttributeTextList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/get/by-uuid";

            List<GameProfileAttributeText> objs = api.GetGameProfileAttributeTextListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAttributeTextListByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameProfileAttributeTextList wrapper = new ResponseGameProfileAttributeTextList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/get/by-profile-id";

            List<GameProfileAttributeText> objs = api.GetGameProfileAttributeTextListByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAttributeTextListByProfileIdByAttributeId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _attribute_id = (string)util.GetParamValue(_context, "attribute_id");

            ResponseGameProfileAttributeTextList wrapper = new ResponseGameProfileAttributeTextList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/get/by-profile-id/by-attribute-id";

            List<GameProfileAttributeText> objs = api.GetGameProfileAttributeTextListByProfileIdByAttributeId(
                _profile_id
                , _attribute_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAttributeTextListByGameIdByProfileId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameProfileAttributeTextList wrapper = new ResponseGameProfileAttributeTextList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/get/by-game-id/by-profile-id";

            List<GameProfileAttributeText> objs = api.GetGameProfileAttributeTextListByGameIdByProfileId(
                _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAttributeTextListByGameIdByProfileIdByAttributeId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _attribute_id = (string)util.GetParamValue(_context, "attribute_id");

            ResponseGameProfileAttributeTextList wrapper = new ResponseGameProfileAttributeTextList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-text/get/by-game-id/by-profile-id/by-attribute-id";

            List<GameProfileAttributeText> objs = api.GetGameProfileAttributeTextListByGameIdByProfileIdByAttributeId(
                _game_id
                , _profile_id
                , _attribute_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAttributeData() {
        

            ResponseGameProfileAttributeDataInt wrapper = new ResponseGameProfileAttributeDataInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/count";

            int i = api.CountGameProfileAttributeData(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAttributeDataByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProfileAttributeDataInt wrapper = new ResponseGameProfileAttributeDataInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/count/by-uuid";

            int i = api.CountGameProfileAttributeDataByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAttributeDataByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameProfileAttributeDataInt wrapper = new ResponseGameProfileAttributeDataInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/count/by-profile-id";

            int i = api.CountGameProfileAttributeDataByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAttributeDataByProfileIdByAttributeId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _attribute_id = (string)util.GetParamValue(_context, "attribute_id");

            ResponseGameProfileAttributeDataInt wrapper = new ResponseGameProfileAttributeDataInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/count/by-profile-id/by-attribute-id";

            int i = api.CountGameProfileAttributeDataByProfileIdByAttributeId(
                _profile_id
                , _attribute_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAttributeDataByGameIdByProfileId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameProfileAttributeDataInt wrapper = new ResponseGameProfileAttributeDataInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/count/by-game-id/by-profile-id";

            int i = api.CountGameProfileAttributeDataByGameIdByProfileId(
                _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAttributeDataByGameIdByProfileIdByAttributeId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _attribute_id = (string)util.GetParamValue(_context, "attribute_id");

            ResponseGameProfileAttributeDataInt wrapper = new ResponseGameProfileAttributeDataInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/count/by-game-id/by-profile-id/by-attribute-id";

            int i = api.CountGameProfileAttributeDataByGameIdByProfileIdByAttributeId(
                _game_id
                , _profile_id
                , _attribute_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameProfileAttributeDataListByFilter()  {
        
            ResponseGameProfileAttributeDataList wrapper = new ResponseGameProfileAttributeDataList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameProfileAttributeDataResult result = api.BrowseGameProfileAttributeDataListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAttributeDataByUuid()  {
        
            ResponseGameProfileAttributeDataBool wrapper = new ResponseGameProfileAttributeDataBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/set/by-uuid";
                        
            GameProfileAttributeData obj = new GameProfileAttributeData();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _attribute_value = util.GetParamValue(_context, "attribute_value");
            if(!String.IsNullOrEmpty(_attribute_value))
                obj.attribute_value = (string)_attribute_value;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _attribute_id = util.GetParamValue(_context, "attribute_id");
            if(!String.IsNullOrEmpty(_attribute_id))
                obj.attribute_id = (string)_attribute_id;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            
            // get data
            wrapper.data = api.SetGameProfileAttributeDataByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAttributeDataByProfileIdByAttributeId()  {
        
            ResponseGameProfileAttributeDataBool wrapper = new ResponseGameProfileAttributeDataBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/set/by-profile-id/by-attribute-id";
                        
            GameProfileAttributeData obj = new GameProfileAttributeData();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _attribute_value = util.GetParamValue(_context, "attribute_value");
            if(!String.IsNullOrEmpty(_attribute_value))
                obj.attribute_value = (string)_attribute_value;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _attribute_id = util.GetParamValue(_context, "attribute_id");
            if(!String.IsNullOrEmpty(_attribute_id))
                obj.attribute_id = (string)_attribute_id;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            
            // get data
            wrapper.data = api.SetGameProfileAttributeDataByProfileIdByAttributeId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAttributeDataByGameIdByProfileId()  {
        
            ResponseGameProfileAttributeDataBool wrapper = new ResponseGameProfileAttributeDataBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/set/by-game-id/by-profile-id";
                        
            GameProfileAttributeData obj = new GameProfileAttributeData();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _attribute_value = util.GetParamValue(_context, "attribute_value");
            if(!String.IsNullOrEmpty(_attribute_value))
                obj.attribute_value = (string)_attribute_value;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _attribute_id = util.GetParamValue(_context, "attribute_id");
            if(!String.IsNullOrEmpty(_attribute_id))
                obj.attribute_id = (string)_attribute_id;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            
            // get data
            wrapper.data = api.SetGameProfileAttributeDataByGameIdByProfileId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAttributeDataByGameIdByProfileIdByAttributeId()  {
        
            ResponseGameProfileAttributeDataBool wrapper = new ResponseGameProfileAttributeDataBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/set/by-game-id/by-profile-id/by-attribute-id";
                        
            GameProfileAttributeData obj = new GameProfileAttributeData();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _attribute_value = util.GetParamValue(_context, "attribute_value");
            if(!String.IsNullOrEmpty(_attribute_value))
                obj.attribute_value = (string)_attribute_value;
            
            string _group = util.GetParamValue(_context, "group");
            if(!String.IsNullOrEmpty(_group))
                obj.group = Convert.ToInt32(_group);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _attribute_id = util.GetParamValue(_context, "attribute_id");
            if(!String.IsNullOrEmpty(_attribute_id))
                obj.attribute_id = (string)_attribute_id;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = Convert.ToInt32(_type);
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = Convert.ToInt32(_order);
            
            
            // get data
            wrapper.data = api.SetGameProfileAttributeDataByGameIdByProfileIdByAttributeId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileAttributeDataByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProfileAttributeDataBool wrapper = new ResponseGameProfileAttributeDataBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/del/by-uuid";

            bool completed = api.DelGameProfileAttributeDataByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileAttributeDataByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameProfileAttributeDataBool wrapper = new ResponseGameProfileAttributeDataBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/del/by-profile-id";

            bool completed = api.DelGameProfileAttributeDataByProfileId(
                        
                _profile_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileAttributeDataByProfileIdByAttributeId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _attribute_id = (string)util.GetParamValue(_context, "attribute_id");

            ResponseGameProfileAttributeDataBool wrapper = new ResponseGameProfileAttributeDataBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/del/by-profile-id/by-attribute-id";

            bool completed = api.DelGameProfileAttributeDataByProfileIdByAttributeId(
                        
                _profile_id
                , _attribute_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileAttributeDataByGameIdByProfileId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameProfileAttributeDataBool wrapper = new ResponseGameProfileAttributeDataBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/del/by-game-id/by-profile-id";

            bool completed = api.DelGameProfileAttributeDataByGameIdByProfileId(
                        
                _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileAttributeDataByGameIdByProfileIdByAttributeId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _attribute_id = (string)util.GetParamValue(_context, "attribute_id");

            ResponseGameProfileAttributeDataBool wrapper = new ResponseGameProfileAttributeDataBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/del/by-game-id/by-profile-id/by-attribute-id";

            bool completed = api.DelGameProfileAttributeDataByGameIdByProfileIdByAttributeId(
                        
                _game_id
                , _profile_id
                , _attribute_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAttributeDataList() {
        

            ResponseGameProfileAttributeDataList wrapper = new ResponseGameProfileAttributeDataList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/get";

            List<GameProfileAttributeData> objs = api.GetGameProfileAttributeDataList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAttributeDataListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProfileAttributeDataList wrapper = new ResponseGameProfileAttributeDataList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/get/by-uuid";

            List<GameProfileAttributeData> objs = api.GetGameProfileAttributeDataListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAttributeDataListByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameProfileAttributeDataList wrapper = new ResponseGameProfileAttributeDataList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/get/by-profile-id";

            List<GameProfileAttributeData> objs = api.GetGameProfileAttributeDataListByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAttributeDataListByProfileIdByAttributeId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _attribute_id = (string)util.GetParamValue(_context, "attribute_id");

            ResponseGameProfileAttributeDataList wrapper = new ResponseGameProfileAttributeDataList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/get/by-profile-id/by-attribute-id";

            List<GameProfileAttributeData> objs = api.GetGameProfileAttributeDataListByProfileIdByAttributeId(
                _profile_id
                , _attribute_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAttributeDataListByGameIdByProfileId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameProfileAttributeDataList wrapper = new ResponseGameProfileAttributeDataList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/get/by-game-id/by-profile-id";

            List<GameProfileAttributeData> objs = api.GetGameProfileAttributeDataListByGameIdByProfileId(
                _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAttributeDataListByGameIdByProfileIdByAttributeId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _attribute_id = (string)util.GetParamValue(_context, "attribute_id");

            ResponseGameProfileAttributeDataList wrapper = new ResponseGameProfileAttributeDataList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-attribute-data/get/by-game-id/by-profile-id/by-attribute-id";

            List<GameProfileAttributeData> objs = api.GetGameProfileAttributeDataListByGameIdByProfileIdByAttributeId(
                _game_id
                , _profile_id
                , _attribute_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameNetwork() {
        

            ResponseGameNetworkInt wrapper = new ResponseGameNetworkInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network/count";

            int i = api.CountGameNetwork(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameNetworkByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameNetworkInt wrapper = new ResponseGameNetworkInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network/count/by-uuid";

            int i = api.CountGameNetworkByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameNetworkByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameNetworkInt wrapper = new ResponseGameNetworkInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network/count/by-code";

            int i = api.CountGameNetworkByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameNetworkByUuidByType() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");
            string _type = (string)util.GetParamValue(_context, "type");

            ResponseGameNetworkInt wrapper = new ResponseGameNetworkInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network/count/by-uuid/by-type";

            int i = api.CountGameNetworkByUuidByType(
                _uuid
                , _type
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameNetworkListByFilter()  {
        
            ResponseGameNetworkList wrapper = new ResponseGameNetworkList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameNetworkResult result = api.BrowseGameNetworkListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameNetworkByUuid()  {
        
            ResponseGameNetworkBool wrapper = new ResponseGameNetworkBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network/set/by-uuid";
                        
            GameNetwork obj = new GameNetwork();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _secret = util.GetParamValue(_context, "secret");
            if(!String.IsNullOrEmpty(_secret))
                obj.secret = (string)_secret;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameNetworkByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameNetworkByCode()  {
        
            ResponseGameNetworkBool wrapper = new ResponseGameNetworkBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network/set/by-code";
                        
            GameNetwork obj = new GameNetwork();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _secret = util.GetParamValue(_context, "secret");
            if(!String.IsNullOrEmpty(_secret))
                obj.secret = (string)_secret;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameNetworkByCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameNetworkByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameNetworkBool wrapper = new ResponseGameNetworkBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network/del/by-uuid";

            bool completed = api.DelGameNetworkByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameNetworkList() {
        

            ResponseGameNetworkList wrapper = new ResponseGameNetworkList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network/get";

            List<GameNetwork> objs = api.GetGameNetworkList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameNetworkListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameNetworkList wrapper = new ResponseGameNetworkList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network/get/by-uuid";

            List<GameNetwork> objs = api.GetGameNetworkListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameNetworkListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameNetworkList wrapper = new ResponseGameNetworkList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network/get/by-code";

            List<GameNetwork> objs = api.GetGameNetworkListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameNetworkListByUuidByType() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");
            string _type = (string)util.GetParamValue(_context, "type");

            ResponseGameNetworkList wrapper = new ResponseGameNetworkList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network/get/by-uuid/by-type";

            List<GameNetwork> objs = api.GetGameNetworkListByUuidByType(
                _uuid
                , _type
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameNetworkAuth() {
        

            ResponseGameNetworkAuthInt wrapper = new ResponseGameNetworkAuthInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network-auth/count";

            int i = api.CountGameNetworkAuth(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameNetworkAuthByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameNetworkAuthInt wrapper = new ResponseGameNetworkAuthInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network-auth/count/by-uuid";

            int i = api.CountGameNetworkAuthByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameNetworkAuthByGameIdByGameNetworkId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _game_network_id = (string)util.GetParamValue(_context, "game_network_id");

            ResponseGameNetworkAuthInt wrapper = new ResponseGameNetworkAuthInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network-auth/count/by-game-id/by-game-network-id";

            int i = api.CountGameNetworkAuthByGameIdByGameNetworkId(
                _game_id
                , _game_network_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameNetworkAuthListByFilter()  {
        
            ResponseGameNetworkAuthList wrapper = new ResponseGameNetworkAuthList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network-auth/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameNetworkAuthResult result = api.BrowseGameNetworkAuthListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameNetworkAuthByUuid()  {
        
            ResponseGameNetworkAuthBool wrapper = new ResponseGameNetworkAuthBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network-auth/set/by-uuid";
                        
            GameNetworkAuth obj = new GameNetworkAuth();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _app_id = util.GetParamValue(_context, "app_id");
            if(!String.IsNullOrEmpty(_app_id))
                obj.app_id = (string)_app_id;
            
            string _game_network_id = util.GetParamValue(_context, "game_network_id");
            if(!String.IsNullOrEmpty(_game_network_id))
                obj.game_network_id = (string)_game_network_id;
            
            string _secret = util.GetParamValue(_context, "secret");
            if(!String.IsNullOrEmpty(_secret))
                obj.secret = (string)_secret;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameNetworkAuthByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameNetworkAuthByGameIdByGameNetworkId()  {
        
            ResponseGameNetworkAuthBool wrapper = new ResponseGameNetworkAuthBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network-auth/set/by-game-id/by-game-network-id";
                        
            GameNetworkAuth obj = new GameNetworkAuth();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _app_id = util.GetParamValue(_context, "app_id");
            if(!String.IsNullOrEmpty(_app_id))
                obj.app_id = (string)_app_id;
            
            string _game_network_id = util.GetParamValue(_context, "game_network_id");
            if(!String.IsNullOrEmpty(_game_network_id))
                obj.game_network_id = (string)_game_network_id;
            
            string _secret = util.GetParamValue(_context, "secret");
            if(!String.IsNullOrEmpty(_secret))
                obj.secret = (string)_secret;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameNetworkAuthByGameIdByGameNetworkId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameNetworkAuthByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameNetworkAuthBool wrapper = new ResponseGameNetworkAuthBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network-auth/del/by-uuid";

            bool completed = api.DelGameNetworkAuthByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameNetworkAuthList() {
        

            ResponseGameNetworkAuthList wrapper = new ResponseGameNetworkAuthList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network-auth/get";

            List<GameNetworkAuth> objs = api.GetGameNetworkAuthList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameNetworkAuthListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameNetworkAuthList wrapper = new ResponseGameNetworkAuthList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network-auth/get/by-uuid";

            List<GameNetworkAuth> objs = api.GetGameNetworkAuthListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameNetworkAuthListByGameIdByGameNetworkId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _game_network_id = (string)util.GetParamValue(_context, "game_network_id");

            ResponseGameNetworkAuthList wrapper = new ResponseGameNetworkAuthList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-network-auth/get/by-game-id/by-game-network-id";

            List<GameNetworkAuth> objs = api.GetGameNetworkAuthListByGameIdByGameNetworkId(
                _game_id
                , _game_network_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameNetwork() {
        

            ResponseProfileGameNetworkInt wrapper = new ResponseProfileGameNetworkInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/count";

            int i = api.CountProfileGameNetwork(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameNetworkByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileGameNetworkInt wrapper = new ResponseProfileGameNetworkInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/count/by-uuid";

            int i = api.CountProfileGameNetworkByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameNetworkByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseProfileGameNetworkInt wrapper = new ResponseProfileGameNetworkInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/count/by-game-id";

            int i = api.CountProfileGameNetworkByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameNetworkByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileGameNetworkInt wrapper = new ResponseProfileGameNetworkInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/count/by-profile-id";

            int i = api.CountProfileGameNetworkByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameNetworkByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseProfileGameNetworkInt wrapper = new ResponseProfileGameNetworkInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/count/by-profile-id/by-game-id";

            int i = api.CountProfileGameNetworkByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameNetworkByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseProfileGameNetworkInt wrapper = new ResponseProfileGameNetworkInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/count/by-profile-id/by-game-id";

            int i = api.CountProfileGameNetworkByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameNetworkByProfileIdByGameIdByGameNetworkId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _game_network_id = (string)util.GetParamValue(_context, "game_network_id");

            ResponseProfileGameNetworkInt wrapper = new ResponseProfileGameNetworkInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/count/by-profile-id/by-game-id/by-game-network-id";

            int i = api.CountProfileGameNetworkByProfileIdByGameIdByGameNetworkId(
                _profile_id
                , _game_id
                , _game_network_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameNetworkByNetworkUsernameByGameIdByGameNetworkId() {
        
            string _network_username = (string)util.GetParamValue(_context, "network_username");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _game_network_id = (string)util.GetParamValue(_context, "game_network_id");

            ResponseProfileGameNetworkInt wrapper = new ResponseProfileGameNetworkInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/count/by-network-username/by-game-id/by-game-network-id";

            int i = api.CountProfileGameNetworkByNetworkUsernameByGameIdByGameNetworkId(
                _network_username
                , _game_id
                , _game_network_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseProfileGameNetworkListByFilter()  {
        
            ResponseProfileGameNetworkList wrapper = new ResponseProfileGameNetworkList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            ProfileGameNetworkResult result = api.BrowseProfileGameNetworkListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileGameNetworkByUuid()  {
        
            ResponseProfileGameNetworkBool wrapper = new ResponseProfileGameNetworkBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/set/by-uuid";
                        
            ProfileGameNetwork obj = new ProfileGameNetwork();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _hash = util.GetParamValue(_context, "hash");
            if(!String.IsNullOrEmpty(_hash))
                obj.hash = (string)_hash;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _game_network_id = util.GetParamValue(_context, "game_network_id");
            if(!String.IsNullOrEmpty(_game_network_id))
                obj.game_network_id = (string)_game_network_id;
            
            string _network_username = util.GetParamValue(_context, "network_username");
            if(!String.IsNullOrEmpty(_network_username))
                obj.network_username = (string)_network_username;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _network_fullname = util.GetParamValue(_context, "network_fullname");
            if(!String.IsNullOrEmpty(_network_fullname))
                obj.network_fullname = (string)_network_fullname;
            
            string _secret = util.GetParamValue(_context, "secret");
            if(!String.IsNullOrEmpty(_secret))
                obj.secret = (string)_secret;
            
            string _token = util.GetParamValue(_context, "token");
            if(!String.IsNullOrEmpty(_token))
                obj.token = (string)_token;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _network_auth = util.GetParamValue(_context, "network_auth");
            if(!String.IsNullOrEmpty(_network_auth))
                obj.network_auth = (string)_network_auth;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _network_user_id = util.GetParamValue(_context, "network_user_id");
            if(!String.IsNullOrEmpty(_network_user_id))
                obj.network_user_id = (string)_network_user_id;
            
            
            // get data
            wrapper.data = api.SetProfileGameNetworkByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileGameNetworkByProfileIdByGameId()  {
        
            ResponseProfileGameNetworkBool wrapper = new ResponseProfileGameNetworkBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/set/by-profile-id/by-game-id";
                        
            ProfileGameNetwork obj = new ProfileGameNetwork();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _hash = util.GetParamValue(_context, "hash");
            if(!String.IsNullOrEmpty(_hash))
                obj.hash = (string)_hash;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _game_network_id = util.GetParamValue(_context, "game_network_id");
            if(!String.IsNullOrEmpty(_game_network_id))
                obj.game_network_id = (string)_game_network_id;
            
            string _network_username = util.GetParamValue(_context, "network_username");
            if(!String.IsNullOrEmpty(_network_username))
                obj.network_username = (string)_network_username;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _network_fullname = util.GetParamValue(_context, "network_fullname");
            if(!String.IsNullOrEmpty(_network_fullname))
                obj.network_fullname = (string)_network_fullname;
            
            string _secret = util.GetParamValue(_context, "secret");
            if(!String.IsNullOrEmpty(_secret))
                obj.secret = (string)_secret;
            
            string _token = util.GetParamValue(_context, "token");
            if(!String.IsNullOrEmpty(_token))
                obj.token = (string)_token;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _network_auth = util.GetParamValue(_context, "network_auth");
            if(!String.IsNullOrEmpty(_network_auth))
                obj.network_auth = (string)_network_auth;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _network_user_id = util.GetParamValue(_context, "network_user_id");
            if(!String.IsNullOrEmpty(_network_user_id))
                obj.network_user_id = (string)_network_user_id;
            
            
            // get data
            wrapper.data = api.SetProfileGameNetworkByProfileIdByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileGameNetworkByProfileIdByGameIdByGameNetworkId()  {
        
            ResponseProfileGameNetworkBool wrapper = new ResponseProfileGameNetworkBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/set/by-profile-id/by-game-id/by-game-network-id";
                        
            ProfileGameNetwork obj = new ProfileGameNetwork();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _hash = util.GetParamValue(_context, "hash");
            if(!String.IsNullOrEmpty(_hash))
                obj.hash = (string)_hash;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _game_network_id = util.GetParamValue(_context, "game_network_id");
            if(!String.IsNullOrEmpty(_game_network_id))
                obj.game_network_id = (string)_game_network_id;
            
            string _network_username = util.GetParamValue(_context, "network_username");
            if(!String.IsNullOrEmpty(_network_username))
                obj.network_username = (string)_network_username;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _network_fullname = util.GetParamValue(_context, "network_fullname");
            if(!String.IsNullOrEmpty(_network_fullname))
                obj.network_fullname = (string)_network_fullname;
            
            string _secret = util.GetParamValue(_context, "secret");
            if(!String.IsNullOrEmpty(_secret))
                obj.secret = (string)_secret;
            
            string _token = util.GetParamValue(_context, "token");
            if(!String.IsNullOrEmpty(_token))
                obj.token = (string)_token;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _network_auth = util.GetParamValue(_context, "network_auth");
            if(!String.IsNullOrEmpty(_network_auth))
                obj.network_auth = (string)_network_auth;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _network_user_id = util.GetParamValue(_context, "network_user_id");
            if(!String.IsNullOrEmpty(_network_user_id))
                obj.network_user_id = (string)_network_user_id;
            
            
            // get data
            wrapper.data = api.SetProfileGameNetworkByProfileIdByGameIdByGameNetworkId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileGameNetworkByNetworkUsernameByGameIdByGameNetworkId()  {
        
            ResponseProfileGameNetworkBool wrapper = new ResponseProfileGameNetworkBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/set/by-network-username/by-game-id/by-game-network-id";
                        
            ProfileGameNetwork obj = new ProfileGameNetwork();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _hash = util.GetParamValue(_context, "hash");
            if(!String.IsNullOrEmpty(_hash))
                obj.hash = (string)_hash;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _game_network_id = util.GetParamValue(_context, "game_network_id");
            if(!String.IsNullOrEmpty(_game_network_id))
                obj.game_network_id = (string)_game_network_id;
            
            string _network_username = util.GetParamValue(_context, "network_username");
            if(!String.IsNullOrEmpty(_network_username))
                obj.network_username = (string)_network_username;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _network_fullname = util.GetParamValue(_context, "network_fullname");
            if(!String.IsNullOrEmpty(_network_fullname))
                obj.network_fullname = (string)_network_fullname;
            
            string _secret = util.GetParamValue(_context, "secret");
            if(!String.IsNullOrEmpty(_secret))
                obj.secret = (string)_secret;
            
            string _token = util.GetParamValue(_context, "token");
            if(!String.IsNullOrEmpty(_token))
                obj.token = (string)_token;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _network_auth = util.GetParamValue(_context, "network_auth");
            if(!String.IsNullOrEmpty(_network_auth))
                obj.network_auth = (string)_network_auth;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _network_user_id = util.GetParamValue(_context, "network_user_id");
            if(!String.IsNullOrEmpty(_network_user_id))
                obj.network_user_id = (string)_network_user_id;
            
            
            // get data
            wrapper.data = api.SetProfileGameNetworkByNetworkUsernameByGameIdByGameNetworkId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileGameNetworkByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileGameNetworkBool wrapper = new ResponseProfileGameNetworkBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/del/by-uuid";

            bool completed = api.DelProfileGameNetworkByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileGameNetworkByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseProfileGameNetworkBool wrapper = new ResponseProfileGameNetworkBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/del/by-profile-id/by-game-id";

            bool completed = api.DelProfileGameNetworkByProfileIdByGameId(
                        
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileGameNetworkByProfileIdByGameIdByGameNetworkId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _game_network_id = (string)util.GetParamValue(_context, "game_network_id");

            ResponseProfileGameNetworkBool wrapper = new ResponseProfileGameNetworkBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/del/by-profile-id/by-game-id/by-game-network-id";

            bool completed = api.DelProfileGameNetworkByProfileIdByGameIdByGameNetworkId(
                        
                _profile_id
                , _game_id
                , _game_network_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileGameNetworkByNetworkUsernameByGameIdByGameNetworkId() {
        
            string _network_username = (string)util.GetParamValue(_context, "network_username");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _game_network_id = (string)util.GetParamValue(_context, "game_network_id");

            ResponseProfileGameNetworkBool wrapper = new ResponseProfileGameNetworkBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/del/by-network-username/by-game-id/by-game-network-id";

            bool completed = api.DelProfileGameNetworkByNetworkUsernameByGameIdByGameNetworkId(
                        
                _network_username
                , _game_id
                , _game_network_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameNetworkList() {
        

            ResponseProfileGameNetworkList wrapper = new ResponseProfileGameNetworkList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/get";

            List<ProfileGameNetwork> objs = api.GetProfileGameNetworkList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameNetworkListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileGameNetworkList wrapper = new ResponseProfileGameNetworkList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/get/by-uuid";

            List<ProfileGameNetwork> objs = api.GetProfileGameNetworkListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameNetworkListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseProfileGameNetworkList wrapper = new ResponseProfileGameNetworkList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/get/by-game-id";

            List<ProfileGameNetwork> objs = api.GetProfileGameNetworkListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameNetworkListByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileGameNetworkList wrapper = new ResponseProfileGameNetworkList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/get/by-profile-id";

            List<ProfileGameNetwork> objs = api.GetProfileGameNetworkListByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameNetworkListByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseProfileGameNetworkList wrapper = new ResponseProfileGameNetworkList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/get/by-profile-id/by-game-id";

            List<ProfileGameNetwork> objs = api.GetProfileGameNetworkListByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameNetworkListByProfileIdByGameIdByGameNetworkId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _game_network_id = (string)util.GetParamValue(_context, "game_network_id");

            ResponseProfileGameNetworkList wrapper = new ResponseProfileGameNetworkList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/get/by-profile-id/by-game-id/by-game-network-id";

            List<ProfileGameNetwork> objs = api.GetProfileGameNetworkListByProfileIdByGameIdByGameNetworkId(
                _profile_id
                , _game_id
                , _game_network_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameNetworkListByNetworkUsernameByGameIdByGameNetworkId() {
        
            string _network_username = (string)util.GetParamValue(_context, "network_username");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _game_network_id = (string)util.GetParamValue(_context, "game_network_id");

            ResponseProfileGameNetworkList wrapper = new ResponseProfileGameNetworkList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-network/get/by-network-username/by-game-id/by-game-network-id";

            List<ProfileGameNetwork> objs = api.GetProfileGameNetworkListByNetworkUsernameByGameIdByGameNetworkId(
                _network_username
                , _game_id
                , _game_network_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameDataAttribute() {
        

            ResponseProfileGameDataAttributeInt wrapper = new ResponseProfileGameDataAttributeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-data-attribute/count";

            int i = api.CountProfileGameDataAttribute(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameDataAttributeByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileGameDataAttributeInt wrapper = new ResponseProfileGameDataAttributeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-data-attribute/count/by-uuid";

            int i = api.CountProfileGameDataAttributeByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameDataAttributeByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileGameDataAttributeInt wrapper = new ResponseProfileGameDataAttributeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-data-attribute/count/by-profile-id";

            int i = api.CountProfileGameDataAttributeByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameDataAttributeByProfileIdByGameIdByCode() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseProfileGameDataAttributeInt wrapper = new ResponseProfileGameDataAttributeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-data-attribute/count/by-profile-id/by-game-id/by-code";

            int i = api.CountProfileGameDataAttributeByProfileIdByGameIdByCode(
                _profile_id
                , _game_id
                , _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseProfileGameDataAttributeListByFilter()  {
        
            ResponseProfileGameDataAttributeList wrapper = new ResponseProfileGameDataAttributeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-data-attribute/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            ProfileGameDataAttributeResult result = api.BrowseProfileGameDataAttributeListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileGameDataAttributeByUuid()  {
        
            ResponseProfileGameDataAttributeBool wrapper = new ResponseProfileGameDataAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-data-attribute/set/by-uuid";
                        
            ProfileGameDataAttribute obj = new ProfileGameDataAttribute();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _val = util.GetParamValue(_context, "val");
            if(!String.IsNullOrEmpty(_val))
                obj.val = (string)_val;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _otype = util.GetParamValue(_context, "otype");
            if(!String.IsNullOrEmpty(_otype))
                obj.otype = (string)_otype;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetProfileGameDataAttributeByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileGameDataAttributeByProfileId()  {
        
            ResponseProfileGameDataAttributeBool wrapper = new ResponseProfileGameDataAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-data-attribute/set/by-profile-id";
                        
            ProfileGameDataAttribute obj = new ProfileGameDataAttribute();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _val = util.GetParamValue(_context, "val");
            if(!String.IsNullOrEmpty(_val))
                obj.val = (string)_val;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _otype = util.GetParamValue(_context, "otype");
            if(!String.IsNullOrEmpty(_otype))
                obj.otype = (string)_otype;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetProfileGameDataAttributeByProfileId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileGameDataAttributeByProfileIdByGameIdByCode()  {
        
            ResponseProfileGameDataAttributeBool wrapper = new ResponseProfileGameDataAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-data-attribute/set/by-profile-id/by-game-id/by-code";
                        
            ProfileGameDataAttribute obj = new ProfileGameDataAttribute();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _val = util.GetParamValue(_context, "val");
            if(!String.IsNullOrEmpty(_val))
                obj.val = (string)_val;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _otype = util.GetParamValue(_context, "otype");
            if(!String.IsNullOrEmpty(_otype))
                obj.otype = (string)_otype;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetProfileGameDataAttributeByProfileIdByGameIdByCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileGameDataAttributeByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileGameDataAttributeBool wrapper = new ResponseProfileGameDataAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-data-attribute/del/by-uuid";

            bool completed = api.DelProfileGameDataAttributeByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileGameDataAttributeByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileGameDataAttributeBool wrapper = new ResponseProfileGameDataAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-data-attribute/del/by-profile-id";

            bool completed = api.DelProfileGameDataAttributeByProfileId(
                        
                _profile_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileGameDataAttributeByProfileIdByGameIdByCode() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseProfileGameDataAttributeBool wrapper = new ResponseProfileGameDataAttributeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-data-attribute/del/by-profile-id/by-game-id/by-code";

            bool completed = api.DelProfileGameDataAttributeByProfileIdByGameIdByCode(
                        
                _profile_id
                , _game_id
                , _code
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameDataAttributeListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileGameDataAttributeList wrapper = new ResponseProfileGameDataAttributeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-data-attribute/get/by-uuid";

            List<ProfileGameDataAttribute> objs = api.GetProfileGameDataAttributeListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameDataAttributeListByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileGameDataAttributeList wrapper = new ResponseProfileGameDataAttributeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-data-attribute/get/by-profile-id";

            List<ProfileGameDataAttribute> objs = api.GetProfileGameDataAttributeListByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameDataAttributeListByProfileIdByGameIdByCode() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseProfileGameDataAttributeList wrapper = new ResponseProfileGameDataAttributeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-data-attribute/get/by-profile-id/by-game-id/by-code";

            List<ProfileGameDataAttribute> objs = api.GetProfileGameDataAttributeListByProfileIdByGameIdByCode(
                _profile_id
                , _game_id
                , _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameSession() {
        

            ResponseGameSessionInt wrapper = new ResponseGameSessionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-session/count";

            int i = api.CountGameSession(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameSessionByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameSessionInt wrapper = new ResponseGameSessionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-session/count/by-uuid";

            int i = api.CountGameSessionByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameSessionByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameSessionInt wrapper = new ResponseGameSessionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-session/count/by-game-id";

            int i = api.CountGameSessionByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameSessionByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameSessionInt wrapper = new ResponseGameSessionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-session/count/by-profile-id";

            int i = api.CountGameSessionByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameSessionByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameSessionInt wrapper = new ResponseGameSessionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-session/count/by-profile-id/by-game-id";

            int i = api.CountGameSessionByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameSessionListByFilter()  {
        
            ResponseGameSessionList wrapper = new ResponseGameSessionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-session/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameSessionResult result = api.BrowseGameSessionListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameSessionByUuid()  {
        
            ResponseGameSessionBool wrapper = new ResponseGameSessionBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-session/set/by-uuid";
                        
            GameSession obj = new GameSession();
            
            string _game_area = util.GetParamValue(_context, "game_area");
            if(!String.IsNullOrEmpty(_game_area))
                obj.game_area = (string)_game_area;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _network_uuid = util.GetParamValue(_context, "network_uuid");
            if(!String.IsNullOrEmpty(_network_uuid))
                obj.network_uuid = (string)_network_uuid;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _game_level = util.GetParamValue(_context, "game_level");
            if(!String.IsNullOrEmpty(_game_level))
                obj.game_level = (string)_game_level;
            
            string _profile_network = util.GetParamValue(_context, "profile_network");
            if(!String.IsNullOrEmpty(_profile_network))
                obj.profile_network = (string)_profile_network;
            
            string _profile_device = util.GetParamValue(_context, "profile_device");
            if(!String.IsNullOrEmpty(_profile_device))
                obj.profile_device = (string)_profile_device;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _network_external_port = util.GetParamValue(_context, "network_external_port");
            if(!String.IsNullOrEmpty(_network_external_port))
                obj.network_external_port = Convert.ToInt32(_network_external_port);
            
            string _game_players_connected = util.GetParamValue(_context, "game_players_connected");
            if(!String.IsNullOrEmpty(_game_players_connected))
                obj.game_players_connected = Convert.ToInt32(_game_players_connected);
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _game_state = util.GetParamValue(_context, "game_state");
            if(!String.IsNullOrEmpty(_game_state))
                obj.game_state = (string)_game_state;
            
            string _hash = util.GetParamValue(_context, "hash");
            if(!String.IsNullOrEmpty(_hash))
                obj.hash = (string)_hash;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _network_external_ip = util.GetParamValue(_context, "network_external_ip");
            if(!String.IsNullOrEmpty(_network_external_ip))
                obj.network_external_ip = (string)_network_external_ip;
            
            string _profile_username = util.GetParamValue(_context, "profile_username");
            if(!String.IsNullOrEmpty(_profile_username))
                obj.profile_username = (string)_profile_username;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _game_code = util.GetParamValue(_context, "game_code");
            if(!String.IsNullOrEmpty(_game_code))
                obj.game_code = (string)_game_code;
            
            string _game_player_z = util.GetParamValue(_context, "game_player_z");
            if(!String.IsNullOrEmpty(_game_player_z))
                obj.game_player_z = float.Parse(_game_player_z);
            
            string _game_player_x = util.GetParamValue(_context, "game_player_x");
            if(!String.IsNullOrEmpty(_game_player_x))
                obj.game_player_x = float.Parse(_game_player_x);
            
            string _game_player_y = util.GetParamValue(_context, "game_player_y");
            if(!String.IsNullOrEmpty(_game_player_y))
                obj.game_player_y = float.Parse(_game_player_y);
            
            string _network_port = util.GetParamValue(_context, "network_port");
            if(!String.IsNullOrEmpty(_network_port))
                obj.network_port = Convert.ToInt32(_network_port);
            
            string _game_players_allowed = util.GetParamValue(_context, "game_players_allowed");
            if(!String.IsNullOrEmpty(_game_players_allowed))
                obj.game_players_allowed = Convert.ToInt32(_game_players_allowed);
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _game_type = util.GetParamValue(_context, "game_type");
            if(!String.IsNullOrEmpty(_game_type))
                obj.game_type = (string)_game_type;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _network_ip = util.GetParamValue(_context, "network_ip");
            if(!String.IsNullOrEmpty(_network_ip))
                obj.network_ip = (string)_network_ip;
            
            string _network_use_nat = util.GetParamValue(_context, "network_use_nat");
            if(!String.IsNullOrEmpty(_network_use_nat))
                obj.network_use_nat = Convert.ToBoolean(_network_use_nat);
            
            
            // get data
            wrapper.data = api.SetGameSessionByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameSessionByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameSessionBool wrapper = new ResponseGameSessionBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-session/del/by-uuid";

            bool completed = api.DelGameSessionByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameSessionList() {
        

            ResponseGameSessionList wrapper = new ResponseGameSessionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-session/get";

            List<GameSession> objs = api.GetGameSessionList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameSessionListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameSessionList wrapper = new ResponseGameSessionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-session/get/by-uuid";

            List<GameSession> objs = api.GetGameSessionListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameSessionListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameSessionList wrapper = new ResponseGameSessionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-session/get/by-game-id";

            List<GameSession> objs = api.GetGameSessionListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameSessionListByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameSessionList wrapper = new ResponseGameSessionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-session/get/by-profile-id";

            List<GameSession> objs = api.GetGameSessionListByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameSessionListByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameSessionList wrapper = new ResponseGameSessionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-session/get/by-profile-id/by-game-id";

            List<GameSession> objs = api.GetGameSessionListByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameSessionData() {
        

            ResponseGameSessionDataInt wrapper = new ResponseGameSessionDataInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-session-data/count";

            int i = api.CountGameSessionData(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameSessionDataByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameSessionDataInt wrapper = new ResponseGameSessionDataInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-session-data/count/by-uuid";

            int i = api.CountGameSessionDataByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameSessionDataListByFilter()  {
        
            ResponseGameSessionDataList wrapper = new ResponseGameSessionDataList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-session-data/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameSessionDataResult result = api.BrowseGameSessionDataListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameSessionDataByUuid()  {
        
            ResponseGameSessionDataBool wrapper = new ResponseGameSessionDataBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-session-data/set/by-uuid";
                        
            GameSessionData obj = new GameSessionData();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data_results = util.GetParamValue(_context, "data_results");
            if(!String.IsNullOrEmpty(_data_results))
                obj.data_results = (string)_data_results;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _data_layer_projectile = util.GetParamValue(_context, "data_layer_projectile");
            if(!String.IsNullOrEmpty(_data_layer_projectile))
                obj.data_layer_projectile = (string)_data_layer_projectile;
            
            string _data_layer_actors = util.GetParamValue(_context, "data_layer_actors");
            if(!String.IsNullOrEmpty(_data_layer_actors))
                obj.data_layer_actors = (string)_data_layer_actors;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _data_layer_enemy = util.GetParamValue(_context, "data_layer_enemy");
            if(!String.IsNullOrEmpty(_data_layer_enemy))
                obj.data_layer_enemy = (string)_data_layer_enemy;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameSessionDataByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameSessionDataByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameSessionDataBool wrapper = new ResponseGameSessionDataBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-session-data/del/by-uuid";

            bool completed = api.DelGameSessionDataByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameSessionDataList() {
        

            ResponseGameSessionDataList wrapper = new ResponseGameSessionDataList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-session-data/get";

            List<GameSessionData> objs = api.GetGameSessionDataList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameSessionDataListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameSessionDataList wrapper = new ResponseGameSessionDataList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-session-data/get/by-uuid";

            List<GameSessionData> objs = api.GetGameSessionDataListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameContent() {
        

            ResponseGameContentInt wrapper = new ResponseGameContentInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/count";

            int i = api.CountGameContent(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameContentByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameContentInt wrapper = new ResponseGameContentInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/count/by-uuid";

            int i = api.CountGameContentByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameContentByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameContentInt wrapper = new ResponseGameContentInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/count/by-game-id";

            int i = api.CountGameContentByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameContentByGameIdByPath() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _path = (string)util.GetParamValue(_context, "path");

            ResponseGameContentInt wrapper = new ResponseGameContentInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/count/by-game-id/by-path";

            int i = api.CountGameContentByGameIdByPath(
                _game_id
                , _path
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameContentByGameIdByPathByVersion() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _path = (string)util.GetParamValue(_context, "path");
            string _version = (string)util.GetParamValue(_context, "version");

            ResponseGameContentInt wrapper = new ResponseGameContentInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/count/by-game-id/by-path/by-version";

            int i = api.CountGameContentByGameIdByPathByVersion(
                _game_id
                , _path
                , _version
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameContentByGameIdByPathByVersionByPlatformByIncrement() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _path = (string)util.GetParamValue(_context, "path");
            string _version = (string)util.GetParamValue(_context, "version");
            string _platform = (string)util.GetParamValue(_context, "platform");
            int _increment = int.Parse(util.GetParamValue(_context, "increment"));

            ResponseGameContentInt wrapper = new ResponseGameContentInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/count/by-game-id/by-path/by-version/by-platform/by-increment";

            int i = api.CountGameContentByGameIdByPathByVersionByPlatformByIncrement(
                _game_id
                , _path
                , _version
                , _platform
                , _increment
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameContentListByFilter()  {
        
            ResponseGameContentList wrapper = new ResponseGameContentList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameContentResult result = api.BrowseGameContentListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameContentByUuid()  {
        
            ResponseGameContentBool wrapper = new ResponseGameContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/set/by-uuid";
                        
            GameContent obj = new GameContent();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _extension = util.GetParamValue(_context, "extension");
            if(!String.IsNullOrEmpty(_extension))
                obj.extension = (string)_extension;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _filename = util.GetParamValue(_context, "filename");
            if(!String.IsNullOrEmpty(_filename))
                obj.filename = (string)_filename;
            
            string _source = util.GetParamValue(_context, "source");
            if(!String.IsNullOrEmpty(_source))
                obj.source = (string)_source;
            
            string _version = util.GetParamValue(_context, "version");
            if(!String.IsNullOrEmpty(_version))
                obj.version = (string)_version;
            
            string _platform = util.GetParamValue(_context, "platform");
            if(!String.IsNullOrEmpty(_platform))
                obj.platform = (string)_platform;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _path = util.GetParamValue(_context, "path");
            if(!String.IsNullOrEmpty(_path))
                obj.path = (string)_path;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _increment = util.GetParamValue(_context, "increment");
            if(!String.IsNullOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _hash = util.GetParamValue(_context, "hash");
            if(!String.IsNullOrEmpty(_hash))
                obj.hash = (string)_hash;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameContentByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameContentByGameId()  {
        
            ResponseGameContentBool wrapper = new ResponseGameContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/set/by-game-id";
                        
            GameContent obj = new GameContent();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _extension = util.GetParamValue(_context, "extension");
            if(!String.IsNullOrEmpty(_extension))
                obj.extension = (string)_extension;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _filename = util.GetParamValue(_context, "filename");
            if(!String.IsNullOrEmpty(_filename))
                obj.filename = (string)_filename;
            
            string _source = util.GetParamValue(_context, "source");
            if(!String.IsNullOrEmpty(_source))
                obj.source = (string)_source;
            
            string _version = util.GetParamValue(_context, "version");
            if(!String.IsNullOrEmpty(_version))
                obj.version = (string)_version;
            
            string _platform = util.GetParamValue(_context, "platform");
            if(!String.IsNullOrEmpty(_platform))
                obj.platform = (string)_platform;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _path = util.GetParamValue(_context, "path");
            if(!String.IsNullOrEmpty(_path))
                obj.path = (string)_path;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _increment = util.GetParamValue(_context, "increment");
            if(!String.IsNullOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _hash = util.GetParamValue(_context, "hash");
            if(!String.IsNullOrEmpty(_hash))
                obj.hash = (string)_hash;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameContentByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameContentByGameIdByPath()  {
        
            ResponseGameContentBool wrapper = new ResponseGameContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/set/by-game-id/by-path";
                        
            GameContent obj = new GameContent();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _extension = util.GetParamValue(_context, "extension");
            if(!String.IsNullOrEmpty(_extension))
                obj.extension = (string)_extension;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _filename = util.GetParamValue(_context, "filename");
            if(!String.IsNullOrEmpty(_filename))
                obj.filename = (string)_filename;
            
            string _source = util.GetParamValue(_context, "source");
            if(!String.IsNullOrEmpty(_source))
                obj.source = (string)_source;
            
            string _version = util.GetParamValue(_context, "version");
            if(!String.IsNullOrEmpty(_version))
                obj.version = (string)_version;
            
            string _platform = util.GetParamValue(_context, "platform");
            if(!String.IsNullOrEmpty(_platform))
                obj.platform = (string)_platform;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _path = util.GetParamValue(_context, "path");
            if(!String.IsNullOrEmpty(_path))
                obj.path = (string)_path;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _increment = util.GetParamValue(_context, "increment");
            if(!String.IsNullOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _hash = util.GetParamValue(_context, "hash");
            if(!String.IsNullOrEmpty(_hash))
                obj.hash = (string)_hash;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameContentByGameIdByPath(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameContentByGameIdByPathByVersion()  {
        
            ResponseGameContentBool wrapper = new ResponseGameContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/set/by-game-id/by-path/by-version";
                        
            GameContent obj = new GameContent();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _extension = util.GetParamValue(_context, "extension");
            if(!String.IsNullOrEmpty(_extension))
                obj.extension = (string)_extension;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _filename = util.GetParamValue(_context, "filename");
            if(!String.IsNullOrEmpty(_filename))
                obj.filename = (string)_filename;
            
            string _source = util.GetParamValue(_context, "source");
            if(!String.IsNullOrEmpty(_source))
                obj.source = (string)_source;
            
            string _version = util.GetParamValue(_context, "version");
            if(!String.IsNullOrEmpty(_version))
                obj.version = (string)_version;
            
            string _platform = util.GetParamValue(_context, "platform");
            if(!String.IsNullOrEmpty(_platform))
                obj.platform = (string)_platform;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _path = util.GetParamValue(_context, "path");
            if(!String.IsNullOrEmpty(_path))
                obj.path = (string)_path;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _increment = util.GetParamValue(_context, "increment");
            if(!String.IsNullOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _hash = util.GetParamValue(_context, "hash");
            if(!String.IsNullOrEmpty(_hash))
                obj.hash = (string)_hash;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameContentByGameIdByPathByVersion(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameContentByGameIdByPathByVersionByPlatformByIncrement()  {
        
            ResponseGameContentBool wrapper = new ResponseGameContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/set/by-game-id/by-path/by-version/by-platform/by-increment";
                        
            GameContent obj = new GameContent();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _extension = util.GetParamValue(_context, "extension");
            if(!String.IsNullOrEmpty(_extension))
                obj.extension = (string)_extension;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _filename = util.GetParamValue(_context, "filename");
            if(!String.IsNullOrEmpty(_filename))
                obj.filename = (string)_filename;
            
            string _source = util.GetParamValue(_context, "source");
            if(!String.IsNullOrEmpty(_source))
                obj.source = (string)_source;
            
            string _version = util.GetParamValue(_context, "version");
            if(!String.IsNullOrEmpty(_version))
                obj.version = (string)_version;
            
            string _platform = util.GetParamValue(_context, "platform");
            if(!String.IsNullOrEmpty(_platform))
                obj.platform = (string)_platform;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _path = util.GetParamValue(_context, "path");
            if(!String.IsNullOrEmpty(_path))
                obj.path = (string)_path;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _increment = util.GetParamValue(_context, "increment");
            if(!String.IsNullOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _hash = util.GetParamValue(_context, "hash");
            if(!String.IsNullOrEmpty(_hash))
                obj.hash = (string)_hash;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameContentByGameIdByPathByVersionByPlatformByIncrement(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameContentByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameContentBool wrapper = new ResponseGameContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/del/by-uuid";

            bool completed = api.DelGameContentByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameContentByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameContentBool wrapper = new ResponseGameContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/del/by-game-id";

            bool completed = api.DelGameContentByGameId(
                        
                _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameContentByGameIdByPath() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _path = (string)util.GetParamValue(_context, "path");

            ResponseGameContentBool wrapper = new ResponseGameContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/del/by-game-id/by-path";

            bool completed = api.DelGameContentByGameIdByPath(
                        
                _game_id
                , _path
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameContentByGameIdByPathByVersion() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _path = (string)util.GetParamValue(_context, "path");
            string _version = (string)util.GetParamValue(_context, "version");

            ResponseGameContentBool wrapper = new ResponseGameContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/del/by-game-id/by-path/by-version";

            bool completed = api.DelGameContentByGameIdByPathByVersion(
                        
                _game_id
                , _path
                , _version
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameContentByGameIdByPathByVersionByPlatformByIncrement() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _path = (string)util.GetParamValue(_context, "path");
            string _version = (string)util.GetParamValue(_context, "version");
            string _platform = (string)util.GetParamValue(_context, "platform");
            int _increment = int.Parse(util.GetParamValue(_context, "increment"));

            ResponseGameContentBool wrapper = new ResponseGameContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/del/by-game-id/by-path/by-version/by-platform/by-increment";

            bool completed = api.DelGameContentByGameIdByPathByVersionByPlatformByIncrement(
                        
                _game_id
                , _path
                , _version
                , _platform
                , _increment
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameContentList() {
        

            ResponseGameContentList wrapper = new ResponseGameContentList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/get";

            List<GameContent> objs = api.GetGameContentList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameContentListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameContentList wrapper = new ResponseGameContentList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/get/by-uuid";

            List<GameContent> objs = api.GetGameContentListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameContentListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameContentList wrapper = new ResponseGameContentList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/get/by-game-id";

            List<GameContent> objs = api.GetGameContentListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameContentListByGameIdByPath() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _path = (string)util.GetParamValue(_context, "path");

            ResponseGameContentList wrapper = new ResponseGameContentList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/get/by-game-id/by-path";

            List<GameContent> objs = api.GetGameContentListByGameIdByPath(
                _game_id
                , _path
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameContentListByGameIdByPathByVersion() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _path = (string)util.GetParamValue(_context, "path");
            string _version = (string)util.GetParamValue(_context, "version");

            ResponseGameContentList wrapper = new ResponseGameContentList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/get/by-game-id/by-path/by-version";

            List<GameContent> objs = api.GetGameContentListByGameIdByPathByVersion(
                _game_id
                , _path
                , _version
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameContentListByGameIdByPathByVersionByPlatformByIncrement() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _path = (string)util.GetParamValue(_context, "path");
            string _version = (string)util.GetParamValue(_context, "version");
            string _platform = (string)util.GetParamValue(_context, "platform");
            int _increment = int.Parse(util.GetParamValue(_context, "increment"));

            ResponseGameContentList wrapper = new ResponseGameContentList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-content/get/by-game-id/by-path/by-version/by-platform/by-increment";

            List<GameContent> objs = api.GetGameContentListByGameIdByPathByVersionByPlatformByIncrement(
                _game_id
                , _path
                , _version
                , _platform
                , _increment
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContent() {
        

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/count";

            int i = api.CountGameProfileContent(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContentByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/count/by-uuid";

            int i = api.CountGameProfileContentByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContentByGameIdByProfileId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/count/by-game-id/by-profile-id";

            int i = api.CountGameProfileContentByGameIdByProfileId(
                _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContentByGameIdByUsername() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _username = (string)util.GetParamValue(_context, "username");

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/count/by-game-id/by-username";

            int i = api.CountGameProfileContentByGameIdByUsername(
                _game_id
                , _username
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContentByUsername() {
        
            string _username = (string)util.GetParamValue(_context, "username");

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/count/by-username";

            int i = api.CountGameProfileContentByUsername(
                _username
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContentByGameIdByProfileIdByPath() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _path = (string)util.GetParamValue(_context, "path");

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/count/by-game-id/by-profile-id/by-path";

            int i = api.CountGameProfileContentByGameIdByProfileIdByPath(
                _game_id
                , _profile_id
                , _path
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContentByGameIdByProfileIdByPathByVersion() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _path = (string)util.GetParamValue(_context, "path");
            string _version = (string)util.GetParamValue(_context, "version");

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/count/by-game-id/by-profile-id/by-path/by-version";

            int i = api.CountGameProfileContentByGameIdByProfileIdByPathByVersion(
                _game_id
                , _profile_id
                , _path
                , _version
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContentByGameIdByProfileIdByPathByVersionByPlatformByIncrement() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _path = (string)util.GetParamValue(_context, "path");
            string _version = (string)util.GetParamValue(_context, "version");
            string _platform = (string)util.GetParamValue(_context, "platform");
            int _increment = int.Parse(util.GetParamValue(_context, "increment"));

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/count/by-game-id/by-profile-id/by-path/by-version/by-platform/by-increment";

            int i = api.CountGameProfileContentByGameIdByProfileIdByPathByVersionByPlatformByIncrement(
                _game_id
                , _profile_id
                , _path
                , _version
                , _platform
                , _increment
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContentByGameIdByUsernameByPath() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _username = (string)util.GetParamValue(_context, "username");
            string _path = (string)util.GetParamValue(_context, "path");

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/count/by-game-id/by-username/by-path";

            int i = api.CountGameProfileContentByGameIdByUsernameByPath(
                _game_id
                , _username
                , _path
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContentByGameIdByUsernameByPathByVersion() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _username = (string)util.GetParamValue(_context, "username");
            string _path = (string)util.GetParamValue(_context, "path");
            string _version = (string)util.GetParamValue(_context, "version");

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/count/by-game-id/by-username/by-path/by-version";

            int i = api.CountGameProfileContentByGameIdByUsernameByPathByVersion(
                _game_id
                , _username
                , _path
                , _version
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContentByGameIdByUsernameByPathByVersionByPlatformByIncrement() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _username = (string)util.GetParamValue(_context, "username");
            string _path = (string)util.GetParamValue(_context, "path");
            string _version = (string)util.GetParamValue(_context, "version");
            string _platform = (string)util.GetParamValue(_context, "platform");
            int _increment = int.Parse(util.GetParamValue(_context, "increment"));

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/count/by-game-id/by-username/by-path/by-version/by-platform/by-increment";

            int i = api.CountGameProfileContentByGameIdByUsernameByPathByVersionByPlatformByIncrement(
                _game_id
                , _username
                , _path
                , _version
                , _platform
                , _increment
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameProfileContentListByFilter()  {
        
            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameProfileContentResult result = api.BrowseGameProfileContentListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileContentByUuid()  {
        
            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/set/by-uuid";
                        
            GameProfileContent obj = new GameProfileContent();
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _increment = util.GetParamValue(_context, "increment");
            if(!String.IsNullOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _path = util.GetParamValue(_context, "path");
            if(!String.IsNullOrEmpty(_path))
                obj.path = (string)_path;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _platform = util.GetParamValue(_context, "platform");
            if(!String.IsNullOrEmpty(_platform))
                obj.platform = (string)_platform;
            
            string _filename = util.GetParamValue(_context, "filename");
            if(!String.IsNullOrEmpty(_filename))
                obj.filename = (string)_filename;
            
            string _source = util.GetParamValue(_context, "source");
            if(!String.IsNullOrEmpty(_source))
                obj.source = (string)_source;
            
            string _version = util.GetParamValue(_context, "version");
            if(!String.IsNullOrEmpty(_version))
                obj.version = (string)_version;
            
            string _game_network = util.GetParamValue(_context, "game_network");
            if(!String.IsNullOrEmpty(_game_network))
                obj.game_network = (string)_game_network;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _hash = util.GetParamValue(_context, "hash");
            if(!String.IsNullOrEmpty(_hash))
                obj.hash = (string)_hash;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _extension = util.GetParamValue(_context, "extension");
            if(!String.IsNullOrEmpty(_extension))
                obj.extension = (string)_extension;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            
            // get data
            wrapper.data = api.SetGameProfileContentByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileContentByGameIdByProfileId()  {
        
            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/set/by-game-id/by-profile-id";
                        
            GameProfileContent obj = new GameProfileContent();
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _increment = util.GetParamValue(_context, "increment");
            if(!String.IsNullOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _path = util.GetParamValue(_context, "path");
            if(!String.IsNullOrEmpty(_path))
                obj.path = (string)_path;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _platform = util.GetParamValue(_context, "platform");
            if(!String.IsNullOrEmpty(_platform))
                obj.platform = (string)_platform;
            
            string _filename = util.GetParamValue(_context, "filename");
            if(!String.IsNullOrEmpty(_filename))
                obj.filename = (string)_filename;
            
            string _source = util.GetParamValue(_context, "source");
            if(!String.IsNullOrEmpty(_source))
                obj.source = (string)_source;
            
            string _version = util.GetParamValue(_context, "version");
            if(!String.IsNullOrEmpty(_version))
                obj.version = (string)_version;
            
            string _game_network = util.GetParamValue(_context, "game_network");
            if(!String.IsNullOrEmpty(_game_network))
                obj.game_network = (string)_game_network;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _hash = util.GetParamValue(_context, "hash");
            if(!String.IsNullOrEmpty(_hash))
                obj.hash = (string)_hash;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _extension = util.GetParamValue(_context, "extension");
            if(!String.IsNullOrEmpty(_extension))
                obj.extension = (string)_extension;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            
            // get data
            wrapper.data = api.SetGameProfileContentByGameIdByProfileId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileContentByGameIdByUsername()  {
        
            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/set/by-game-id/by-username";
                        
            GameProfileContent obj = new GameProfileContent();
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _increment = util.GetParamValue(_context, "increment");
            if(!String.IsNullOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _path = util.GetParamValue(_context, "path");
            if(!String.IsNullOrEmpty(_path))
                obj.path = (string)_path;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _platform = util.GetParamValue(_context, "platform");
            if(!String.IsNullOrEmpty(_platform))
                obj.platform = (string)_platform;
            
            string _filename = util.GetParamValue(_context, "filename");
            if(!String.IsNullOrEmpty(_filename))
                obj.filename = (string)_filename;
            
            string _source = util.GetParamValue(_context, "source");
            if(!String.IsNullOrEmpty(_source))
                obj.source = (string)_source;
            
            string _version = util.GetParamValue(_context, "version");
            if(!String.IsNullOrEmpty(_version))
                obj.version = (string)_version;
            
            string _game_network = util.GetParamValue(_context, "game_network");
            if(!String.IsNullOrEmpty(_game_network))
                obj.game_network = (string)_game_network;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _hash = util.GetParamValue(_context, "hash");
            if(!String.IsNullOrEmpty(_hash))
                obj.hash = (string)_hash;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _extension = util.GetParamValue(_context, "extension");
            if(!String.IsNullOrEmpty(_extension))
                obj.extension = (string)_extension;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            
            // get data
            wrapper.data = api.SetGameProfileContentByGameIdByUsername(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileContentByUsername()  {
        
            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/set/by-username";
                        
            GameProfileContent obj = new GameProfileContent();
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _increment = util.GetParamValue(_context, "increment");
            if(!String.IsNullOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _path = util.GetParamValue(_context, "path");
            if(!String.IsNullOrEmpty(_path))
                obj.path = (string)_path;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _platform = util.GetParamValue(_context, "platform");
            if(!String.IsNullOrEmpty(_platform))
                obj.platform = (string)_platform;
            
            string _filename = util.GetParamValue(_context, "filename");
            if(!String.IsNullOrEmpty(_filename))
                obj.filename = (string)_filename;
            
            string _source = util.GetParamValue(_context, "source");
            if(!String.IsNullOrEmpty(_source))
                obj.source = (string)_source;
            
            string _version = util.GetParamValue(_context, "version");
            if(!String.IsNullOrEmpty(_version))
                obj.version = (string)_version;
            
            string _game_network = util.GetParamValue(_context, "game_network");
            if(!String.IsNullOrEmpty(_game_network))
                obj.game_network = (string)_game_network;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _hash = util.GetParamValue(_context, "hash");
            if(!String.IsNullOrEmpty(_hash))
                obj.hash = (string)_hash;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _extension = util.GetParamValue(_context, "extension");
            if(!String.IsNullOrEmpty(_extension))
                obj.extension = (string)_extension;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            
            // get data
            wrapper.data = api.SetGameProfileContentByUsername(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileContentByGameIdByProfileIdByPath()  {
        
            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/set/by-game-id/by-profile-id/by-path";
                        
            GameProfileContent obj = new GameProfileContent();
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _increment = util.GetParamValue(_context, "increment");
            if(!String.IsNullOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _path = util.GetParamValue(_context, "path");
            if(!String.IsNullOrEmpty(_path))
                obj.path = (string)_path;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _platform = util.GetParamValue(_context, "platform");
            if(!String.IsNullOrEmpty(_platform))
                obj.platform = (string)_platform;
            
            string _filename = util.GetParamValue(_context, "filename");
            if(!String.IsNullOrEmpty(_filename))
                obj.filename = (string)_filename;
            
            string _source = util.GetParamValue(_context, "source");
            if(!String.IsNullOrEmpty(_source))
                obj.source = (string)_source;
            
            string _version = util.GetParamValue(_context, "version");
            if(!String.IsNullOrEmpty(_version))
                obj.version = (string)_version;
            
            string _game_network = util.GetParamValue(_context, "game_network");
            if(!String.IsNullOrEmpty(_game_network))
                obj.game_network = (string)_game_network;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _hash = util.GetParamValue(_context, "hash");
            if(!String.IsNullOrEmpty(_hash))
                obj.hash = (string)_hash;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _extension = util.GetParamValue(_context, "extension");
            if(!String.IsNullOrEmpty(_extension))
                obj.extension = (string)_extension;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            
            // get data
            wrapper.data = api.SetGameProfileContentByGameIdByProfileIdByPath(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileContentByGameIdByProfileIdByPathByVersion()  {
        
            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/set/by-game-id/by-profile-id/by-path/by-version";
                        
            GameProfileContent obj = new GameProfileContent();
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _increment = util.GetParamValue(_context, "increment");
            if(!String.IsNullOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _path = util.GetParamValue(_context, "path");
            if(!String.IsNullOrEmpty(_path))
                obj.path = (string)_path;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _platform = util.GetParamValue(_context, "platform");
            if(!String.IsNullOrEmpty(_platform))
                obj.platform = (string)_platform;
            
            string _filename = util.GetParamValue(_context, "filename");
            if(!String.IsNullOrEmpty(_filename))
                obj.filename = (string)_filename;
            
            string _source = util.GetParamValue(_context, "source");
            if(!String.IsNullOrEmpty(_source))
                obj.source = (string)_source;
            
            string _version = util.GetParamValue(_context, "version");
            if(!String.IsNullOrEmpty(_version))
                obj.version = (string)_version;
            
            string _game_network = util.GetParamValue(_context, "game_network");
            if(!String.IsNullOrEmpty(_game_network))
                obj.game_network = (string)_game_network;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _hash = util.GetParamValue(_context, "hash");
            if(!String.IsNullOrEmpty(_hash))
                obj.hash = (string)_hash;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _extension = util.GetParamValue(_context, "extension");
            if(!String.IsNullOrEmpty(_extension))
                obj.extension = (string)_extension;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            
            // get data
            wrapper.data = api.SetGameProfileContentByGameIdByProfileIdByPathByVersion(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileContentByGameIdByProfileIdByPathByVersionByPlatformByIncrement()  {
        
            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/set/by-game-id/by-profile-id/by-path/by-version/by-platform/by-increment";
                        
            GameProfileContent obj = new GameProfileContent();
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _increment = util.GetParamValue(_context, "increment");
            if(!String.IsNullOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _path = util.GetParamValue(_context, "path");
            if(!String.IsNullOrEmpty(_path))
                obj.path = (string)_path;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _platform = util.GetParamValue(_context, "platform");
            if(!String.IsNullOrEmpty(_platform))
                obj.platform = (string)_platform;
            
            string _filename = util.GetParamValue(_context, "filename");
            if(!String.IsNullOrEmpty(_filename))
                obj.filename = (string)_filename;
            
            string _source = util.GetParamValue(_context, "source");
            if(!String.IsNullOrEmpty(_source))
                obj.source = (string)_source;
            
            string _version = util.GetParamValue(_context, "version");
            if(!String.IsNullOrEmpty(_version))
                obj.version = (string)_version;
            
            string _game_network = util.GetParamValue(_context, "game_network");
            if(!String.IsNullOrEmpty(_game_network))
                obj.game_network = (string)_game_network;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _hash = util.GetParamValue(_context, "hash");
            if(!String.IsNullOrEmpty(_hash))
                obj.hash = (string)_hash;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _extension = util.GetParamValue(_context, "extension");
            if(!String.IsNullOrEmpty(_extension))
                obj.extension = (string)_extension;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            
            // get data
            wrapper.data = api.SetGameProfileContentByGameIdByProfileIdByPathByVersionByPlatformByIncrement(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileContentByGameIdByUsernameByPath()  {
        
            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/set/by-game-id/by-username/by-path";
                        
            GameProfileContent obj = new GameProfileContent();
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _increment = util.GetParamValue(_context, "increment");
            if(!String.IsNullOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _path = util.GetParamValue(_context, "path");
            if(!String.IsNullOrEmpty(_path))
                obj.path = (string)_path;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _platform = util.GetParamValue(_context, "platform");
            if(!String.IsNullOrEmpty(_platform))
                obj.platform = (string)_platform;
            
            string _filename = util.GetParamValue(_context, "filename");
            if(!String.IsNullOrEmpty(_filename))
                obj.filename = (string)_filename;
            
            string _source = util.GetParamValue(_context, "source");
            if(!String.IsNullOrEmpty(_source))
                obj.source = (string)_source;
            
            string _version = util.GetParamValue(_context, "version");
            if(!String.IsNullOrEmpty(_version))
                obj.version = (string)_version;
            
            string _game_network = util.GetParamValue(_context, "game_network");
            if(!String.IsNullOrEmpty(_game_network))
                obj.game_network = (string)_game_network;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _hash = util.GetParamValue(_context, "hash");
            if(!String.IsNullOrEmpty(_hash))
                obj.hash = (string)_hash;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _extension = util.GetParamValue(_context, "extension");
            if(!String.IsNullOrEmpty(_extension))
                obj.extension = (string)_extension;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            
            // get data
            wrapper.data = api.SetGameProfileContentByGameIdByUsernameByPath(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileContentByGameIdByUsernameByPathByVersion()  {
        
            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/set/by-game-id/by-username/by-path/by-version";
                        
            GameProfileContent obj = new GameProfileContent();
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _increment = util.GetParamValue(_context, "increment");
            if(!String.IsNullOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _path = util.GetParamValue(_context, "path");
            if(!String.IsNullOrEmpty(_path))
                obj.path = (string)_path;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _platform = util.GetParamValue(_context, "platform");
            if(!String.IsNullOrEmpty(_platform))
                obj.platform = (string)_platform;
            
            string _filename = util.GetParamValue(_context, "filename");
            if(!String.IsNullOrEmpty(_filename))
                obj.filename = (string)_filename;
            
            string _source = util.GetParamValue(_context, "source");
            if(!String.IsNullOrEmpty(_source))
                obj.source = (string)_source;
            
            string _version = util.GetParamValue(_context, "version");
            if(!String.IsNullOrEmpty(_version))
                obj.version = (string)_version;
            
            string _game_network = util.GetParamValue(_context, "game_network");
            if(!String.IsNullOrEmpty(_game_network))
                obj.game_network = (string)_game_network;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _hash = util.GetParamValue(_context, "hash");
            if(!String.IsNullOrEmpty(_hash))
                obj.hash = (string)_hash;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _extension = util.GetParamValue(_context, "extension");
            if(!String.IsNullOrEmpty(_extension))
                obj.extension = (string)_extension;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            
            // get data
            wrapper.data = api.SetGameProfileContentByGameIdByUsernameByPathByVersion(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileContentByGameIdByUsernameByPathByVersionByPlatformByIncrement()  {
        
            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/set/by-game-id/by-username/by-path/by-version/by-platform/by-increment";
                        
            GameProfileContent obj = new GameProfileContent();
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _increment = util.GetParamValue(_context, "increment");
            if(!String.IsNullOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _path = util.GetParamValue(_context, "path");
            if(!String.IsNullOrEmpty(_path))
                obj.path = (string)_path;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _platform = util.GetParamValue(_context, "platform");
            if(!String.IsNullOrEmpty(_platform))
                obj.platform = (string)_platform;
            
            string _filename = util.GetParamValue(_context, "filename");
            if(!String.IsNullOrEmpty(_filename))
                obj.filename = (string)_filename;
            
            string _source = util.GetParamValue(_context, "source");
            if(!String.IsNullOrEmpty(_source))
                obj.source = (string)_source;
            
            string _version = util.GetParamValue(_context, "version");
            if(!String.IsNullOrEmpty(_version))
                obj.version = (string)_version;
            
            string _game_network = util.GetParamValue(_context, "game_network");
            if(!String.IsNullOrEmpty(_game_network))
                obj.game_network = (string)_game_network;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _hash = util.GetParamValue(_context, "hash");
            if(!String.IsNullOrEmpty(_hash))
                obj.hash = (string)_hash;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _extension = util.GetParamValue(_context, "extension");
            if(!String.IsNullOrEmpty(_extension))
                obj.extension = (string)_extension;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            
            // get data
            wrapper.data = api.SetGameProfileContentByGameIdByUsernameByPathByVersionByPlatformByIncrement(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileContentByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/del/by-uuid";

            bool completed = api.DelGameProfileContentByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileContentByGameIdByProfileId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/del/by-game-id/by-profile-id";

            bool completed = api.DelGameProfileContentByGameIdByProfileId(
                        
                _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileContentByGameIdByUsername() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _username = (string)util.GetParamValue(_context, "username");

            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/del/by-game-id/by-username";

            bool completed = api.DelGameProfileContentByGameIdByUsername(
                        
                _game_id
                , _username
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileContentByUsername() {
        
            string _username = (string)util.GetParamValue(_context, "username");

            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/del/by-username";

            bool completed = api.DelGameProfileContentByUsername(
                        
                _username
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileContentByGameIdByProfileIdByPath() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _path = (string)util.GetParamValue(_context, "path");

            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/del/by-game-id/by-profile-id/by-path";

            bool completed = api.DelGameProfileContentByGameIdByProfileIdByPath(
                        
                _game_id
                , _profile_id
                , _path
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileContentByGameIdByProfileIdByPathByVersion() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _path = (string)util.GetParamValue(_context, "path");
            string _version = (string)util.GetParamValue(_context, "version");

            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/del/by-game-id/by-profile-id/by-path/by-version";

            bool completed = api.DelGameProfileContentByGameIdByProfileIdByPathByVersion(
                        
                _game_id
                , _profile_id
                , _path
                , _version
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileContentByGameIdByProfileIdByPathByVersionByPlatformByIncrement() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _path = (string)util.GetParamValue(_context, "path");
            string _version = (string)util.GetParamValue(_context, "version");
            string _platform = (string)util.GetParamValue(_context, "platform");
            int _increment = int.Parse(util.GetParamValue(_context, "increment"));

            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/del/by-game-id/by-profile-id/by-path/by-version/by-platform/by-increment";

            bool completed = api.DelGameProfileContentByGameIdByProfileIdByPathByVersionByPlatformByIncrement(
                        
                _game_id
                , _profile_id
                , _path
                , _version
                , _platform
                , _increment
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileContentByGameIdByUsernameByPath() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _username = (string)util.GetParamValue(_context, "username");
            string _path = (string)util.GetParamValue(_context, "path");

            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/del/by-game-id/by-username/by-path";

            bool completed = api.DelGameProfileContentByGameIdByUsernameByPath(
                        
                _game_id
                , _username
                , _path
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileContentByGameIdByUsernameByPathByVersion() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _username = (string)util.GetParamValue(_context, "username");
            string _path = (string)util.GetParamValue(_context, "path");
            string _version = (string)util.GetParamValue(_context, "version");

            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/del/by-game-id/by-username/by-path/by-version";

            bool completed = api.DelGameProfileContentByGameIdByUsernameByPathByVersion(
                        
                _game_id
                , _username
                , _path
                , _version
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileContentByGameIdByUsernameByPathByVersionByPlatformByIncrement() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _username = (string)util.GetParamValue(_context, "username");
            string _path = (string)util.GetParamValue(_context, "path");
            string _version = (string)util.GetParamValue(_context, "version");
            string _platform = (string)util.GetParamValue(_context, "platform");
            int _increment = int.Parse(util.GetParamValue(_context, "increment"));

            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/del/by-game-id/by-username/by-path/by-version/by-platform/by-increment";

            bool completed = api.DelGameProfileContentByGameIdByUsernameByPathByVersionByPlatformByIncrement(
                        
                _game_id
                , _username
                , _path
                , _version
                , _platform
                , _increment
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentList() {
        

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/get";

            List<GameProfileContent> objs = api.GetGameProfileContentList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/get/by-uuid";

            List<GameProfileContent> objs = api.GetGameProfileContentListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentListByGameIdByProfileId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/get/by-game-id/by-profile-id";

            List<GameProfileContent> objs = api.GetGameProfileContentListByGameIdByProfileId(
                _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentListByGameIdByUsername() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _username = (string)util.GetParamValue(_context, "username");

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/get/by-game-id/by-username";

            List<GameProfileContent> objs = api.GetGameProfileContentListByGameIdByUsername(
                _game_id
                , _username
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentListByUsername() {
        
            string _username = (string)util.GetParamValue(_context, "username");

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/get/by-username";

            List<GameProfileContent> objs = api.GetGameProfileContentListByUsername(
                _username
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentListByGameIdByProfileIdByPath() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _path = (string)util.GetParamValue(_context, "path");

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/get/by-game-id/by-profile-id/by-path";

            List<GameProfileContent> objs = api.GetGameProfileContentListByGameIdByProfileIdByPath(
                _game_id
                , _profile_id
                , _path
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentListByGameIdByProfileIdByPathByVersion() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _path = (string)util.GetParamValue(_context, "path");
            string _version = (string)util.GetParamValue(_context, "version");

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/get/by-game-id/by-profile-id/by-path/by-version";

            List<GameProfileContent> objs = api.GetGameProfileContentListByGameIdByProfileIdByPathByVersion(
                _game_id
                , _profile_id
                , _path
                , _version
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentListByGameIdByProfileIdByPathByVersionByPlatformByIncrement() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _path = (string)util.GetParamValue(_context, "path");
            string _version = (string)util.GetParamValue(_context, "version");
            string _platform = (string)util.GetParamValue(_context, "platform");
            int _increment = int.Parse(util.GetParamValue(_context, "increment"));

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/get/by-game-id/by-profile-id/by-path/by-version/by-platform/by-increment";

            List<GameProfileContent> objs = api.GetGameProfileContentListByGameIdByProfileIdByPathByVersionByPlatformByIncrement(
                _game_id
                , _profile_id
                , _path
                , _version
                , _platform
                , _increment
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentListByGameIdByUsernameByPath() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _username = (string)util.GetParamValue(_context, "username");
            string _path = (string)util.GetParamValue(_context, "path");

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/get/by-game-id/by-username/by-path";

            List<GameProfileContent> objs = api.GetGameProfileContentListByGameIdByUsernameByPath(
                _game_id
                , _username
                , _path
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentListByGameIdByUsernameByPathByVersion() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _username = (string)util.GetParamValue(_context, "username");
            string _path = (string)util.GetParamValue(_context, "path");
            string _version = (string)util.GetParamValue(_context, "version");

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/get/by-game-id/by-username/by-path/by-version";

            List<GameProfileContent> objs = api.GetGameProfileContentListByGameIdByUsernameByPathByVersion(
                _game_id
                , _username
                , _path
                , _version
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentListByGameIdByUsernameByPathByVersionByPlatformByIncrement() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _username = (string)util.GetParamValue(_context, "username");
            string _path = (string)util.GetParamValue(_context, "path");
            string _version = (string)util.GetParamValue(_context, "version");
            string _platform = (string)util.GetParamValue(_context, "platform");
            int _increment = int.Parse(util.GetParamValue(_context, "increment"));

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-content/get/by-game-id/by-username/by-path/by-version/by-platform/by-increment";

            List<GameProfileContent> objs = api.GetGameProfileContentListByGameIdByUsernameByPathByVersionByPlatformByIncrement(
                _game_id
                , _username
                , _path
                , _version
                , _platform
                , _increment
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameApp() {
        

            ResponseGameAppInt wrapper = new ResponseGameAppInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-app/count";

            int i = api.CountGameApp(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAppByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameAppInt wrapper = new ResponseGameAppInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-app/count/by-uuid";

            int i = api.CountGameAppByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAppByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameAppInt wrapper = new ResponseGameAppInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-app/count/by-game-id";

            int i = api.CountGameAppByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAppByAppId() {
        
            string _app_id = (string)util.GetParamValue(_context, "app_id");

            ResponseGameAppInt wrapper = new ResponseGameAppInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-app/count/by-app-id";

            int i = api.CountGameAppByAppId(
                _app_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAppByGameIdByAppId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _app_id = (string)util.GetParamValue(_context, "app_id");

            ResponseGameAppInt wrapper = new ResponseGameAppInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-app/count/by-game-id/by-app-id";

            int i = api.CountGameAppByGameIdByAppId(
                _game_id
                , _app_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameAppListByFilter()  {
        
            ResponseGameAppList wrapper = new ResponseGameAppList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-app/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameAppResult result = api.BrowseGameAppListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameAppByUuid()  {
        
            ResponseGameAppBool wrapper = new ResponseGameAppBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-app/set/by-uuid";
                        
            GameApp obj = new GameApp();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _app_id = util.GetParamValue(_context, "app_id");
            if(!String.IsNullOrEmpty(_app_id))
                obj.app_id = (string)_app_id;
            
            
            // get data
            wrapper.data = api.SetGameAppByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameAppByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameAppBool wrapper = new ResponseGameAppBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-app/del/by-uuid";

            bool completed = api.DelGameAppByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAppList() {
        

            ResponseGameAppList wrapper = new ResponseGameAppList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-app/get";

            List<GameApp> objs = api.GetGameAppList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAppListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameAppList wrapper = new ResponseGameAppList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-app/get/by-uuid";

            List<GameApp> objs = api.GetGameAppListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAppListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameAppList wrapper = new ResponseGameAppList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-app/get/by-game-id";

            List<GameApp> objs = api.GetGameAppListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAppListByAppId() {
        
            string _app_id = (string)util.GetParamValue(_context, "app_id");

            ResponseGameAppList wrapper = new ResponseGameAppList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-app/get/by-app-id";

            List<GameApp> objs = api.GetGameAppListByAppId(
                _app_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAppListByGameIdByAppId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _app_id = (string)util.GetParamValue(_context, "app_id");

            ResponseGameAppList wrapper = new ResponseGameAppList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-app/get/by-game-id/by-app-id";

            List<GameApp> objs = api.GetGameAppListByGameIdByAppId(
                _game_id
                , _app_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameLocation() {
        

            ResponseProfileGameLocationInt wrapper = new ResponseProfileGameLocationInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-location/count";

            int i = api.CountProfileGameLocation(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameLocationByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileGameLocationInt wrapper = new ResponseProfileGameLocationInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-location/count/by-uuid";

            int i = api.CountProfileGameLocationByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameLocationByGameLocationId() {
        
            string _game_location_id = (string)util.GetParamValue(_context, "game_location_id");

            ResponseProfileGameLocationInt wrapper = new ResponseProfileGameLocationInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-location/count/by-game-location-id";

            int i = api.CountProfileGameLocationByGameLocationId(
                _game_location_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameLocationByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileGameLocationInt wrapper = new ResponseProfileGameLocationInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-location/count/by-profile-id";

            int i = api.CountProfileGameLocationByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameLocationByProfileIdByGameLocationId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_location_id = (string)util.GetParamValue(_context, "game_location_id");

            ResponseProfileGameLocationInt wrapper = new ResponseProfileGameLocationInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-location/count/by-profile-id/by-game-location-id";

            int i = api.CountProfileGameLocationByProfileIdByGameLocationId(
                _profile_id
                , _game_location_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseProfileGameLocationListByFilter()  {
        
            ResponseProfileGameLocationList wrapper = new ResponseProfileGameLocationList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-location/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            ProfileGameLocationResult result = api.BrowseProfileGameLocationListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileGameLocationByUuid()  {
        
            ResponseProfileGameLocationBool wrapper = new ResponseProfileGameLocationBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-location/set/by-uuid";
                        
            ProfileGameLocation obj = new ProfileGameLocation();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _game_location_id = util.GetParamValue(_context, "game_location_id");
            if(!String.IsNullOrEmpty(_game_location_id))
                obj.game_location_id = (string)_game_location_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _type_id = util.GetParamValue(_context, "type_id");
            if(!String.IsNullOrEmpty(_type_id))
                obj.type_id = (string)_type_id;
            
            
            // get data
            wrapper.data = api.SetProfileGameLocationByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileGameLocationByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileGameLocationBool wrapper = new ResponseProfileGameLocationBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-location/del/by-uuid";

            bool completed = api.DelProfileGameLocationByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameLocationList() {
        

            ResponseProfileGameLocationList wrapper = new ResponseProfileGameLocationList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-location/get";

            List<ProfileGameLocation> objs = api.GetProfileGameLocationList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameLocationListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileGameLocationList wrapper = new ResponseProfileGameLocationList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-location/get/by-uuid";

            List<ProfileGameLocation> objs = api.GetProfileGameLocationListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameLocationListByGameLocationId() {
        
            string _game_location_id = (string)util.GetParamValue(_context, "game_location_id");

            ResponseProfileGameLocationList wrapper = new ResponseProfileGameLocationList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-location/get/by-game-location-id";

            List<ProfileGameLocation> objs = api.GetProfileGameLocationListByGameLocationId(
                _game_location_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameLocationListByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileGameLocationList wrapper = new ResponseProfileGameLocationList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-location/get/by-profile-id";

            List<ProfileGameLocation> objs = api.GetProfileGameLocationListByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameLocationListByProfileIdByGameLocationId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_location_id = (string)util.GetParamValue(_context, "game_location_id");

            ResponseProfileGameLocationList wrapper = new ResponseProfileGameLocationList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-game-location/get/by-profile-id/by-game-location-id";

            List<ProfileGameLocation> objs = api.GetProfileGameLocationListByProfileIdByGameLocationId(
                _profile_id
                , _game_location_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGamePhoto() {
        

            ResponseGamePhotoInt wrapper = new ResponseGamePhotoInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/count";

            int i = api.CountGamePhoto(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGamePhotoByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGamePhotoInt wrapper = new ResponseGamePhotoInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/count/by-uuid";

            int i = api.CountGamePhotoByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGamePhotoByExternalId() {
        
            string _external_id = (string)util.GetParamValue(_context, "external_id");

            ResponseGamePhotoInt wrapper = new ResponseGamePhotoInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/count/by-external-id";

            int i = api.CountGamePhotoByExternalId(
                _external_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGamePhotoByUrl() {
        
            string _url = (string)util.GetParamValue(_context, "url");

            ResponseGamePhotoInt wrapper = new ResponseGamePhotoInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/count/by-url";

            int i = api.CountGamePhotoByUrl(
                _url
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGamePhotoByUrlByExternalId() {
        
            string _url = (string)util.GetParamValue(_context, "url");
            string _external_id = (string)util.GetParamValue(_context, "external_id");

            ResponseGamePhotoInt wrapper = new ResponseGamePhotoInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/count/by-url/by-external-id";

            int i = api.CountGamePhotoByUrlByExternalId(
                _url
                , _external_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGamePhotoByUuidByExternalId() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");
            string _external_id = (string)util.GetParamValue(_context, "external_id");

            ResponseGamePhotoInt wrapper = new ResponseGamePhotoInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/count/by-uuid/by-external-id";

            int i = api.CountGamePhotoByUuidByExternalId(
                _uuid
                , _external_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGamePhotoListByFilter()  {
        
            ResponseGamePhotoList wrapper = new ResponseGamePhotoList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GamePhotoResult result = api.BrowseGamePhotoListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGamePhotoByUuid()  {
        
            ResponseGamePhotoBool wrapper = new ResponseGamePhotoBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/set/by-uuid";
                        
            GamePhoto obj = new GamePhoto();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _external_id = util.GetParamValue(_context, "external_id");
            if(!String.IsNullOrEmpty(_external_id))
                obj.external_id = (string)_external_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGamePhotoByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGamePhotoByExternalId()  {
        
            ResponseGamePhotoBool wrapper = new ResponseGamePhotoBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/set/by-external-id";
                        
            GamePhoto obj = new GamePhoto();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _external_id = util.GetParamValue(_context, "external_id");
            if(!String.IsNullOrEmpty(_external_id))
                obj.external_id = (string)_external_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGamePhotoByExternalId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGamePhotoByUrl()  {
        
            ResponseGamePhotoBool wrapper = new ResponseGamePhotoBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/set/by-url";
                        
            GamePhoto obj = new GamePhoto();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _external_id = util.GetParamValue(_context, "external_id");
            if(!String.IsNullOrEmpty(_external_id))
                obj.external_id = (string)_external_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGamePhotoByUrl(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGamePhotoByUrlByExternalId()  {
        
            ResponseGamePhotoBool wrapper = new ResponseGamePhotoBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/set/by-url/by-external-id";
                        
            GamePhoto obj = new GamePhoto();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _external_id = util.GetParamValue(_context, "external_id");
            if(!String.IsNullOrEmpty(_external_id))
                obj.external_id = (string)_external_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGamePhotoByUrlByExternalId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGamePhotoByUuidByExternalId()  {
        
            ResponseGamePhotoBool wrapper = new ResponseGamePhotoBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/set/by-uuid/by-external-id";
                        
            GamePhoto obj = new GamePhoto();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _external_id = util.GetParamValue(_context, "external_id");
            if(!String.IsNullOrEmpty(_external_id))
                obj.external_id = (string)_external_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGamePhotoByUuidByExternalId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGamePhotoByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGamePhotoBool wrapper = new ResponseGamePhotoBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/del/by-uuid";

            bool completed = api.DelGamePhotoByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGamePhotoByExternalId() {
        
            string _external_id = (string)util.GetParamValue(_context, "external_id");

            ResponseGamePhotoBool wrapper = new ResponseGamePhotoBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/del/by-external-id";

            bool completed = api.DelGamePhotoByExternalId(
                        
                _external_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGamePhotoByUrl() {
        
            string _url = (string)util.GetParamValue(_context, "url");

            ResponseGamePhotoBool wrapper = new ResponseGamePhotoBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/del/by-url";

            bool completed = api.DelGamePhotoByUrl(
                        
                _url
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGamePhotoByUrlByExternalId() {
        
            string _url = (string)util.GetParamValue(_context, "url");
            string _external_id = (string)util.GetParamValue(_context, "external_id");

            ResponseGamePhotoBool wrapper = new ResponseGamePhotoBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/del/by-url/by-external-id";

            bool completed = api.DelGamePhotoByUrlByExternalId(
                        
                _url
                , _external_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGamePhotoByUuidByExternalId() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");
            string _external_id = (string)util.GetParamValue(_context, "external_id");

            ResponseGamePhotoBool wrapper = new ResponseGamePhotoBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/del/by-uuid/by-external-id";

            bool completed = api.DelGamePhotoByUuidByExternalId(
                        
                _uuid
                , _external_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGamePhotoList() {
        

            ResponseGamePhotoList wrapper = new ResponseGamePhotoList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/get";

            List<GamePhoto> objs = api.GetGamePhotoList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGamePhotoListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGamePhotoList wrapper = new ResponseGamePhotoList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/get/by-uuid";

            List<GamePhoto> objs = api.GetGamePhotoListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGamePhotoListByExternalId() {
        
            string _external_id = (string)util.GetParamValue(_context, "external_id");

            ResponseGamePhotoList wrapper = new ResponseGamePhotoList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/get/by-external-id";

            List<GamePhoto> objs = api.GetGamePhotoListByExternalId(
                _external_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGamePhotoListByUrl() {
        
            string _url = (string)util.GetParamValue(_context, "url");

            ResponseGamePhotoList wrapper = new ResponseGamePhotoList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/get/by-url";

            List<GamePhoto> objs = api.GetGamePhotoListByUrl(
                _url
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGamePhotoListByUrlByExternalId() {
        
            string _url = (string)util.GetParamValue(_context, "url");
            string _external_id = (string)util.GetParamValue(_context, "external_id");

            ResponseGamePhotoList wrapper = new ResponseGamePhotoList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/get/by-url/by-external-id";

            List<GamePhoto> objs = api.GetGamePhotoListByUrlByExternalId(
                _url
                , _external_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGamePhotoListByUuidByExternalId() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");
            string _external_id = (string)util.GetParamValue(_context, "external_id");

            ResponseGamePhotoList wrapper = new ResponseGamePhotoList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-photo/get/by-uuid/by-external-id";

            List<GamePhoto> objs = api.GetGamePhotoListByUuidByExternalId(
                _uuid
                , _external_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameVideo() {
        

            ResponseGameVideoInt wrapper = new ResponseGameVideoInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/count";

            int i = api.CountGameVideo(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameVideoByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameVideoInt wrapper = new ResponseGameVideoInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/count/by-uuid";

            int i = api.CountGameVideoByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameVideoByExternalId() {
        
            string _external_id = (string)util.GetParamValue(_context, "external_id");

            ResponseGameVideoInt wrapper = new ResponseGameVideoInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/count/by-external-id";

            int i = api.CountGameVideoByExternalId(
                _external_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameVideoByUrl() {
        
            string _url = (string)util.GetParamValue(_context, "url");

            ResponseGameVideoInt wrapper = new ResponseGameVideoInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/count/by-url";

            int i = api.CountGameVideoByUrl(
                _url
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameVideoByUrlByExternalId() {
        
            string _url = (string)util.GetParamValue(_context, "url");
            string _external_id = (string)util.GetParamValue(_context, "external_id");

            ResponseGameVideoInt wrapper = new ResponseGameVideoInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/count/by-url/by-external-id";

            int i = api.CountGameVideoByUrlByExternalId(
                _url
                , _external_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameVideoByUuidByExternalId() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");
            string _external_id = (string)util.GetParamValue(_context, "external_id");

            ResponseGameVideoInt wrapper = new ResponseGameVideoInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/count/by-uuid/by-external-id";

            int i = api.CountGameVideoByUuidByExternalId(
                _uuid
                , _external_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameVideoListByFilter()  {
        
            ResponseGameVideoList wrapper = new ResponseGameVideoList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameVideoResult result = api.BrowseGameVideoListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameVideoByUuid()  {
        
            ResponseGameVideoBool wrapper = new ResponseGameVideoBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/set/by-uuid";
                        
            GameVideo obj = new GameVideo();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _external_id = util.GetParamValue(_context, "external_id");
            if(!String.IsNullOrEmpty(_external_id))
                obj.external_id = (string)_external_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameVideoByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameVideoByExternalId()  {
        
            ResponseGameVideoBool wrapper = new ResponseGameVideoBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/set/by-external-id";
                        
            GameVideo obj = new GameVideo();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _external_id = util.GetParamValue(_context, "external_id");
            if(!String.IsNullOrEmpty(_external_id))
                obj.external_id = (string)_external_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameVideoByExternalId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameVideoByUrl()  {
        
            ResponseGameVideoBool wrapper = new ResponseGameVideoBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/set/by-url";
                        
            GameVideo obj = new GameVideo();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _external_id = util.GetParamValue(_context, "external_id");
            if(!String.IsNullOrEmpty(_external_id))
                obj.external_id = (string)_external_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameVideoByUrl(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameVideoByUrlByExternalId()  {
        
            ResponseGameVideoBool wrapper = new ResponseGameVideoBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/set/by-url/by-external-id";
                        
            GameVideo obj = new GameVideo();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _external_id = util.GetParamValue(_context, "external_id");
            if(!String.IsNullOrEmpty(_external_id))
                obj.external_id = (string)_external_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameVideoByUrlByExternalId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameVideoByUuidByExternalId()  {
        
            ResponseGameVideoBool wrapper = new ResponseGameVideoBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/set/by-uuid/by-external-id";
                        
            GameVideo obj = new GameVideo();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _external_id = util.GetParamValue(_context, "external_id");
            if(!String.IsNullOrEmpty(_external_id))
                obj.external_id = (string)_external_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameVideoByUuidByExternalId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameVideoByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameVideoBool wrapper = new ResponseGameVideoBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/del/by-uuid";

            bool completed = api.DelGameVideoByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameVideoByExternalId() {
        
            string _external_id = (string)util.GetParamValue(_context, "external_id");

            ResponseGameVideoBool wrapper = new ResponseGameVideoBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/del/by-external-id";

            bool completed = api.DelGameVideoByExternalId(
                        
                _external_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameVideoByUrl() {
        
            string _url = (string)util.GetParamValue(_context, "url");

            ResponseGameVideoBool wrapper = new ResponseGameVideoBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/del/by-url";

            bool completed = api.DelGameVideoByUrl(
                        
                _url
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameVideoByUrlByExternalId() {
        
            string _url = (string)util.GetParamValue(_context, "url");
            string _external_id = (string)util.GetParamValue(_context, "external_id");

            ResponseGameVideoBool wrapper = new ResponseGameVideoBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/del/by-url/by-external-id";

            bool completed = api.DelGameVideoByUrlByExternalId(
                        
                _url
                , _external_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameVideoByUuidByExternalId() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");
            string _external_id = (string)util.GetParamValue(_context, "external_id");

            ResponseGameVideoBool wrapper = new ResponseGameVideoBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/del/by-uuid/by-external-id";

            bool completed = api.DelGameVideoByUuidByExternalId(
                        
                _uuid
                , _external_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameVideoList() {
        

            ResponseGameVideoList wrapper = new ResponseGameVideoList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/get";

            List<GameVideo> objs = api.GetGameVideoList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameVideoListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameVideoList wrapper = new ResponseGameVideoList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/get/by-uuid";

            List<GameVideo> objs = api.GetGameVideoListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameVideoListByExternalId() {
        
            string _external_id = (string)util.GetParamValue(_context, "external_id");

            ResponseGameVideoList wrapper = new ResponseGameVideoList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/get/by-external-id";

            List<GameVideo> objs = api.GetGameVideoListByExternalId(
                _external_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameVideoListByUrl() {
        
            string _url = (string)util.GetParamValue(_context, "url");

            ResponseGameVideoList wrapper = new ResponseGameVideoList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/get/by-url";

            List<GameVideo> objs = api.GetGameVideoListByUrl(
                _url
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameVideoListByUrlByExternalId() {
        
            string _url = (string)util.GetParamValue(_context, "url");
            string _external_id = (string)util.GetParamValue(_context, "external_id");

            ResponseGameVideoList wrapper = new ResponseGameVideoList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/get/by-url/by-external-id";

            List<GameVideo> objs = api.GetGameVideoListByUrlByExternalId(
                _url
                , _external_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameVideoListByUuidByExternalId() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");
            string _external_id = (string)util.GetParamValue(_context, "external_id");

            ResponseGameVideoList wrapper = new ResponseGameVideoList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-video/get/by-uuid/by-external-id";

            List<GameVideo> objs = api.GetGameVideoListByUuidByExternalId(
                _uuid
                , _external_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItem() {
        

            ResponseGameRpgItemInt wrapper = new ResponseGameRpgItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/count";

            int i = api.CountGameRpgItem(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameRpgItemInt wrapper = new ResponseGameRpgItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/count/by-uuid";

            int i = api.CountGameRpgItemByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemInt wrapper = new ResponseGameRpgItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/count/by-game-id";

            int i = api.CountGameRpgItemByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemByUrl() {
        
            string _url = (string)util.GetParamValue(_context, "url");

            ResponseGameRpgItemInt wrapper = new ResponseGameRpgItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/count/by-url";

            int i = api.CountGameRpgItemByUrl(
                _url
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemByUrlByGameId() {
        
            string _url = (string)util.GetParamValue(_context, "url");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemInt wrapper = new ResponseGameRpgItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/count/by-url/by-game-id";

            int i = api.CountGameRpgItemByUrlByGameId(
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemByUuidByGameId() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemInt wrapper = new ResponseGameRpgItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/count/by-uuid/by-game-id";

            int i = api.CountGameRpgItemByUuidByGameId(
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameRpgItemListByFilter()  {
        
            ResponseGameRpgItemList wrapper = new ResponseGameRpgItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameRpgItemResult result = api.BrowseGameRpgItemListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemByUuid()  {
        
            ResponseGameRpgItemBool wrapper = new ResponseGameRpgItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/set/by-uuid";
                        
            GameRpgItem obj = new GameRpgItem();
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _game_defense = util.GetParamValue(_context, "game_defense");
            if(!String.IsNullOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _game_attack = util.GetParamValue(_context, "game_attack");
            if(!String.IsNullOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _game_health = util.GetParamValue(_context, "game_health");
            if(!String.IsNullOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _game_energy = util.GetParamValue(_context, "game_energy");
            if(!String.IsNullOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "game_price");
            if(!String.IsNullOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "game_type");
            if(!String.IsNullOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "game_skill");
            if(!String.IsNullOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_data = util.GetParamValue(_context, "game_data");
            if(!String.IsNullOrEmpty(_game_data))
                obj.game_data = (string)_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemByGameId()  {
        
            ResponseGameRpgItemBool wrapper = new ResponseGameRpgItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/set/by-game-id";
                        
            GameRpgItem obj = new GameRpgItem();
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _game_defense = util.GetParamValue(_context, "game_defense");
            if(!String.IsNullOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _game_attack = util.GetParamValue(_context, "game_attack");
            if(!String.IsNullOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _game_health = util.GetParamValue(_context, "game_health");
            if(!String.IsNullOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _game_energy = util.GetParamValue(_context, "game_energy");
            if(!String.IsNullOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "game_price");
            if(!String.IsNullOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "game_type");
            if(!String.IsNullOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "game_skill");
            if(!String.IsNullOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_data = util.GetParamValue(_context, "game_data");
            if(!String.IsNullOrEmpty(_game_data))
                obj.game_data = (string)_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemByUrl()  {
        
            ResponseGameRpgItemBool wrapper = new ResponseGameRpgItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/set/by-url";
                        
            GameRpgItem obj = new GameRpgItem();
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _game_defense = util.GetParamValue(_context, "game_defense");
            if(!String.IsNullOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _game_attack = util.GetParamValue(_context, "game_attack");
            if(!String.IsNullOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _game_health = util.GetParamValue(_context, "game_health");
            if(!String.IsNullOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _game_energy = util.GetParamValue(_context, "game_energy");
            if(!String.IsNullOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "game_price");
            if(!String.IsNullOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "game_type");
            if(!String.IsNullOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "game_skill");
            if(!String.IsNullOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_data = util.GetParamValue(_context, "game_data");
            if(!String.IsNullOrEmpty(_game_data))
                obj.game_data = (string)_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemByUrl(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemByUrlByGameId()  {
        
            ResponseGameRpgItemBool wrapper = new ResponseGameRpgItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/set/by-url/by-game-id";
                        
            GameRpgItem obj = new GameRpgItem();
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _game_defense = util.GetParamValue(_context, "game_defense");
            if(!String.IsNullOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _game_attack = util.GetParamValue(_context, "game_attack");
            if(!String.IsNullOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _game_health = util.GetParamValue(_context, "game_health");
            if(!String.IsNullOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _game_energy = util.GetParamValue(_context, "game_energy");
            if(!String.IsNullOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "game_price");
            if(!String.IsNullOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "game_type");
            if(!String.IsNullOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "game_skill");
            if(!String.IsNullOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_data = util.GetParamValue(_context, "game_data");
            if(!String.IsNullOrEmpty(_game_data))
                obj.game_data = (string)_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemByUrlByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemByUuidByGameId()  {
        
            ResponseGameRpgItemBool wrapper = new ResponseGameRpgItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/set/by-uuid/by-game-id";
                        
            GameRpgItem obj = new GameRpgItem();
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _game_defense = util.GetParamValue(_context, "game_defense");
            if(!String.IsNullOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _game_attack = util.GetParamValue(_context, "game_attack");
            if(!String.IsNullOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _game_health = util.GetParamValue(_context, "game_health");
            if(!String.IsNullOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _game_energy = util.GetParamValue(_context, "game_energy");
            if(!String.IsNullOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "game_price");
            if(!String.IsNullOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "game_type");
            if(!String.IsNullOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "game_skill");
            if(!String.IsNullOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_data = util.GetParamValue(_context, "game_data");
            if(!String.IsNullOrEmpty(_game_data))
                obj.game_data = (string)_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemByUuidByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameRpgItemBool wrapper = new ResponseGameRpgItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/del/by-uuid";

            bool completed = api.DelGameRpgItemByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemBool wrapper = new ResponseGameRpgItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/del/by-game-id";

            bool completed = api.DelGameRpgItemByGameId(
                        
                _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemByUrl() {
        
            string _url = (string)util.GetParamValue(_context, "url");

            ResponseGameRpgItemBool wrapper = new ResponseGameRpgItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/del/by-url";

            bool completed = api.DelGameRpgItemByUrl(
                        
                _url
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemByUrlByGameId() {
        
            string _url = (string)util.GetParamValue(_context, "url");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemBool wrapper = new ResponseGameRpgItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/del/by-url/by-game-id";

            bool completed = api.DelGameRpgItemByUrlByGameId(
                        
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemByUuidByGameId() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemBool wrapper = new ResponseGameRpgItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/del/by-uuid/by-game-id";

            bool completed = api.DelGameRpgItemByUuidByGameId(
                        
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemList() {
        

            ResponseGameRpgItemList wrapper = new ResponseGameRpgItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/get";

            List<GameRpgItem> objs = api.GetGameRpgItemList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameRpgItemList wrapper = new ResponseGameRpgItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/get/by-uuid";

            List<GameRpgItem> objs = api.GetGameRpgItemListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemList wrapper = new ResponseGameRpgItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/get/by-game-id";

            List<GameRpgItem> objs = api.GetGameRpgItemListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemListByUrl() {
        
            string _url = (string)util.GetParamValue(_context, "url");

            ResponseGameRpgItemList wrapper = new ResponseGameRpgItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/get/by-url";

            List<GameRpgItem> objs = api.GetGameRpgItemListByUrl(
                _url
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemListByUrlByGameId() {
        
            string _url = (string)util.GetParamValue(_context, "url");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemList wrapper = new ResponseGameRpgItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/get/by-url/by-game-id";

            List<GameRpgItem> objs = api.GetGameRpgItemListByUrlByGameId(
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemListByUuidByGameId() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemList wrapper = new ResponseGameRpgItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item/get/by-uuid/by-game-id";

            List<GameRpgItem> objs = api.GetGameRpgItemListByUuidByGameId(
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemWeapon() {
        

            ResponseGameRpgItemWeaponInt wrapper = new ResponseGameRpgItemWeaponInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/count";

            int i = api.CountGameRpgItemWeapon(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemWeaponByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameRpgItemWeaponInt wrapper = new ResponseGameRpgItemWeaponInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/count/by-uuid";

            int i = api.CountGameRpgItemWeaponByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemWeaponByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemWeaponInt wrapper = new ResponseGameRpgItemWeaponInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/count/by-game-id";

            int i = api.CountGameRpgItemWeaponByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemWeaponByUrl() {
        
            string _url = (string)util.GetParamValue(_context, "url");

            ResponseGameRpgItemWeaponInt wrapper = new ResponseGameRpgItemWeaponInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/count/by-url";

            int i = api.CountGameRpgItemWeaponByUrl(
                _url
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemWeaponByUrlByGameId() {
        
            string _url = (string)util.GetParamValue(_context, "url");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemWeaponInt wrapper = new ResponseGameRpgItemWeaponInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/count/by-url/by-game-id";

            int i = api.CountGameRpgItemWeaponByUrlByGameId(
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemWeaponByUuidByGameId() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemWeaponInt wrapper = new ResponseGameRpgItemWeaponInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/count/by-uuid/by-game-id";

            int i = api.CountGameRpgItemWeaponByUuidByGameId(
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameRpgItemWeaponListByFilter()  {
        
            ResponseGameRpgItemWeaponList wrapper = new ResponseGameRpgItemWeaponList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameRpgItemWeaponResult result = api.BrowseGameRpgItemWeaponListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemWeaponByUuid()  {
        
            ResponseGameRpgItemWeaponBool wrapper = new ResponseGameRpgItemWeaponBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/set/by-uuid";
                        
            GameRpgItemWeapon obj = new GameRpgItemWeapon();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _game_defense = util.GetParamValue(_context, "game_defense");
            if(!String.IsNullOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _game_attack = util.GetParamValue(_context, "game_attack");
            if(!String.IsNullOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "game_price");
            if(!String.IsNullOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "game_type");
            if(!String.IsNullOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "game_skill");
            if(!String.IsNullOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _game_health = util.GetParamValue(_context, "game_health");
            if(!String.IsNullOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_energy = util.GetParamValue(_context, "game_energy");
            if(!String.IsNullOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _game_data = util.GetParamValue(_context, "game_data");
            if(!String.IsNullOrEmpty(_game_data))
                obj.game_data = (string)_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemWeaponByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemWeaponByGameId()  {
        
            ResponseGameRpgItemWeaponBool wrapper = new ResponseGameRpgItemWeaponBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/set/by-game-id";
                        
            GameRpgItemWeapon obj = new GameRpgItemWeapon();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _game_defense = util.GetParamValue(_context, "game_defense");
            if(!String.IsNullOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _game_attack = util.GetParamValue(_context, "game_attack");
            if(!String.IsNullOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "game_price");
            if(!String.IsNullOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "game_type");
            if(!String.IsNullOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "game_skill");
            if(!String.IsNullOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _game_health = util.GetParamValue(_context, "game_health");
            if(!String.IsNullOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_energy = util.GetParamValue(_context, "game_energy");
            if(!String.IsNullOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _game_data = util.GetParamValue(_context, "game_data");
            if(!String.IsNullOrEmpty(_game_data))
                obj.game_data = (string)_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemWeaponByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemWeaponByUrl()  {
        
            ResponseGameRpgItemWeaponBool wrapper = new ResponseGameRpgItemWeaponBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/set/by-url";
                        
            GameRpgItemWeapon obj = new GameRpgItemWeapon();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _game_defense = util.GetParamValue(_context, "game_defense");
            if(!String.IsNullOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _game_attack = util.GetParamValue(_context, "game_attack");
            if(!String.IsNullOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "game_price");
            if(!String.IsNullOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "game_type");
            if(!String.IsNullOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "game_skill");
            if(!String.IsNullOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _game_health = util.GetParamValue(_context, "game_health");
            if(!String.IsNullOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_energy = util.GetParamValue(_context, "game_energy");
            if(!String.IsNullOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _game_data = util.GetParamValue(_context, "game_data");
            if(!String.IsNullOrEmpty(_game_data))
                obj.game_data = (string)_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemWeaponByUrl(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemWeaponByUrlByGameId()  {
        
            ResponseGameRpgItemWeaponBool wrapper = new ResponseGameRpgItemWeaponBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/set/by-url/by-game-id";
                        
            GameRpgItemWeapon obj = new GameRpgItemWeapon();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _game_defense = util.GetParamValue(_context, "game_defense");
            if(!String.IsNullOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _game_attack = util.GetParamValue(_context, "game_attack");
            if(!String.IsNullOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "game_price");
            if(!String.IsNullOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "game_type");
            if(!String.IsNullOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "game_skill");
            if(!String.IsNullOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _game_health = util.GetParamValue(_context, "game_health");
            if(!String.IsNullOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_energy = util.GetParamValue(_context, "game_energy");
            if(!String.IsNullOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _game_data = util.GetParamValue(_context, "game_data");
            if(!String.IsNullOrEmpty(_game_data))
                obj.game_data = (string)_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemWeaponByUrlByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemWeaponByUuidByGameId()  {
        
            ResponseGameRpgItemWeaponBool wrapper = new ResponseGameRpgItemWeaponBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/set/by-uuid/by-game-id";
                        
            GameRpgItemWeapon obj = new GameRpgItemWeapon();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _game_defense = util.GetParamValue(_context, "game_defense");
            if(!String.IsNullOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _game_attack = util.GetParamValue(_context, "game_attack");
            if(!String.IsNullOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "game_price");
            if(!String.IsNullOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "game_type");
            if(!String.IsNullOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "game_skill");
            if(!String.IsNullOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _game_health = util.GetParamValue(_context, "game_health");
            if(!String.IsNullOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_energy = util.GetParamValue(_context, "game_energy");
            if(!String.IsNullOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _game_data = util.GetParamValue(_context, "game_data");
            if(!String.IsNullOrEmpty(_game_data))
                obj.game_data = (string)_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemWeaponByUuidByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemWeaponByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameRpgItemWeaponBool wrapper = new ResponseGameRpgItemWeaponBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/del/by-uuid";

            bool completed = api.DelGameRpgItemWeaponByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemWeaponByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemWeaponBool wrapper = new ResponseGameRpgItemWeaponBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/del/by-game-id";

            bool completed = api.DelGameRpgItemWeaponByGameId(
                        
                _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemWeaponByUrl() {
        
            string _url = (string)util.GetParamValue(_context, "url");

            ResponseGameRpgItemWeaponBool wrapper = new ResponseGameRpgItemWeaponBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/del/by-url";

            bool completed = api.DelGameRpgItemWeaponByUrl(
                        
                _url
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemWeaponByUrlByGameId() {
        
            string _url = (string)util.GetParamValue(_context, "url");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemWeaponBool wrapper = new ResponseGameRpgItemWeaponBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/del/by-url/by-game-id";

            bool completed = api.DelGameRpgItemWeaponByUrlByGameId(
                        
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemWeaponByUuidByGameId() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemWeaponBool wrapper = new ResponseGameRpgItemWeaponBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/del/by-uuid/by-game-id";

            bool completed = api.DelGameRpgItemWeaponByUuidByGameId(
                        
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemWeaponList() {
        

            ResponseGameRpgItemWeaponList wrapper = new ResponseGameRpgItemWeaponList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/get";

            List<GameRpgItemWeapon> objs = api.GetGameRpgItemWeaponList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemWeaponListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameRpgItemWeaponList wrapper = new ResponseGameRpgItemWeaponList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/get/by-uuid";

            List<GameRpgItemWeapon> objs = api.GetGameRpgItemWeaponListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemWeaponListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemWeaponList wrapper = new ResponseGameRpgItemWeaponList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/get/by-game-id";

            List<GameRpgItemWeapon> objs = api.GetGameRpgItemWeaponListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemWeaponListByUrl() {
        
            string _url = (string)util.GetParamValue(_context, "url");

            ResponseGameRpgItemWeaponList wrapper = new ResponseGameRpgItemWeaponList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/get/by-url";

            List<GameRpgItemWeapon> objs = api.GetGameRpgItemWeaponListByUrl(
                _url
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemWeaponListByUrlByGameId() {
        
            string _url = (string)util.GetParamValue(_context, "url");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemWeaponList wrapper = new ResponseGameRpgItemWeaponList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/get/by-url/by-game-id";

            List<GameRpgItemWeapon> objs = api.GetGameRpgItemWeaponListByUrlByGameId(
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemWeaponListByUuidByGameId() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemWeaponList wrapper = new ResponseGameRpgItemWeaponList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-weapon/get/by-uuid/by-game-id";

            List<GameRpgItemWeapon> objs = api.GetGameRpgItemWeaponListByUuidByGameId(
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemSkill() {
        

            ResponseGameRpgItemSkillInt wrapper = new ResponseGameRpgItemSkillInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/count";

            int i = api.CountGameRpgItemSkill(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemSkillByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameRpgItemSkillInt wrapper = new ResponseGameRpgItemSkillInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/count/by-uuid";

            int i = api.CountGameRpgItemSkillByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemSkillByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemSkillInt wrapper = new ResponseGameRpgItemSkillInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/count/by-game-id";

            int i = api.CountGameRpgItemSkillByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemSkillByUrl() {
        
            string _url = (string)util.GetParamValue(_context, "url");

            ResponseGameRpgItemSkillInt wrapper = new ResponseGameRpgItemSkillInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/count/by-url";

            int i = api.CountGameRpgItemSkillByUrl(
                _url
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemSkillByUrlByGameId() {
        
            string _url = (string)util.GetParamValue(_context, "url");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemSkillInt wrapper = new ResponseGameRpgItemSkillInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/count/by-url/by-game-id";

            int i = api.CountGameRpgItemSkillByUrlByGameId(
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemSkillByUuidByGameId() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemSkillInt wrapper = new ResponseGameRpgItemSkillInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/count/by-uuid/by-game-id";

            int i = api.CountGameRpgItemSkillByUuidByGameId(
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameRpgItemSkillListByFilter()  {
        
            ResponseGameRpgItemSkillList wrapper = new ResponseGameRpgItemSkillList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameRpgItemSkillResult result = api.BrowseGameRpgItemSkillListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemSkillByUuid()  {
        
            ResponseGameRpgItemSkillBool wrapper = new ResponseGameRpgItemSkillBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/set/by-uuid";
                        
            GameRpgItemSkill obj = new GameRpgItemSkill();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _game_defense = util.GetParamValue(_context, "game_defense");
            if(!String.IsNullOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _game_attack = util.GetParamValue(_context, "game_attack");
            if(!String.IsNullOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "game_price");
            if(!String.IsNullOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "game_type");
            if(!String.IsNullOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "game_skill");
            if(!String.IsNullOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _game_health = util.GetParamValue(_context, "game_health");
            if(!String.IsNullOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_energy = util.GetParamValue(_context, "game_energy");
            if(!String.IsNullOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _game_data = util.GetParamValue(_context, "game_data");
            if(!String.IsNullOrEmpty(_game_data))
                obj.game_data = (string)_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemSkillByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemSkillByGameId()  {
        
            ResponseGameRpgItemSkillBool wrapper = new ResponseGameRpgItemSkillBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/set/by-game-id";
                        
            GameRpgItemSkill obj = new GameRpgItemSkill();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _game_defense = util.GetParamValue(_context, "game_defense");
            if(!String.IsNullOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _game_attack = util.GetParamValue(_context, "game_attack");
            if(!String.IsNullOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "game_price");
            if(!String.IsNullOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "game_type");
            if(!String.IsNullOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "game_skill");
            if(!String.IsNullOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _game_health = util.GetParamValue(_context, "game_health");
            if(!String.IsNullOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_energy = util.GetParamValue(_context, "game_energy");
            if(!String.IsNullOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _game_data = util.GetParamValue(_context, "game_data");
            if(!String.IsNullOrEmpty(_game_data))
                obj.game_data = (string)_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemSkillByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemSkillByUrl()  {
        
            ResponseGameRpgItemSkillBool wrapper = new ResponseGameRpgItemSkillBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/set/by-url";
                        
            GameRpgItemSkill obj = new GameRpgItemSkill();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _game_defense = util.GetParamValue(_context, "game_defense");
            if(!String.IsNullOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _game_attack = util.GetParamValue(_context, "game_attack");
            if(!String.IsNullOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "game_price");
            if(!String.IsNullOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "game_type");
            if(!String.IsNullOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "game_skill");
            if(!String.IsNullOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _game_health = util.GetParamValue(_context, "game_health");
            if(!String.IsNullOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_energy = util.GetParamValue(_context, "game_energy");
            if(!String.IsNullOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _game_data = util.GetParamValue(_context, "game_data");
            if(!String.IsNullOrEmpty(_game_data))
                obj.game_data = (string)_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemSkillByUrl(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemSkillByUrlByGameId()  {
        
            ResponseGameRpgItemSkillBool wrapper = new ResponseGameRpgItemSkillBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/set/by-url/by-game-id";
                        
            GameRpgItemSkill obj = new GameRpgItemSkill();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _game_defense = util.GetParamValue(_context, "game_defense");
            if(!String.IsNullOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _game_attack = util.GetParamValue(_context, "game_attack");
            if(!String.IsNullOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "game_price");
            if(!String.IsNullOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "game_type");
            if(!String.IsNullOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "game_skill");
            if(!String.IsNullOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _game_health = util.GetParamValue(_context, "game_health");
            if(!String.IsNullOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_energy = util.GetParamValue(_context, "game_energy");
            if(!String.IsNullOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _game_data = util.GetParamValue(_context, "game_data");
            if(!String.IsNullOrEmpty(_game_data))
                obj.game_data = (string)_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemSkillByUrlByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemSkillByUuidByGameId()  {
        
            ResponseGameRpgItemSkillBool wrapper = new ResponseGameRpgItemSkillBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/set/by-uuid/by-game-id";
                        
            GameRpgItemSkill obj = new GameRpgItemSkill();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "third_party_oembed");
            if(!String.IsNullOrEmpty(_third_party_oembed))
                obj.third_party_oembed = (string)_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _game_defense = util.GetParamValue(_context, "game_defense");
            if(!String.IsNullOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "third_party_url");
            if(!String.IsNullOrEmpty(_third_party_url))
                obj.third_party_url = (string)_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "third_party_id");
            if(!String.IsNullOrEmpty(_third_party_id))
                obj.third_party_id = (string)_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "content_type");
            if(!String.IsNullOrEmpty(_content_type))
                obj.content_type = (string)_content_type;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _game_attack = util.GetParamValue(_context, "game_attack");
            if(!String.IsNullOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _third_party_data = util.GetParamValue(_context, "third_party_data");
            if(!String.IsNullOrEmpty(_third_party_data))
                obj.third_party_data = (string)_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "game_price");
            if(!String.IsNullOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "game_type");
            if(!String.IsNullOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "game_skill");
            if(!String.IsNullOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _game_health = util.GetParamValue(_context, "game_health");
            if(!String.IsNullOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_energy = util.GetParamValue(_context, "game_energy");
            if(!String.IsNullOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _game_data = util.GetParamValue(_context, "game_data");
            if(!String.IsNullOrEmpty(_game_data))
                obj.game_data = (string)_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemSkillByUuidByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemSkillByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameRpgItemSkillBool wrapper = new ResponseGameRpgItemSkillBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/del/by-uuid";

            bool completed = api.DelGameRpgItemSkillByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemSkillByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemSkillBool wrapper = new ResponseGameRpgItemSkillBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/del/by-game-id";

            bool completed = api.DelGameRpgItemSkillByGameId(
                        
                _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemSkillByUrl() {
        
            string _url = (string)util.GetParamValue(_context, "url");

            ResponseGameRpgItemSkillBool wrapper = new ResponseGameRpgItemSkillBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/del/by-url";

            bool completed = api.DelGameRpgItemSkillByUrl(
                        
                _url
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemSkillByUrlByGameId() {
        
            string _url = (string)util.GetParamValue(_context, "url");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemSkillBool wrapper = new ResponseGameRpgItemSkillBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/del/by-url/by-game-id";

            bool completed = api.DelGameRpgItemSkillByUrlByGameId(
                        
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemSkillByUuidByGameId() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemSkillBool wrapper = new ResponseGameRpgItemSkillBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/del/by-uuid/by-game-id";

            bool completed = api.DelGameRpgItemSkillByUuidByGameId(
                        
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemSkillList() {
        

            ResponseGameRpgItemSkillList wrapper = new ResponseGameRpgItemSkillList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/get";

            List<GameRpgItemSkill> objs = api.GetGameRpgItemSkillList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemSkillListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameRpgItemSkillList wrapper = new ResponseGameRpgItemSkillList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/get/by-uuid";

            List<GameRpgItemSkill> objs = api.GetGameRpgItemSkillListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemSkillListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemSkillList wrapper = new ResponseGameRpgItemSkillList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/get/by-game-id";

            List<GameRpgItemSkill> objs = api.GetGameRpgItemSkillListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemSkillListByUrl() {
        
            string _url = (string)util.GetParamValue(_context, "url");

            ResponseGameRpgItemSkillList wrapper = new ResponseGameRpgItemSkillList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/get/by-url";

            List<GameRpgItemSkill> objs = api.GetGameRpgItemSkillListByUrl(
                _url
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemSkillListByUrlByGameId() {
        
            string _url = (string)util.GetParamValue(_context, "url");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemSkillList wrapper = new ResponseGameRpgItemSkillList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/get/by-url/by-game-id";

            List<GameRpgItemSkill> objs = api.GetGameRpgItemSkillListByUrlByGameId(
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemSkillListByUuidByGameId() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameRpgItemSkillList wrapper = new ResponseGameRpgItemSkillList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-rpg-item-skill/get/by-uuid/by-game-id";

            List<GameRpgItemSkill> objs = api.GetGameRpgItemSkillListByUuidByGameId(
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProduct() {
        

            ResponseGameProductInt wrapper = new ResponseGameProductInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/count";

            int i = api.CountGameProduct(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProductByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProductInt wrapper = new ResponseGameProductInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/count/by-uuid";

            int i = api.CountGameProductByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProductByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProductInt wrapper = new ResponseGameProductInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/count/by-game-id";

            int i = api.CountGameProductByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProductByUrl() {
        
            string _url = (string)util.GetParamValue(_context, "url");

            ResponseGameProductInt wrapper = new ResponseGameProductInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/count/by-url";

            int i = api.CountGameProductByUrl(
                _url
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProductByUrlByGameId() {
        
            string _url = (string)util.GetParamValue(_context, "url");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProductInt wrapper = new ResponseGameProductInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/count/by-url/by-game-id";

            int i = api.CountGameProductByUrlByGameId(
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProductByUuidByGameId() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProductInt wrapper = new ResponseGameProductInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/count/by-uuid/by-game-id";

            int i = api.CountGameProductByUuidByGameId(
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameProductListByFilter()  {
        
            ResponseGameProductList wrapper = new ResponseGameProductList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameProductResult result = api.BrowseGameProductListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProductByUuid()  {
        
            ResponseGameProductBool wrapper = new ResponseGameProductBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/set/by-uuid";
                        
            GameProduct obj = new GameProduct();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameProductByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProductByGameId()  {
        
            ResponseGameProductBool wrapper = new ResponseGameProductBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/set/by-game-id";
                        
            GameProduct obj = new GameProduct();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameProductByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProductByUrl()  {
        
            ResponseGameProductBool wrapper = new ResponseGameProductBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/set/by-url";
                        
            GameProduct obj = new GameProduct();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameProductByUrl(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProductByUrlByGameId()  {
        
            ResponseGameProductBool wrapper = new ResponseGameProductBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/set/by-url/by-game-id";
                        
            GameProduct obj = new GameProduct();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameProductByUrlByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProductByUuidByGameId()  {
        
            ResponseGameProductBool wrapper = new ResponseGameProductBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/set/by-uuid/by-game-id";
                        
            GameProduct obj = new GameProduct();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameProductByUuidByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProductByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProductBool wrapper = new ResponseGameProductBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/del/by-uuid";

            bool completed = api.DelGameProductByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProductByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProductBool wrapper = new ResponseGameProductBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/del/by-game-id";

            bool completed = api.DelGameProductByGameId(
                        
                _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProductByUrl() {
        
            string _url = (string)util.GetParamValue(_context, "url");

            ResponseGameProductBool wrapper = new ResponseGameProductBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/del/by-url";

            bool completed = api.DelGameProductByUrl(
                        
                _url
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProductByUrlByGameId() {
        
            string _url = (string)util.GetParamValue(_context, "url");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProductBool wrapper = new ResponseGameProductBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/del/by-url/by-game-id";

            bool completed = api.DelGameProductByUrlByGameId(
                        
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProductByUuidByGameId() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProductBool wrapper = new ResponseGameProductBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/del/by-uuid/by-game-id";

            bool completed = api.DelGameProductByUuidByGameId(
                        
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProductList() {
        

            ResponseGameProductList wrapper = new ResponseGameProductList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/get";

            List<GameProduct> objs = api.GetGameProductList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProductListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProductList wrapper = new ResponseGameProductList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/get/by-uuid";

            List<GameProduct> objs = api.GetGameProductListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProductListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProductList wrapper = new ResponseGameProductList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/get/by-game-id";

            List<GameProduct> objs = api.GetGameProductListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProductListByUrl() {
        
            string _url = (string)util.GetParamValue(_context, "url");

            ResponseGameProductList wrapper = new ResponseGameProductList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/get/by-url";

            List<GameProduct> objs = api.GetGameProductListByUrl(
                _url
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProductListByUrlByGameId() {
        
            string _url = (string)util.GetParamValue(_context, "url");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProductList wrapper = new ResponseGameProductList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/get/by-url/by-game-id";

            List<GameProduct> objs = api.GetGameProductListByUrlByGameId(
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProductListByUuidByGameId() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProductList wrapper = new ResponseGameProductList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-product/get/by-uuid/by-game-id";

            List<GameProduct> objs = api.GetGameProductListByUuidByGameId(
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboard() {
        

            ResponseGameLeaderboardInt wrapper = new ResponseGameLeaderboardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/count";

            int i = api.CountGameLeaderboard(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameLeaderboardInt wrapper = new ResponseGameLeaderboardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/count/by-uuid";

            int i = api.CountGameLeaderboardByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardInt wrapper = new ResponseGameLeaderboardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/count/by-game-id";

            int i = api.CountGameLeaderboardByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameLeaderboardInt wrapper = new ResponseGameLeaderboardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/count/by-code";

            int i = api.CountGameLeaderboardByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardInt wrapper = new ResponseGameLeaderboardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/count/by-code/by-game-id";

            int i = api.CountGameLeaderboardByCodeByGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardByCodeByGameIdByProfileId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameLeaderboardInt wrapper = new ResponseGameLeaderboardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/count/by-code/by-game-id/by-profile-id";

            int i = api.CountGameLeaderboardByCodeByGameIdByProfileId(
                _code
                , _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardByCodeByGameIdByProfileIdByTimestamp() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            float _timestamp = float.Parse(util.GetParamValue(_context, "timestamp"));

            ResponseGameLeaderboardInt wrapper = new ResponseGameLeaderboardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/count/by-code/by-game-id/by-profile-id/by-timestamp";

            int i = api.CountGameLeaderboardByCodeByGameIdByProfileIdByTimestamp(
                _code
                , _game_id
                , _profile_id
                , _timestamp
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardInt wrapper = new ResponseGameLeaderboardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/count/by-profile-id/by-game-id";

            int i = api.CountGameLeaderboardByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameLeaderboardListByFilter()  {
        
            ResponseGameLeaderboardList wrapper = new ResponseGameLeaderboardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameLeaderboardResult result = api.BrowseGameLeaderboardListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLeaderboardByUuid()  {
        
            ResponseGameLeaderboardBool wrapper = new ResponseGameLeaderboardBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/set/by-uuid";
                        
            GameLeaderboard obj = new GameLeaderboard();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _rank = util.GetParamValue(_context, "rank");
            if(!String.IsNullOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "rank_change");
            if(!String.IsNullOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "rank_total_count");
            if(!String.IsNullOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "absolute_value");
            if(!String.IsNullOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "network");
            if(!String.IsNullOrEmpty(_network))
                obj.network = (string)_network;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameLeaderboardByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLeaderboardByUuidByProfileIdByGameIdByTimestamp()  {
        
            ResponseGameLeaderboardBool wrapper = new ResponseGameLeaderboardBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/set/by-uuid/by-profile-id/by-game-id/by-timestamp";
                        
            GameLeaderboard obj = new GameLeaderboard();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _rank = util.GetParamValue(_context, "rank");
            if(!String.IsNullOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "rank_change");
            if(!String.IsNullOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "rank_total_count");
            if(!String.IsNullOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "absolute_value");
            if(!String.IsNullOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "network");
            if(!String.IsNullOrEmpty(_network))
                obj.network = (string)_network;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameLeaderboardByUuidByProfileIdByGameIdByTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLeaderboardByCode()  {
        
            ResponseGameLeaderboardBool wrapper = new ResponseGameLeaderboardBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/set/by-code";
                        
            GameLeaderboard obj = new GameLeaderboard();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _rank = util.GetParamValue(_context, "rank");
            if(!String.IsNullOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "rank_change");
            if(!String.IsNullOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "rank_total_count");
            if(!String.IsNullOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "absolute_value");
            if(!String.IsNullOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "network");
            if(!String.IsNullOrEmpty(_network))
                obj.network = (string)_network;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameLeaderboardByCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLeaderboardByCodeByGameId()  {
        
            ResponseGameLeaderboardBool wrapper = new ResponseGameLeaderboardBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/set/by-code/by-game-id";
                        
            GameLeaderboard obj = new GameLeaderboard();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _rank = util.GetParamValue(_context, "rank");
            if(!String.IsNullOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "rank_change");
            if(!String.IsNullOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "rank_total_count");
            if(!String.IsNullOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "absolute_value");
            if(!String.IsNullOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "network");
            if(!String.IsNullOrEmpty(_network))
                obj.network = (string)_network;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameLeaderboardByCodeByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLeaderboardByCodeByGameIdByProfileId()  {
        
            ResponseGameLeaderboardBool wrapper = new ResponseGameLeaderboardBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/set/by-code/by-game-id/by-profile-id";
                        
            GameLeaderboard obj = new GameLeaderboard();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _rank = util.GetParamValue(_context, "rank");
            if(!String.IsNullOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "rank_change");
            if(!String.IsNullOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "rank_total_count");
            if(!String.IsNullOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "absolute_value");
            if(!String.IsNullOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "network");
            if(!String.IsNullOrEmpty(_network))
                obj.network = (string)_network;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameLeaderboardByCodeByGameIdByProfileId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLeaderboardByCodeByGameIdByProfileIdByTimestamp()  {
        
            ResponseGameLeaderboardBool wrapper = new ResponseGameLeaderboardBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/set/by-code/by-game-id/by-profile-id/by-timestamp";
                        
            GameLeaderboard obj = new GameLeaderboard();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _rank = util.GetParamValue(_context, "rank");
            if(!String.IsNullOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "rank_change");
            if(!String.IsNullOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "rank_total_count");
            if(!String.IsNullOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "absolute_value");
            if(!String.IsNullOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "network");
            if(!String.IsNullOrEmpty(_network))
                obj.network = (string)_network;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameLeaderboardByCodeByGameIdByProfileIdByTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLeaderboardByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameLeaderboardBool wrapper = new ResponseGameLeaderboardBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/del/by-uuid";

            bool completed = api.DelGameLeaderboardByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLeaderboardByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameLeaderboardBool wrapper = new ResponseGameLeaderboardBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/del/by-code";

            bool completed = api.DelGameLeaderboardByCode(
                        
                _code
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLeaderboardByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardBool wrapper = new ResponseGameLeaderboardBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/del/by-code/by-game-id";

            bool completed = api.DelGameLeaderboardByCodeByGameId(
                        
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLeaderboardByCodeByGameIdByProfileId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameLeaderboardBool wrapper = new ResponseGameLeaderboardBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/del/by-code/by-game-id/by-profile-id";

            bool completed = api.DelGameLeaderboardByCodeByGameIdByProfileId(
                        
                _code
                , _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLeaderboardByCodeByGameIdByProfileIdByTimestamp() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            float _timestamp = float.Parse(util.GetParamValue(_context, "timestamp"));

            ResponseGameLeaderboardBool wrapper = new ResponseGameLeaderboardBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/del/by-code/by-game-id/by-profile-id/by-timestamp";

            bool completed = api.DelGameLeaderboardByCodeByGameIdByProfileIdByTimestamp(
                        
                _code
                , _game_id
                , _profile_id
                , _timestamp
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLeaderboardByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardBool wrapper = new ResponseGameLeaderboardBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/del/by-profile-id/by-game-id";

            bool completed = api.DelGameLeaderboardByProfileIdByGameId(
                        
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardList() {
        

            ResponseGameLeaderboardList wrapper = new ResponseGameLeaderboardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/get";

            List<GameLeaderboard> objs = api.GetGameLeaderboardList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameLeaderboardList wrapper = new ResponseGameLeaderboardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/get/by-uuid";

            List<GameLeaderboard> objs = api.GetGameLeaderboardListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardList wrapper = new ResponseGameLeaderboardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/get/by-game-id";

            List<GameLeaderboard> objs = api.GetGameLeaderboardListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameLeaderboardList wrapper = new ResponseGameLeaderboardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/get/by-code";

            List<GameLeaderboard> objs = api.GetGameLeaderboardListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardListByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardList wrapper = new ResponseGameLeaderboardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/get/by-code/by-game-id";

            List<GameLeaderboard> objs = api.GetGameLeaderboardListByCodeByGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardListByCodeByGameIdByProfileId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameLeaderboardList wrapper = new ResponseGameLeaderboardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/get/by-code/by-game-id/by-profile-id";

            List<GameLeaderboard> objs = api.GetGameLeaderboardListByCodeByGameIdByProfileId(
                _code
                , _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardListByCodeByGameIdByProfileIdByTimestamp() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            float _timestamp = float.Parse(util.GetParamValue(_context, "timestamp"));

            ResponseGameLeaderboardList wrapper = new ResponseGameLeaderboardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/get/by-code/by-game-id/by-profile-id/by-timestamp";

            List<GameLeaderboard> objs = api.GetGameLeaderboardListByCodeByGameIdByProfileIdByTimestamp(
                _code
                , _game_id
                , _profile_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardListByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardList wrapper = new ResponseGameLeaderboardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/get/by-profile-id/by-game-id";

            List<GameLeaderboard> objs = api.GetGameLeaderboardListByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardListByProfileIdByGameIdByTimestamp() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            float _timestamp = float.Parse(util.GetParamValue(_context, "timestamp"));

            ResponseGameLeaderboardList wrapper = new ResponseGameLeaderboardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard/get/by-profile-id/by-game-id/by-timestamp";

            List<GameLeaderboard> objs = api.GetGameLeaderboardListByProfileIdByGameIdByTimestamp(
                _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardItem() {
        

            ResponseGameLeaderboardItemInt wrapper = new ResponseGameLeaderboardItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/count";

            int i = api.CountGameLeaderboardItem(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardItemByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameLeaderboardItemInt wrapper = new ResponseGameLeaderboardItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/count/by-uuid";

            int i = api.CountGameLeaderboardItemByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardItemByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardItemInt wrapper = new ResponseGameLeaderboardItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/count/by-game-id";

            int i = api.CountGameLeaderboardItemByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardItemByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameLeaderboardItemInt wrapper = new ResponseGameLeaderboardItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/count/by-code";

            int i = api.CountGameLeaderboardItemByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardItemByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardItemInt wrapper = new ResponseGameLeaderboardItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/count/by-code/by-game-id";

            int i = api.CountGameLeaderboardItemByCodeByGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardItemByCodeByGameIdByProfileId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameLeaderboardItemInt wrapper = new ResponseGameLeaderboardItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/count/by-code/by-game-id/by-profile-id";

            int i = api.CountGameLeaderboardItemByCodeByGameIdByProfileId(
                _code
                , _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardItemByCodeByGameIdByProfileIdByTimestamp() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            float _timestamp = float.Parse(util.GetParamValue(_context, "timestamp"));

            ResponseGameLeaderboardItemInt wrapper = new ResponseGameLeaderboardItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/count/by-code/by-game-id/by-profile-id/by-timestamp";

            int i = api.CountGameLeaderboardItemByCodeByGameIdByProfileIdByTimestamp(
                _code
                , _game_id
                , _profile_id
                , _timestamp
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardItemByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardItemInt wrapper = new ResponseGameLeaderboardItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/count/by-profile-id/by-game-id";

            int i = api.CountGameLeaderboardItemByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameLeaderboardItemListByFilter()  {
        
            ResponseGameLeaderboardItemList wrapper = new ResponseGameLeaderboardItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameLeaderboardItemResult result = api.BrowseGameLeaderboardItemListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLeaderboardItemByUuid()  {
        
            ResponseGameLeaderboardItemBool wrapper = new ResponseGameLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/set/by-uuid";
                        
            GameLeaderboardItem obj = new GameLeaderboardItem();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _rank = util.GetParamValue(_context, "rank");
            if(!String.IsNullOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "rank_change");
            if(!String.IsNullOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "rank_total_count");
            if(!String.IsNullOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "absolute_value");
            if(!String.IsNullOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "network");
            if(!String.IsNullOrEmpty(_network))
                obj.network = (string)_network;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameLeaderboardItemByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLeaderboardItemByUuidByProfileIdByGameIdByTimestamp()  {
        
            ResponseGameLeaderboardItemBool wrapper = new ResponseGameLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/set/by-uuid/by-profile-id/by-game-id/by-timestamp";
                        
            GameLeaderboardItem obj = new GameLeaderboardItem();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _rank = util.GetParamValue(_context, "rank");
            if(!String.IsNullOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "rank_change");
            if(!String.IsNullOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "rank_total_count");
            if(!String.IsNullOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "absolute_value");
            if(!String.IsNullOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "network");
            if(!String.IsNullOrEmpty(_network))
                obj.network = (string)_network;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameLeaderboardItemByUuidByProfileIdByGameIdByTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLeaderboardItemByCode()  {
        
            ResponseGameLeaderboardItemBool wrapper = new ResponseGameLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/set/by-code";
                        
            GameLeaderboardItem obj = new GameLeaderboardItem();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _rank = util.GetParamValue(_context, "rank");
            if(!String.IsNullOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "rank_change");
            if(!String.IsNullOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "rank_total_count");
            if(!String.IsNullOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "absolute_value");
            if(!String.IsNullOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "network");
            if(!String.IsNullOrEmpty(_network))
                obj.network = (string)_network;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameLeaderboardItemByCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLeaderboardItemByCodeByGameId()  {
        
            ResponseGameLeaderboardItemBool wrapper = new ResponseGameLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/set/by-code/by-game-id";
                        
            GameLeaderboardItem obj = new GameLeaderboardItem();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _rank = util.GetParamValue(_context, "rank");
            if(!String.IsNullOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "rank_change");
            if(!String.IsNullOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "rank_total_count");
            if(!String.IsNullOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "absolute_value");
            if(!String.IsNullOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "network");
            if(!String.IsNullOrEmpty(_network))
                obj.network = (string)_network;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameLeaderboardItemByCodeByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLeaderboardItemByCodeByGameIdByProfileId()  {
        
            ResponseGameLeaderboardItemBool wrapper = new ResponseGameLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/set/by-code/by-game-id/by-profile-id";
                        
            GameLeaderboardItem obj = new GameLeaderboardItem();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _rank = util.GetParamValue(_context, "rank");
            if(!String.IsNullOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "rank_change");
            if(!String.IsNullOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "rank_total_count");
            if(!String.IsNullOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "absolute_value");
            if(!String.IsNullOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "network");
            if(!String.IsNullOrEmpty(_network))
                obj.network = (string)_network;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameLeaderboardItemByCodeByGameIdByProfileId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLeaderboardItemByCodeByGameIdByProfileIdByTimestamp()  {
        
            ResponseGameLeaderboardItemBool wrapper = new ResponseGameLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/set/by-code/by-game-id/by-profile-id/by-timestamp";
                        
            GameLeaderboardItem obj = new GameLeaderboardItem();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _rank = util.GetParamValue(_context, "rank");
            if(!String.IsNullOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "rank_change");
            if(!String.IsNullOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "rank_total_count");
            if(!String.IsNullOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "absolute_value");
            if(!String.IsNullOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "network");
            if(!String.IsNullOrEmpty(_network))
                obj.network = (string)_network;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameLeaderboardItemByCodeByGameIdByProfileIdByTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLeaderboardItemByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameLeaderboardItemBool wrapper = new ResponseGameLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/del/by-uuid";

            bool completed = api.DelGameLeaderboardItemByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLeaderboardItemByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameLeaderboardItemBool wrapper = new ResponseGameLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/del/by-code";

            bool completed = api.DelGameLeaderboardItemByCode(
                        
                _code
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLeaderboardItemByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardItemBool wrapper = new ResponseGameLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/del/by-code/by-game-id";

            bool completed = api.DelGameLeaderboardItemByCodeByGameId(
                        
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLeaderboardItemByCodeByGameIdByProfileId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameLeaderboardItemBool wrapper = new ResponseGameLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/del/by-code/by-game-id/by-profile-id";

            bool completed = api.DelGameLeaderboardItemByCodeByGameIdByProfileId(
                        
                _code
                , _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLeaderboardItemByCodeByGameIdByProfileIdByTimestamp() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            float _timestamp = float.Parse(util.GetParamValue(_context, "timestamp"));

            ResponseGameLeaderboardItemBool wrapper = new ResponseGameLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/del/by-code/by-game-id/by-profile-id/by-timestamp";

            bool completed = api.DelGameLeaderboardItemByCodeByGameIdByProfileIdByTimestamp(
                        
                _code
                , _game_id
                , _profile_id
                , _timestamp
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLeaderboardItemByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardItemBool wrapper = new ResponseGameLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/del/by-profile-id/by-game-id";

            bool completed = api.DelGameLeaderboardItemByProfileIdByGameId(
                        
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardItemList() {
        

            ResponseGameLeaderboardItemList wrapper = new ResponseGameLeaderboardItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/get";

            List<GameLeaderboardItem> objs = api.GetGameLeaderboardItemList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardItemListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameLeaderboardItemList wrapper = new ResponseGameLeaderboardItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/get/by-uuid";

            List<GameLeaderboardItem> objs = api.GetGameLeaderboardItemListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardItemListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardItemList wrapper = new ResponseGameLeaderboardItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/get/by-game-id";

            List<GameLeaderboardItem> objs = api.GetGameLeaderboardItemListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardItemListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameLeaderboardItemList wrapper = new ResponseGameLeaderboardItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/get/by-code";

            List<GameLeaderboardItem> objs = api.GetGameLeaderboardItemListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardItemListByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardItemList wrapper = new ResponseGameLeaderboardItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/get/by-code/by-game-id";

            List<GameLeaderboardItem> objs = api.GetGameLeaderboardItemListByCodeByGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardItemListByCodeByGameIdByProfileId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameLeaderboardItemList wrapper = new ResponseGameLeaderboardItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/get/by-code/by-game-id/by-profile-id";

            List<GameLeaderboardItem> objs = api.GetGameLeaderboardItemListByCodeByGameIdByProfileId(
                _code
                , _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardItemListByCodeByGameIdByProfileIdByTimestamp() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            float _timestamp = float.Parse(util.GetParamValue(_context, "timestamp"));

            ResponseGameLeaderboardItemList wrapper = new ResponseGameLeaderboardItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/get/by-code/by-game-id/by-profile-id/by-timestamp";

            List<GameLeaderboardItem> objs = api.GetGameLeaderboardItemListByCodeByGameIdByProfileIdByTimestamp(
                _code
                , _game_id
                , _profile_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardItemListByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardItemList wrapper = new ResponseGameLeaderboardItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/get/by-profile-id/by-game-id";

            List<GameLeaderboardItem> objs = api.GetGameLeaderboardItemListByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardItemListByProfileIdByGameIdByTimestamp() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            float _timestamp = float.Parse(util.GetParamValue(_context, "timestamp"));

            ResponseGameLeaderboardItemList wrapper = new ResponseGameLeaderboardItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-item/get/by-profile-id/by-game-id/by-timestamp";

            List<GameLeaderboardItem> objs = api.GetGameLeaderboardItemListByProfileIdByGameIdByTimestamp(
                _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardRollup() {
        

            ResponseGameLeaderboardRollupInt wrapper = new ResponseGameLeaderboardRollupInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/count";

            int i = api.CountGameLeaderboardRollup(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardRollupByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameLeaderboardRollupInt wrapper = new ResponseGameLeaderboardRollupInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/count/by-uuid";

            int i = api.CountGameLeaderboardRollupByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardRollupByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardRollupInt wrapper = new ResponseGameLeaderboardRollupInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/count/by-game-id";

            int i = api.CountGameLeaderboardRollupByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardRollupByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameLeaderboardRollupInt wrapper = new ResponseGameLeaderboardRollupInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/count/by-code";

            int i = api.CountGameLeaderboardRollupByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardRollupByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardRollupInt wrapper = new ResponseGameLeaderboardRollupInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/count/by-code/by-game-id";

            int i = api.CountGameLeaderboardRollupByCodeByGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardRollupByCodeByGameIdByProfileId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameLeaderboardRollupInt wrapper = new ResponseGameLeaderboardRollupInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/count/by-code/by-game-id/by-profile-id";

            int i = api.CountGameLeaderboardRollupByCodeByGameIdByProfileId(
                _code
                , _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardRollupByCodeByGameIdByProfileIdByTimestamp() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            float _timestamp = float.Parse(util.GetParamValue(_context, "timestamp"));

            ResponseGameLeaderboardRollupInt wrapper = new ResponseGameLeaderboardRollupInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/count/by-code/by-game-id/by-profile-id/by-timestamp";

            int i = api.CountGameLeaderboardRollupByCodeByGameIdByProfileIdByTimestamp(
                _code
                , _game_id
                , _profile_id
                , _timestamp
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLeaderboardRollupByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardRollupInt wrapper = new ResponseGameLeaderboardRollupInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/count/by-profile-id/by-game-id";

            int i = api.CountGameLeaderboardRollupByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameLeaderboardRollupListByFilter()  {
        
            ResponseGameLeaderboardRollupList wrapper = new ResponseGameLeaderboardRollupList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameLeaderboardRollupResult result = api.BrowseGameLeaderboardRollupListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLeaderboardRollupByUuid()  {
        
            ResponseGameLeaderboardRollupBool wrapper = new ResponseGameLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/set/by-uuid";
                        
            GameLeaderboardRollup obj = new GameLeaderboardRollup();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _rank = util.GetParamValue(_context, "rank");
            if(!String.IsNullOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "rank_change");
            if(!String.IsNullOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "rank_total_count");
            if(!String.IsNullOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "absolute_value");
            if(!String.IsNullOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "network");
            if(!String.IsNullOrEmpty(_network))
                obj.network = (string)_network;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameLeaderboardRollupByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLeaderboardRollupByUuidByProfileIdByGameIdByTimestamp()  {
        
            ResponseGameLeaderboardRollupBool wrapper = new ResponseGameLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/set/by-uuid/by-profile-id/by-game-id/by-timestamp";
                        
            GameLeaderboardRollup obj = new GameLeaderboardRollup();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _rank = util.GetParamValue(_context, "rank");
            if(!String.IsNullOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "rank_change");
            if(!String.IsNullOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "rank_total_count");
            if(!String.IsNullOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "absolute_value");
            if(!String.IsNullOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "network");
            if(!String.IsNullOrEmpty(_network))
                obj.network = (string)_network;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameLeaderboardRollupByUuidByProfileIdByGameIdByTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLeaderboardRollupByCode()  {
        
            ResponseGameLeaderboardRollupBool wrapper = new ResponseGameLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/set/by-code";
                        
            GameLeaderboardRollup obj = new GameLeaderboardRollup();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _rank = util.GetParamValue(_context, "rank");
            if(!String.IsNullOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "rank_change");
            if(!String.IsNullOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "rank_total_count");
            if(!String.IsNullOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "absolute_value");
            if(!String.IsNullOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "network");
            if(!String.IsNullOrEmpty(_network))
                obj.network = (string)_network;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameLeaderboardRollupByCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLeaderboardRollupByCodeByGameId()  {
        
            ResponseGameLeaderboardRollupBool wrapper = new ResponseGameLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/set/by-code/by-game-id";
                        
            GameLeaderboardRollup obj = new GameLeaderboardRollup();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _rank = util.GetParamValue(_context, "rank");
            if(!String.IsNullOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "rank_change");
            if(!String.IsNullOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "rank_total_count");
            if(!String.IsNullOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "absolute_value");
            if(!String.IsNullOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "network");
            if(!String.IsNullOrEmpty(_network))
                obj.network = (string)_network;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameLeaderboardRollupByCodeByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLeaderboardRollupByCodeByGameIdByProfileId()  {
        
            ResponseGameLeaderboardRollupBool wrapper = new ResponseGameLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/set/by-code/by-game-id/by-profile-id";
                        
            GameLeaderboardRollup obj = new GameLeaderboardRollup();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _rank = util.GetParamValue(_context, "rank");
            if(!String.IsNullOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "rank_change");
            if(!String.IsNullOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "rank_total_count");
            if(!String.IsNullOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "absolute_value");
            if(!String.IsNullOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "network");
            if(!String.IsNullOrEmpty(_network))
                obj.network = (string)_network;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameLeaderboardRollupByCodeByGameIdByProfileId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLeaderboardRollupByCodeByGameIdByProfileIdByTimestamp()  {
        
            ResponseGameLeaderboardRollupBool wrapper = new ResponseGameLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/set/by-code/by-game-id/by-profile-id/by-timestamp";
                        
            GameLeaderboardRollup obj = new GameLeaderboardRollup();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _rank = util.GetParamValue(_context, "rank");
            if(!String.IsNullOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "rank_change");
            if(!String.IsNullOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "rank_total_count");
            if(!String.IsNullOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "absolute_value");
            if(!String.IsNullOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "network");
            if(!String.IsNullOrEmpty(_network))
                obj.network = (string)_network;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameLeaderboardRollupByCodeByGameIdByProfileIdByTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLeaderboardRollupByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameLeaderboardRollupBool wrapper = new ResponseGameLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/del/by-uuid";

            bool completed = api.DelGameLeaderboardRollupByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLeaderboardRollupByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameLeaderboardRollupBool wrapper = new ResponseGameLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/del/by-code";

            bool completed = api.DelGameLeaderboardRollupByCode(
                        
                _code
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLeaderboardRollupByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardRollupBool wrapper = new ResponseGameLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/del/by-code/by-game-id";

            bool completed = api.DelGameLeaderboardRollupByCodeByGameId(
                        
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLeaderboardRollupByCodeByGameIdByProfileId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameLeaderboardRollupBool wrapper = new ResponseGameLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/del/by-code/by-game-id/by-profile-id";

            bool completed = api.DelGameLeaderboardRollupByCodeByGameIdByProfileId(
                        
                _code
                , _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLeaderboardRollupByCodeByGameIdByProfileIdByTimestamp() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            float _timestamp = float.Parse(util.GetParamValue(_context, "timestamp"));

            ResponseGameLeaderboardRollupBool wrapper = new ResponseGameLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/del/by-code/by-game-id/by-profile-id/by-timestamp";

            bool completed = api.DelGameLeaderboardRollupByCodeByGameIdByProfileIdByTimestamp(
                        
                _code
                , _game_id
                , _profile_id
                , _timestamp
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLeaderboardRollupByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardRollupBool wrapper = new ResponseGameLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/del/by-profile-id/by-game-id";

            bool completed = api.DelGameLeaderboardRollupByProfileIdByGameId(
                        
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardRollupList() {
        

            ResponseGameLeaderboardRollupList wrapper = new ResponseGameLeaderboardRollupList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/get";

            List<GameLeaderboardRollup> objs = api.GetGameLeaderboardRollupList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardRollupListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameLeaderboardRollupList wrapper = new ResponseGameLeaderboardRollupList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/get/by-uuid";

            List<GameLeaderboardRollup> objs = api.GetGameLeaderboardRollupListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardRollupListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardRollupList wrapper = new ResponseGameLeaderboardRollupList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/get/by-game-id";

            List<GameLeaderboardRollup> objs = api.GetGameLeaderboardRollupListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardRollupListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameLeaderboardRollupList wrapper = new ResponseGameLeaderboardRollupList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/get/by-code";

            List<GameLeaderboardRollup> objs = api.GetGameLeaderboardRollupListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardRollupListByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardRollupList wrapper = new ResponseGameLeaderboardRollupList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/get/by-code/by-game-id";

            List<GameLeaderboardRollup> objs = api.GetGameLeaderboardRollupListByCodeByGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardRollupListByCodeByGameIdByProfileId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseGameLeaderboardRollupList wrapper = new ResponseGameLeaderboardRollupList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/get/by-code/by-game-id/by-profile-id";

            List<GameLeaderboardRollup> objs = api.GetGameLeaderboardRollupListByCodeByGameIdByProfileId(
                _code
                , _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardRollupListByCodeByGameIdByProfileIdByTimestamp() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            float _timestamp = float.Parse(util.GetParamValue(_context, "timestamp"));

            ResponseGameLeaderboardRollupList wrapper = new ResponseGameLeaderboardRollupList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/get/by-code/by-game-id/by-profile-id/by-timestamp";

            List<GameLeaderboardRollup> objs = api.GetGameLeaderboardRollupListByCodeByGameIdByProfileIdByTimestamp(
                _code
                , _game_id
                , _profile_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardRollupListByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLeaderboardRollupList wrapper = new ResponseGameLeaderboardRollupList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/get/by-profile-id/by-game-id";

            List<GameLeaderboardRollup> objs = api.GetGameLeaderboardRollupListByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLeaderboardRollupListByProfileIdByGameIdByTimestamp() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            float _timestamp = float.Parse(util.GetParamValue(_context, "timestamp"));

            ResponseGameLeaderboardRollupList wrapper = new ResponseGameLeaderboardRollupList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-leaderboard-rollup/get/by-profile-id/by-game-id/by-timestamp";

            List<GameLeaderboardRollup> objs = api.GetGameLeaderboardRollupListByProfileIdByGameIdByTimestamp(
                _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLiveQueue() {
        

            ResponseGameLiveQueueInt wrapper = new ResponseGameLiveQueueInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-queue/count";

            int i = api.CountGameLiveQueue(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLiveQueueByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameLiveQueueInt wrapper = new ResponseGameLiveQueueInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-queue/count/by-uuid";

            int i = api.CountGameLiveQueueByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLiveQueueByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLiveQueueInt wrapper = new ResponseGameLiveQueueInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-queue/count/by-profile-id/by-game-id";

            int i = api.CountGameLiveQueueByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameLiveQueueListByFilter()  {
        
            ResponseGameLiveQueueList wrapper = new ResponseGameLiveQueueList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-queue/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameLiveQueueResult result = api.BrowseGameLiveQueueListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLiveQueueByUuid()  {
        
            ResponseGameLiveQueueBool wrapper = new ResponseGameLiveQueueBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-queue/set/by-uuid";
                        
            GameLiveQueue obj = new GameLiveQueue();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _data_stat = util.GetParamValue(_context, "data_stat");
            if(!String.IsNullOrEmpty(_data_stat))
                obj.data_stat = (string)_data_stat;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _data_ad = util.GetParamValue(_context, "data_ad");
            if(!String.IsNullOrEmpty(_data_ad))
                obj.data_ad = (string)_data_ad;
            
            
            // get data
            wrapper.data = api.SetGameLiveQueueByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLiveQueueByProfileIdByGameId()  {
        
            ResponseGameLiveQueueBool wrapper = new ResponseGameLiveQueueBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-queue/set/by-profile-id/by-game-id";
                        
            GameLiveQueue obj = new GameLiveQueue();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _data_stat = util.GetParamValue(_context, "data_stat");
            if(!String.IsNullOrEmpty(_data_stat))
                obj.data_stat = (string)_data_stat;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _data_ad = util.GetParamValue(_context, "data_ad");
            if(!String.IsNullOrEmpty(_data_ad))
                obj.data_ad = (string)_data_ad;
            
            
            // get data
            wrapper.data = api.SetGameLiveQueueByProfileIdByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLiveQueueByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameLiveQueueBool wrapper = new ResponseGameLiveQueueBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-queue/del/by-uuid";

            bool completed = api.DelGameLiveQueueByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLiveQueueByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLiveQueueBool wrapper = new ResponseGameLiveQueueBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-queue/del/by-profile-id/by-game-id";

            bool completed = api.DelGameLiveQueueByProfileIdByGameId(
                        
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLiveQueueList() {
        

            ResponseGameLiveQueueList wrapper = new ResponseGameLiveQueueList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-queue/get";

            List<GameLiveQueue> objs = api.GetGameLiveQueueList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLiveQueueListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameLiveQueueList wrapper = new ResponseGameLiveQueueList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-queue/get/by-uuid";

            List<GameLiveQueue> objs = api.GetGameLiveQueueListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLiveQueueListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLiveQueueList wrapper = new ResponseGameLiveQueueList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-queue/get/by-game-id";

            List<GameLiveQueue> objs = api.GetGameLiveQueueListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLiveQueueListByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLiveQueueList wrapper = new ResponseGameLiveQueueList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-queue/get/by-profile-id/by-game-id";

            List<GameLiveQueue> objs = api.GetGameLiveQueueListByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLiveRecentQueue() {
        

            ResponseGameLiveRecentQueueInt wrapper = new ResponseGameLiveRecentQueueInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-recent-queue/count";

            int i = api.CountGameLiveRecentQueue(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLiveRecentQueueByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameLiveRecentQueueInt wrapper = new ResponseGameLiveRecentQueueInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-recent-queue/count/by-uuid";

            int i = api.CountGameLiveRecentQueueByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLiveRecentQueueByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLiveRecentQueueInt wrapper = new ResponseGameLiveRecentQueueInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-recent-queue/count/by-profile-id/by-game-id";

            int i = api.CountGameLiveRecentQueueByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameLiveRecentQueueListByFilter()  {
        
            ResponseGameLiveRecentQueueList wrapper = new ResponseGameLiveRecentQueueList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-recent-queue/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameLiveRecentQueueResult result = api.BrowseGameLiveRecentQueueListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLiveRecentQueueByUuid()  {
        
            ResponseGameLiveRecentQueueBool wrapper = new ResponseGameLiveRecentQueueBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-recent-queue/set/by-uuid";
                        
            GameLiveRecentQueue obj = new GameLiveRecentQueue();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _game = util.GetParamValue(_context, "game");
            if(!String.IsNullOrEmpty(_game))
                obj.game = (string)_game;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameLiveRecentQueueByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLiveRecentQueueByProfileIdByGameId()  {
        
            ResponseGameLiveRecentQueueBool wrapper = new ResponseGameLiveRecentQueueBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-recent-queue/set/by-profile-id/by-game-id";
                        
            GameLiveRecentQueue obj = new GameLiveRecentQueue();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _game = util.GetParamValue(_context, "game");
            if(!String.IsNullOrEmpty(_game))
                obj.game = (string)_game;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameLiveRecentQueueByProfileIdByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLiveRecentQueueByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameLiveRecentQueueBool wrapper = new ResponseGameLiveRecentQueueBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-recent-queue/del/by-uuid";

            bool completed = api.DelGameLiveRecentQueueByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLiveRecentQueueByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLiveRecentQueueBool wrapper = new ResponseGameLiveRecentQueueBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-recent-queue/del/by-profile-id/by-game-id";

            bool completed = api.DelGameLiveRecentQueueByProfileIdByGameId(
                        
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLiveRecentQueueList() {
        

            ResponseGameLiveRecentQueueList wrapper = new ResponseGameLiveRecentQueueList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-recent-queue/get";

            List<GameLiveRecentQueue> objs = api.GetGameLiveRecentQueueList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLiveRecentQueueListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameLiveRecentQueueList wrapper = new ResponseGameLiveRecentQueueList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-recent-queue/get/by-uuid";

            List<GameLiveRecentQueue> objs = api.GetGameLiveRecentQueueListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLiveRecentQueueListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLiveRecentQueueList wrapper = new ResponseGameLiveRecentQueueList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-recent-queue/get/by-game-id";

            List<GameLiveRecentQueue> objs = api.GetGameLiveRecentQueueListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLiveRecentQueueListByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLiveRecentQueueList wrapper = new ResponseGameLiveRecentQueueList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-live-recent-queue/get/by-profile-id/by-game-id";

            List<GameLiveRecentQueue> objs = api.GetGameLiveRecentQueueListByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatistic() {
        

            ResponseGameProfileStatisticInt wrapper = new ResponseGameProfileStatisticInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/count";

            int i = api.CountGameProfileStatistic(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProfileStatisticInt wrapper = new ResponseGameProfileStatisticInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/count/by-uuid";

            int i = api.CountGameProfileStatisticByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameProfileStatisticInt wrapper = new ResponseGameProfileStatisticInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/count/by-code";

            int i = api.CountGameProfileStatisticByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticInt wrapper = new ResponseGameProfileStatisticInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/count/by-game-id";

            int i = api.CountGameProfileStatisticByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticInt wrapper = new ResponseGameProfileStatisticInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/count/by-code/by-game-id";

            int i = api.CountGameProfileStatisticByCodeByGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticInt wrapper = new ResponseGameProfileStatisticInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/count/by-profile-id/by-game-id";

            int i = api.CountGameProfileStatisticByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticByCodeByProfileIdByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticInt wrapper = new ResponseGameProfileStatisticInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/count/by-code/by-profile-id/by-game-id";

            int i = api.CountGameProfileStatisticByCodeByProfileIdByGameId(
                _code
                , _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticByCodeByProfileIdByGameIdByTimestamp() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            float _timestamp = float.Parse(util.GetParamValue(_context, "timestamp"));

            ResponseGameProfileStatisticInt wrapper = new ResponseGameProfileStatisticInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/count/by-code/by-profile-id/by-game-id/by-timestamp";

            int i = api.CountGameProfileStatisticByCodeByProfileIdByGameIdByTimestamp(
                _code
                , _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameProfileStatisticListByFilter()  {
        
            ResponseGameProfileStatisticList wrapper = new ResponseGameProfileStatisticList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameProfileStatisticResult result = api.BrowseGameProfileStatisticListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileStatisticByUuid()  {
        
            ResponseGameProfileStatisticBool wrapper = new ResponseGameProfileStatisticBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/set/by-uuid";
                        
            GameProfileStatistic obj = new GameProfileStatistic();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _points = util.GetParamValue(_context, "points");
            if(!String.IsNullOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileStatisticByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileStatisticByUuidByProfileIdByGameIdByTimestamp()  {
        
            ResponseGameProfileStatisticBool wrapper = new ResponseGameProfileStatisticBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/set/by-uuid/by-profile-id/by-game-id/by-timestamp";
                        
            GameProfileStatistic obj = new GameProfileStatistic();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _points = util.GetParamValue(_context, "points");
            if(!String.IsNullOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileStatisticByUuidByProfileIdByGameIdByTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileStatisticByProfileIdByCode()  {
        
            ResponseGameProfileStatisticBool wrapper = new ResponseGameProfileStatisticBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/set/by-profile-id/by-code";
                        
            GameProfileStatistic obj = new GameProfileStatistic();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _points = util.GetParamValue(_context, "points");
            if(!String.IsNullOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileStatisticByProfileIdByCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileStatisticByProfileIdByCodeByTimestamp()  {
        
            ResponseGameProfileStatisticBool wrapper = new ResponseGameProfileStatisticBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/set/by-profile-id/by-code/by-timestamp";
                        
            GameProfileStatistic obj = new GameProfileStatistic();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _points = util.GetParamValue(_context, "points");
            if(!String.IsNullOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileStatisticByProfileIdByCodeByTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileStatisticByCodeByProfileIdByGameIdByTimestamp()  {
        
            ResponseGameProfileStatisticBool wrapper = new ResponseGameProfileStatisticBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/set/by-code/by-profile-id/by-game-id/by-timestamp";
                        
            GameProfileStatistic obj = new GameProfileStatistic();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _points = util.GetParamValue(_context, "points");
            if(!String.IsNullOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileStatisticByCodeByProfileIdByGameIdByTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileStatisticByCodeByProfileIdByGameId()  {
        
            ResponseGameProfileStatisticBool wrapper = new ResponseGameProfileStatisticBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/set/by-code/by-profile-id/by-game-id";
                        
            GameProfileStatistic obj = new GameProfileStatistic();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _points = util.GetParamValue(_context, "points");
            if(!String.IsNullOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileStatisticByCodeByProfileIdByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileStatisticByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProfileStatisticBool wrapper = new ResponseGameProfileStatisticBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/del/by-uuid";

            bool completed = api.DelGameProfileStatisticByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileStatisticByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticBool wrapper = new ResponseGameProfileStatisticBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/del/by-code/by-game-id";

            bool completed = api.DelGameProfileStatisticByCodeByGameId(
                        
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileStatisticByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticBool wrapper = new ResponseGameProfileStatisticBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/del/by-profile-id/by-game-id";

            bool completed = api.DelGameProfileStatisticByProfileIdByGameId(
                        
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileStatisticByCodeByProfileIdByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticBool wrapper = new ResponseGameProfileStatisticBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/del/by-code/by-profile-id/by-game-id";

            bool completed = api.DelGameProfileStatisticByCodeByProfileIdByGameId(
                        
                _code
                , _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProfileStatisticList wrapper = new ResponseGameProfileStatisticList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/get/by-uuid";

            List<GameProfileStatistic> objs = api.GetGameProfileStatisticListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameProfileStatisticList wrapper = new ResponseGameProfileStatisticList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/get/by-code";

            List<GameProfileStatistic> objs = api.GetGameProfileStatisticListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticList wrapper = new ResponseGameProfileStatisticList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/get/by-game-id";

            List<GameProfileStatistic> objs = api.GetGameProfileStatisticListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticListByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticList wrapper = new ResponseGameProfileStatisticList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/get/by-code/by-game-id";

            List<GameProfileStatistic> objs = api.GetGameProfileStatisticListByCodeByGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticListByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticList wrapper = new ResponseGameProfileStatisticList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/get/by-profile-id/by-game-id";

            List<GameProfileStatistic> objs = api.GetGameProfileStatisticListByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticListByProfileIdByGameIdByTimestamp() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            float _timestamp = float.Parse(util.GetParamValue(_context, "timestamp"));

            ResponseGameProfileStatisticList wrapper = new ResponseGameProfileStatisticList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/get/by-profile-id/by-game-id/by-timestamp";

            List<GameProfileStatistic> objs = api.GetGameProfileStatisticListByProfileIdByGameIdByTimestamp(
                _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticListByCodeByProfileIdByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticList wrapper = new ResponseGameProfileStatisticList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/get/by-code/by-profile-id/by-game-id";

            List<GameProfileStatistic> objs = api.GetGameProfileStatisticListByCodeByProfileIdByGameId(
                _code
                , _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticListByCodeByProfileIdByGameIdByTimestamp() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            float _timestamp = float.Parse(util.GetParamValue(_context, "timestamp"));

            ResponseGameProfileStatisticList wrapper = new ResponseGameProfileStatisticList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic/get/by-code/by-profile-id/by-game-id/by-timestamp";

            List<GameProfileStatistic> objs = api.GetGameProfileStatisticListByCodeByProfileIdByGameIdByTimestamp(
                _code
                , _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticMeta() {
        

            ResponseGameStatisticMetaInt wrapper = new ResponseGameStatisticMetaInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-statistic-meta/count";

            int i = api.CountGameStatisticMeta(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticMetaByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameStatisticMetaInt wrapper = new ResponseGameStatisticMetaInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-statistic-meta/count/by-uuid";

            int i = api.CountGameStatisticMetaByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticMetaByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameStatisticMetaInt wrapper = new ResponseGameStatisticMetaInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-statistic-meta/count/by-code";

            int i = api.CountGameStatisticMetaByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticMetaByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameStatisticMetaInt wrapper = new ResponseGameStatisticMetaInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-statistic-meta/count/by-code/by-game-id";

            int i = api.CountGameStatisticMetaByCodeByGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticMetaByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseGameStatisticMetaInt wrapper = new ResponseGameStatisticMetaInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-statistic-meta/count/by-name";

            int i = api.CountGameStatisticMetaByName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticMetaByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameStatisticMetaInt wrapper = new ResponseGameStatisticMetaInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-statistic-meta/count/by-game-id";

            int i = api.CountGameStatisticMetaByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameStatisticMetaListByFilter()  {
        
            ResponseGameStatisticMetaList wrapper = new ResponseGameStatisticMetaList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-statistic-meta/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameStatisticMetaResult result = api.BrowseGameStatisticMetaListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticMetaByUuid()  {
        
            ResponseGameStatisticMetaBool wrapper = new ResponseGameStatisticMetaBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-statistic-meta/set/by-uuid";
                        
            GameStatisticMeta obj = new GameStatisticMeta();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _points = util.GetParamValue(_context, "points");
            if(!String.IsNullOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _store_count = util.GetParamValue(_context, "store_count");
            if(!String.IsNullOrEmpty(_store_count))
                obj.store_count = Convert.ToInt32(_store_count);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = (string)_order;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameStatisticMetaByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticMetaByCodeByGameId()  {
        
            ResponseGameStatisticMetaBool wrapper = new ResponseGameStatisticMetaBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-statistic-meta/set/by-code/by-game-id";
                        
            GameStatisticMeta obj = new GameStatisticMeta();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _points = util.GetParamValue(_context, "points");
            if(!String.IsNullOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _store_count = util.GetParamValue(_context, "store_count");
            if(!String.IsNullOrEmpty(_store_count))
                obj.store_count = Convert.ToInt32(_store_count);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = (string)_order;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameStatisticMetaByCodeByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticMetaByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameStatisticMetaBool wrapper = new ResponseGameStatisticMetaBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-statistic-meta/del/by-uuid";

            bool completed = api.DelGameStatisticMetaByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticMetaByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameStatisticMetaBool wrapper = new ResponseGameStatisticMetaBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-statistic-meta/del/by-code/by-game-id";

            bool completed = api.DelGameStatisticMetaByCodeByGameId(
                        
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticMetaListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameStatisticMetaList wrapper = new ResponseGameStatisticMetaList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-statistic-meta/get/by-uuid";

            List<GameStatisticMeta> objs = api.GetGameStatisticMetaListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticMetaListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameStatisticMetaList wrapper = new ResponseGameStatisticMetaList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-statistic-meta/get/by-code";

            List<GameStatisticMeta> objs = api.GetGameStatisticMetaListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticMetaListByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseGameStatisticMetaList wrapper = new ResponseGameStatisticMetaList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-statistic-meta/get/by-name";

            List<GameStatisticMeta> objs = api.GetGameStatisticMetaListByName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticMetaListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameStatisticMetaList wrapper = new ResponseGameStatisticMetaList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-statistic-meta/get/by-game-id";

            List<GameStatisticMeta> objs = api.GetGameStatisticMetaListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticMetaListByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameStatisticMetaList wrapper = new ResponseGameStatisticMetaList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-statistic-meta/get/by-code/by-game-id";

            List<GameStatisticMeta> objs = api.GetGameStatisticMetaListByCodeByGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticItem() {
        

            ResponseGameProfileStatisticItemInt wrapper = new ResponseGameProfileStatisticItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/count";

            int i = api.CountGameProfileStatisticItem(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticItemByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProfileStatisticItemInt wrapper = new ResponseGameProfileStatisticItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/count/by-uuid";

            int i = api.CountGameProfileStatisticItemByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticItemByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameProfileStatisticItemInt wrapper = new ResponseGameProfileStatisticItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/count/by-code";

            int i = api.CountGameProfileStatisticItemByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticItemByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticItemInt wrapper = new ResponseGameProfileStatisticItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/count/by-game-id";

            int i = api.CountGameProfileStatisticItemByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticItemByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticItemInt wrapper = new ResponseGameProfileStatisticItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/count/by-code/by-game-id";

            int i = api.CountGameProfileStatisticItemByCodeByGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticItemByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticItemInt wrapper = new ResponseGameProfileStatisticItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/count/by-profile-id/by-game-id";

            int i = api.CountGameProfileStatisticItemByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticItemByCodeByProfileIdByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticItemInt wrapper = new ResponseGameProfileStatisticItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/count/by-code/by-profile-id/by-game-id";

            int i = api.CountGameProfileStatisticItemByCodeByProfileIdByGameId(
                _code
                , _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticItemByCodeByProfileIdByGameIdByTimestamp() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            float _timestamp = float.Parse(util.GetParamValue(_context, "timestamp"));

            ResponseGameProfileStatisticItemInt wrapper = new ResponseGameProfileStatisticItemInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/count/by-code/by-profile-id/by-game-id/by-timestamp";

            int i = api.CountGameProfileStatisticItemByCodeByProfileIdByGameIdByTimestamp(
                _code
                , _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameProfileStatisticItemListByFilter()  {
        
            ResponseGameProfileStatisticItemList wrapper = new ResponseGameProfileStatisticItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameProfileStatisticItemResult result = api.BrowseGameProfileStatisticItemListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileStatisticItemByUuid()  {
        
            ResponseGameProfileStatisticItemBool wrapper = new ResponseGameProfileStatisticItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/set/by-uuid";
                        
            GameProfileStatisticItem obj = new GameProfileStatisticItem();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _points = util.GetParamValue(_context, "points");
            if(!String.IsNullOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileStatisticItemByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileStatisticItemByUuidByProfileIdByGameIdByTimestamp()  {
        
            ResponseGameProfileStatisticItemBool wrapper = new ResponseGameProfileStatisticItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/set/by-uuid/by-profile-id/by-game-id/by-timestamp";
                        
            GameProfileStatisticItem obj = new GameProfileStatisticItem();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _points = util.GetParamValue(_context, "points");
            if(!String.IsNullOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileStatisticItemByUuidByProfileIdByGameIdByTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileStatisticItemByProfileIdByCode()  {
        
            ResponseGameProfileStatisticItemBool wrapper = new ResponseGameProfileStatisticItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/set/by-profile-id/by-code";
                        
            GameProfileStatisticItem obj = new GameProfileStatisticItem();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _points = util.GetParamValue(_context, "points");
            if(!String.IsNullOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileStatisticItemByProfileIdByCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileStatisticItemByProfileIdByCodeByTimestamp()  {
        
            ResponseGameProfileStatisticItemBool wrapper = new ResponseGameProfileStatisticItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/set/by-profile-id/by-code/by-timestamp";
                        
            GameProfileStatisticItem obj = new GameProfileStatisticItem();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _points = util.GetParamValue(_context, "points");
            if(!String.IsNullOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileStatisticItemByProfileIdByCodeByTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileStatisticItemByCodeByProfileIdByGameIdByTimestamp()  {
        
            ResponseGameProfileStatisticItemBool wrapper = new ResponseGameProfileStatisticItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/set/by-code/by-profile-id/by-game-id/by-timestamp";
                        
            GameProfileStatisticItem obj = new GameProfileStatisticItem();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _points = util.GetParamValue(_context, "points");
            if(!String.IsNullOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileStatisticItemByCodeByProfileIdByGameIdByTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileStatisticItemByCodeByProfileIdByGameId()  {
        
            ResponseGameProfileStatisticItemBool wrapper = new ResponseGameProfileStatisticItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/set/by-code/by-profile-id/by-game-id";
                        
            GameProfileStatisticItem obj = new GameProfileStatisticItem();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _stat_value_formatted = util.GetParamValue(_context, "stat_value_formatted");
            if(!String.IsNullOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = (string)_stat_value_formatted;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _stat_value = util.GetParamValue(_context, "stat_value");
            if(!String.IsNullOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _points = util.GetParamValue(_context, "points");
            if(!String.IsNullOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileStatisticItemByCodeByProfileIdByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileStatisticItemByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProfileStatisticItemBool wrapper = new ResponseGameProfileStatisticItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/del/by-uuid";

            bool completed = api.DelGameProfileStatisticItemByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileStatisticItemByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticItemBool wrapper = new ResponseGameProfileStatisticItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/del/by-code/by-game-id";

            bool completed = api.DelGameProfileStatisticItemByCodeByGameId(
                        
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileStatisticItemByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticItemBool wrapper = new ResponseGameProfileStatisticItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/del/by-profile-id/by-game-id";

            bool completed = api.DelGameProfileStatisticItemByProfileIdByGameId(
                        
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileStatisticItemByCodeByProfileIdByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticItemBool wrapper = new ResponseGameProfileStatisticItemBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/del/by-code/by-profile-id/by-game-id";

            bool completed = api.DelGameProfileStatisticItemByCodeByProfileIdByGameId(
                        
                _code
                , _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticItemListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProfileStatisticItemList wrapper = new ResponseGameProfileStatisticItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/get/by-uuid";

            List<GameProfileStatisticItem> objs = api.GetGameProfileStatisticItemListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticItemListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameProfileStatisticItemList wrapper = new ResponseGameProfileStatisticItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/get/by-code";

            List<GameProfileStatisticItem> objs = api.GetGameProfileStatisticItemListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticItemListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticItemList wrapper = new ResponseGameProfileStatisticItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/get/by-game-id";

            List<GameProfileStatisticItem> objs = api.GetGameProfileStatisticItemListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticItemListByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticItemList wrapper = new ResponseGameProfileStatisticItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/get/by-code/by-game-id";

            List<GameProfileStatisticItem> objs = api.GetGameProfileStatisticItemListByCodeByGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticItemListByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticItemList wrapper = new ResponseGameProfileStatisticItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/get/by-profile-id/by-game-id";

            List<GameProfileStatisticItem> objs = api.GetGameProfileStatisticItemListByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticItemListByProfileIdByGameIdByTimestamp() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            float _timestamp = float.Parse(util.GetParamValue(_context, "timestamp"));

            ResponseGameProfileStatisticItemList wrapper = new ResponseGameProfileStatisticItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/get/by-profile-id/by-game-id/by-timestamp";

            List<GameProfileStatisticItem> objs = api.GetGameProfileStatisticItemListByProfileIdByGameIdByTimestamp(
                _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticItemListByCodeByProfileIdByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileStatisticItemList wrapper = new ResponseGameProfileStatisticItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/get/by-code/by-profile-id/by-game-id";

            List<GameProfileStatisticItem> objs = api.GetGameProfileStatisticItemListByCodeByProfileIdByGameId(
                _code
                , _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticItemListByCodeByProfileIdByGameIdByTimestamp() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            float _timestamp = float.Parse(util.GetParamValue(_context, "timestamp"));

            ResponseGameProfileStatisticItemList wrapper = new ResponseGameProfileStatisticItemList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-statistic-item/get/by-code/by-profile-id/by-game-id/by-timestamp";

            List<GameProfileStatisticItem> objs = api.GetGameProfileStatisticItemListByCodeByProfileIdByGameIdByTimestamp(
                _code
                , _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameKeyMeta() {
        

            ResponseGameKeyMetaInt wrapper = new ResponseGameKeyMetaInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/count";

            int i = api.CountGameKeyMeta(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameKeyMetaByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameKeyMetaInt wrapper = new ResponseGameKeyMetaInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/count/by-uuid";

            int i = api.CountGameKeyMetaByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameKeyMetaByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameKeyMetaInt wrapper = new ResponseGameKeyMetaInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/count/by-code";

            int i = api.CountGameKeyMetaByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameKeyMetaByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameKeyMetaInt wrapper = new ResponseGameKeyMetaInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/count/by-code/by-game-id";

            int i = api.CountGameKeyMetaByCodeByGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameKeyMetaByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseGameKeyMetaInt wrapper = new ResponseGameKeyMetaInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/count/by-name";

            int i = api.CountGameKeyMetaByName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameKeyMetaByKey() {
        
            string _key = (string)util.GetParamValue(_context, "key");

            ResponseGameKeyMetaInt wrapper = new ResponseGameKeyMetaInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/count/by-key";

            int i = api.CountGameKeyMetaByKey(
                _key
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameKeyMetaByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameKeyMetaInt wrapper = new ResponseGameKeyMetaInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/count/by-game-id";

            int i = api.CountGameKeyMetaByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameKeyMetaByKeyByGameId() {
        
            string _key = (string)util.GetParamValue(_context, "key");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameKeyMetaInt wrapper = new ResponseGameKeyMetaInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/count/by-key/by-game-id";

            int i = api.CountGameKeyMetaByKeyByGameId(
                _key
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameKeyMetaListByFilter()  {
        
            ResponseGameKeyMetaList wrapper = new ResponseGameKeyMetaList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameKeyMetaResult result = api.BrowseGameKeyMetaListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameKeyMetaByUuid()  {
        
            ResponseGameKeyMetaBool wrapper = new ResponseGameKeyMetaBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/set/by-uuid";
                        
            GameKeyMeta obj = new GameKeyMeta();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _key_level = util.GetParamValue(_context, "key_level");
            if(!String.IsNullOrEmpty(_key_level))
                obj.key_level = (string)_key_level;
            
            string _store_count = util.GetParamValue(_context, "store_count");
            if(!String.IsNullOrEmpty(_store_count))
                obj.store_count = Convert.ToInt32(_store_count);
            
            string _key = util.GetParamValue(_context, "key");
            if(!String.IsNullOrEmpty(_key))
                obj.key = (string)_key;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = (string)_order;
            
            string _key_stat = util.GetParamValue(_context, "key_stat");
            if(!String.IsNullOrEmpty(_key_stat))
                obj.key_stat = (string)_key_stat;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameKeyMetaByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameKeyMetaByCodeByGameId()  {
        
            ResponseGameKeyMetaBool wrapper = new ResponseGameKeyMetaBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/set/by-code/by-game-id";
                        
            GameKeyMeta obj = new GameKeyMeta();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _key_level = util.GetParamValue(_context, "key_level");
            if(!String.IsNullOrEmpty(_key_level))
                obj.key_level = (string)_key_level;
            
            string _store_count = util.GetParamValue(_context, "store_count");
            if(!String.IsNullOrEmpty(_store_count))
                obj.store_count = Convert.ToInt32(_store_count);
            
            string _key = util.GetParamValue(_context, "key");
            if(!String.IsNullOrEmpty(_key))
                obj.key = (string)_key;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = (string)_order;
            
            string _key_stat = util.GetParamValue(_context, "key_stat");
            if(!String.IsNullOrEmpty(_key_stat))
                obj.key_stat = (string)_key_stat;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameKeyMetaByCodeByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameKeyMetaByKeyByGameId()  {
        
            ResponseGameKeyMetaBool wrapper = new ResponseGameKeyMetaBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/set/by-key/by-game-id";
                        
            GameKeyMeta obj = new GameKeyMeta();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _key_level = util.GetParamValue(_context, "key_level");
            if(!String.IsNullOrEmpty(_key_level))
                obj.key_level = (string)_key_level;
            
            string _store_count = util.GetParamValue(_context, "store_count");
            if(!String.IsNullOrEmpty(_store_count))
                obj.store_count = Convert.ToInt32(_store_count);
            
            string _key = util.GetParamValue(_context, "key");
            if(!String.IsNullOrEmpty(_key))
                obj.key = (string)_key;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = (string)_order;
            
            string _key_stat = util.GetParamValue(_context, "key_stat");
            if(!String.IsNullOrEmpty(_key_stat))
                obj.key_stat = (string)_key_stat;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameKeyMetaByKeyByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameKeyMetaByKeyByGameIdByLevel()  {
        
            ResponseGameKeyMetaBool wrapper = new ResponseGameKeyMetaBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/set/by-key/by-game-id/by-level";
                        
            GameKeyMeta obj = new GameKeyMeta();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _key_level = util.GetParamValue(_context, "key_level");
            if(!String.IsNullOrEmpty(_key_level))
                obj.key_level = (string)_key_level;
            
            string _store_count = util.GetParamValue(_context, "store_count");
            if(!String.IsNullOrEmpty(_store_count))
                obj.store_count = Convert.ToInt32(_store_count);
            
            string _key = util.GetParamValue(_context, "key");
            if(!String.IsNullOrEmpty(_key))
                obj.key = (string)_key;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = (string)_order;
            
            string _key_stat = util.GetParamValue(_context, "key_stat");
            if(!String.IsNullOrEmpty(_key_stat))
                obj.key_stat = (string)_key_stat;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameKeyMetaByKeyByGameIdByLevel(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameKeyMetaByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameKeyMetaBool wrapper = new ResponseGameKeyMetaBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/del/by-uuid";

            bool completed = api.DelGameKeyMetaByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameKeyMetaByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameKeyMetaBool wrapper = new ResponseGameKeyMetaBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/del/by-code/by-game-id";

            bool completed = api.DelGameKeyMetaByCodeByGameId(
                        
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameKeyMetaByKeyByGameId() {
        
            string _key = (string)util.GetParamValue(_context, "key");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameKeyMetaBool wrapper = new ResponseGameKeyMetaBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/del/by-key/by-game-id";

            bool completed = api.DelGameKeyMetaByKeyByGameId(
                        
                _key
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameKeyMetaListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameKeyMetaList wrapper = new ResponseGameKeyMetaList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/get/by-uuid";

            List<GameKeyMeta> objs = api.GetGameKeyMetaListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameKeyMetaListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameKeyMetaList wrapper = new ResponseGameKeyMetaList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/get/by-code";

            List<GameKeyMeta> objs = api.GetGameKeyMetaListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameKeyMetaListByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameKeyMetaList wrapper = new ResponseGameKeyMetaList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/get/by-code/by-game-id";

            List<GameKeyMeta> objs = api.GetGameKeyMetaListByCodeByGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameKeyMetaListByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseGameKeyMetaList wrapper = new ResponseGameKeyMetaList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/get/by-name";

            List<GameKeyMeta> objs = api.GetGameKeyMetaListByName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameKeyMetaListByKey() {
        
            string _key = (string)util.GetParamValue(_context, "key");

            ResponseGameKeyMetaList wrapper = new ResponseGameKeyMetaList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/get/by-key";

            List<GameKeyMeta> objs = api.GetGameKeyMetaListByKey(
                _key
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameKeyMetaListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameKeyMetaList wrapper = new ResponseGameKeyMetaList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/get/by-game-id";

            List<GameKeyMeta> objs = api.GetGameKeyMetaListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameKeyMetaListByKeyByGameId() {
        
            string _key = (string)util.GetParamValue(_context, "key");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameKeyMetaList wrapper = new ResponseGameKeyMetaList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/get/by-key/by-game-id";

            List<GameKeyMeta> objs = api.GetGameKeyMetaListByKeyByGameId(
                _key
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameKeyMetaListByCodeByLevel() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _level = (string)util.GetParamValue(_context, "level");

            ResponseGameKeyMetaList wrapper = new ResponseGameKeyMetaList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-key-meta/get/by-code/by-level";

            List<GameKeyMeta> objs = api.GetGameKeyMetaListByCodeByLevel(
                _code
                , _level
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLevel() {
        

            ResponseGameLevelInt wrapper = new ResponseGameLevelInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-level/count";

            int i = api.CountGameLevel(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLevelByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameLevelInt wrapper = new ResponseGameLevelInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-level/count/by-uuid";

            int i = api.CountGameLevelByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLevelByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameLevelInt wrapper = new ResponseGameLevelInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-level/count/by-code";

            int i = api.CountGameLevelByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLevelByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLevelInt wrapper = new ResponseGameLevelInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-level/count/by-code/by-game-id";

            int i = api.CountGameLevelByCodeByGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLevelByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseGameLevelInt wrapper = new ResponseGameLevelInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-level/count/by-name";

            int i = api.CountGameLevelByName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLevelByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLevelInt wrapper = new ResponseGameLevelInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-level/count/by-game-id";

            int i = api.CountGameLevelByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameLevelListByFilter()  {
        
            ResponseGameLevelList wrapper = new ResponseGameLevelList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-level/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameLevelResult result = api.BrowseGameLevelListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLevelByUuid()  {
        
            ResponseGameLevelBool wrapper = new ResponseGameLevelBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-level/set/by-uuid";
                        
            GameLevel obj = new GameLevel();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = (string)_order;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameLevelByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLevelByCodeByGameId()  {
        
            ResponseGameLevelBool wrapper = new ResponseGameLevelBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-level/set/by-code/by-game-id";
                        
            GameLevel obj = new GameLevel();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _order = util.GetParamValue(_context, "order");
            if(!String.IsNullOrEmpty(_order))
                obj.order = (string)_order;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameLevelByCodeByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLevelByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameLevelBool wrapper = new ResponseGameLevelBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-level/del/by-uuid";

            bool completed = api.DelGameLevelByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLevelByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLevelBool wrapper = new ResponseGameLevelBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-level/del/by-code/by-game-id";

            bool completed = api.DelGameLevelByCodeByGameId(
                        
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLevelListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameLevelList wrapper = new ResponseGameLevelList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-level/get/by-uuid";

            List<GameLevel> objs = api.GetGameLevelListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLevelListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameLevelList wrapper = new ResponseGameLevelList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-level/get/by-code";

            List<GameLevel> objs = api.GetGameLevelListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLevelListByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLevelList wrapper = new ResponseGameLevelList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-level/get/by-code/by-game-id";

            List<GameLevel> objs = api.GetGameLevelListByCodeByGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLevelListByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseGameLevelList wrapper = new ResponseGameLevelList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-level/get/by-name";

            List<GameLevel> objs = api.GetGameLevelListByName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLevelListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameLevelList wrapper = new ResponseGameLevelList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-level/get/by-game-id";

            List<GameLevel> objs = api.GetGameLevelListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAchievement() {
        

            ResponseGameProfileAchievementInt wrapper = new ResponseGameProfileAchievementInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/count";

            int i = api.CountGameProfileAchievement(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAchievementByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProfileAchievementInt wrapper = new ResponseGameProfileAchievementInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/count/by-uuid";

            int i = api.CountGameProfileAchievementByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAchievementByProfileIdByCode() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameProfileAchievementInt wrapper = new ResponseGameProfileAchievementInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/count/by-profile-id/by-code";

            int i = api.CountGameProfileAchievementByProfileIdByCode(
                _profile_id
                , _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAchievementByUsername() {
        
            string _username = (string)util.GetParamValue(_context, "username");

            ResponseGameProfileAchievementInt wrapper = new ResponseGameProfileAchievementInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/count/by-username";

            int i = api.CountGameProfileAchievementByUsername(
                _username
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAchievementByCodeByProfileIdByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileAchievementInt wrapper = new ResponseGameProfileAchievementInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/count/by-code/by-profile-id/by-game-id";

            int i = api.CountGameProfileAchievementByCodeByProfileIdByGameId(
                _code
                , _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAchievementByCodeByProfileIdByGameIdByTimestamp() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            float _timestamp = float.Parse(util.GetParamValue(_context, "timestamp"));

            ResponseGameProfileAchievementInt wrapper = new ResponseGameProfileAchievementInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/count/by-code/by-profile-id/by-game-id/by-timestamp";

            int i = api.CountGameProfileAchievementByCodeByProfileIdByGameIdByTimestamp(
                _code
                , _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameProfileAchievementListByFilter()  {
        
            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameProfileAchievementResult result = api.BrowseGameProfileAchievementListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAchievementByUuid()  {
        
            ResponseGameProfileAchievementBool wrapper = new ResponseGameProfileAchievementBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/set/by-uuid";
                        
            GameProfileAchievement obj = new GameProfileAchievement();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _completed = util.GetParamValue(_context, "completed");
            if(!String.IsNullOrEmpty(_completed))
                obj.completed = Convert.ToBoolean(_completed);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _achievement_value = util.GetParamValue(_context, "achievement_value");
            if(!String.IsNullOrEmpty(_achievement_value))
                obj.achievement_value = float.Parse(_achievement_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileAchievementByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAchievementByUuidByCode()  {
        
            ResponseGameProfileAchievementBool wrapper = new ResponseGameProfileAchievementBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/set/by-uuid/by-code";
                        
            GameProfileAchievement obj = new GameProfileAchievement();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _completed = util.GetParamValue(_context, "completed");
            if(!String.IsNullOrEmpty(_completed))
                obj.completed = Convert.ToBoolean(_completed);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _achievement_value = util.GetParamValue(_context, "achievement_value");
            if(!String.IsNullOrEmpty(_achievement_value))
                obj.achievement_value = float.Parse(_achievement_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileAchievementByUuidByCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAchievementByProfileIdByCode()  {
        
            ResponseGameProfileAchievementBool wrapper = new ResponseGameProfileAchievementBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/set/by-profile-id/by-code";
                        
            GameProfileAchievement obj = new GameProfileAchievement();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _completed = util.GetParamValue(_context, "completed");
            if(!String.IsNullOrEmpty(_completed))
                obj.completed = Convert.ToBoolean(_completed);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _achievement_value = util.GetParamValue(_context, "achievement_value");
            if(!String.IsNullOrEmpty(_achievement_value))
                obj.achievement_value = float.Parse(_achievement_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileAchievementByProfileIdByCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAchievementByCodeByProfileIdByGameId()  {
        
            ResponseGameProfileAchievementBool wrapper = new ResponseGameProfileAchievementBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/set/by-code/by-profile-id/by-game-id";
                        
            GameProfileAchievement obj = new GameProfileAchievement();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _completed = util.GetParamValue(_context, "completed");
            if(!String.IsNullOrEmpty(_completed))
                obj.completed = Convert.ToBoolean(_completed);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _achievement_value = util.GetParamValue(_context, "achievement_value");
            if(!String.IsNullOrEmpty(_achievement_value))
                obj.achievement_value = float.Parse(_achievement_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileAchievementByCodeByProfileIdByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAchievementByCodeByProfileIdByGameIdByTimestamp()  {
        
            ResponseGameProfileAchievementBool wrapper = new ResponseGameProfileAchievementBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/set/by-code/by-profile-id/by-game-id/by-timestamp";
                        
            GameProfileAchievement obj = new GameProfileAchievement();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _username = util.GetParamValue(_context, "username");
            if(!String.IsNullOrEmpty(_username))
                obj.username = (string)_username;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _timestamp = util.GetParamValue(_context, "timestamp");
            if(!String.IsNullOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _completed = util.GetParamValue(_context, "completed");
            if(!String.IsNullOrEmpty(_completed))
                obj.completed = Convert.ToBoolean(_completed);
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _achievement_value = util.GetParamValue(_context, "achievement_value");
            if(!String.IsNullOrEmpty(_achievement_value))
                obj.achievement_value = float.Parse(_achievement_value);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileAchievementByCodeByProfileIdByGameIdByTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileAchievementByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProfileAchievementBool wrapper = new ResponseGameProfileAchievementBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/del/by-uuid";

            bool completed = api.DelGameProfileAchievementByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileAchievementByProfileIdByCode() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameProfileAchievementBool wrapper = new ResponseGameProfileAchievementBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/del/by-profile-id/by-code";

            bool completed = api.DelGameProfileAchievementByProfileIdByCode(
                        
                _profile_id
                , _code
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileAchievementByUuidByCode() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameProfileAchievementBool wrapper = new ResponseGameProfileAchievementBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/del/by-uuid/by-code";

            bool completed = api.DelGameProfileAchievementByUuidByCode(
                        
                _uuid
                , _code
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAchievementListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/get/by-uuid";

            List<GameProfileAchievement> objs = api.GetGameProfileAchievementListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAchievementListByProfileIdByCode() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/get/by-profile-id/by-code";

            List<GameProfileAchievement> objs = api.GetGameProfileAchievementListByProfileIdByCode(
                _profile_id
                , _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAchievementListByUsername() {
        
            string _username = (string)util.GetParamValue(_context, "username");

            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/get/by-username";

            List<GameProfileAchievement> objs = api.GetGameProfileAchievementListByUsername(
                _username
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAchievementListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/get/by-code";

            List<GameProfileAchievement> objs = api.GetGameProfileAchievementListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAchievementListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/get/by-game-id";

            List<GameProfileAchievement> objs = api.GetGameProfileAchievementListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAchievementListByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/get/by-code/by-game-id";

            List<GameProfileAchievement> objs = api.GetGameProfileAchievementListByCodeByGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAchievementListByProfileIdByGameId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/get/by-profile-id/by-game-id";

            List<GameProfileAchievement> objs = api.GetGameProfileAchievementListByProfileIdByGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAchievementListByProfileIdByGameIdByTimestamp() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            float _timestamp = float.Parse(util.GetParamValue(_context, "timestamp"));

            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/get/by-profile-id/by-game-id/by-timestamp";

            List<GameProfileAchievement> objs = api.GetGameProfileAchievementListByProfileIdByGameIdByTimestamp(
                _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAchievementListByCodeByProfileIdByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/get/by-code/by-profile-id/by-game-id";

            List<GameProfileAchievement> objs = api.GetGameProfileAchievementListByCodeByProfileIdByGameId(
                _code
                , _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAchievementListByCodeByProfileIdByGameIdByTimestamp() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _game_id = (string)util.GetParamValue(_context, "game_id");
            float _timestamp = float.Parse(util.GetParamValue(_context, "timestamp"));

            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-profile-achievement/get/by-code/by-profile-id/by-game-id/by-timestamp";

            List<GameProfileAchievement> objs = api.GetGameProfileAchievementListByCodeByProfileIdByGameIdByTimestamp(
                _code
                , _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAchievementMeta() {
        

            ResponseGameAchievementMetaInt wrapper = new ResponseGameAchievementMetaInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-achievement-meta/count";

            int i = api.CountGameAchievementMeta(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAchievementMetaByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameAchievementMetaInt wrapper = new ResponseGameAchievementMetaInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-achievement-meta/count/by-uuid";

            int i = api.CountGameAchievementMetaByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAchievementMetaByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameAchievementMetaInt wrapper = new ResponseGameAchievementMetaInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-achievement-meta/count/by-code";

            int i = api.CountGameAchievementMetaByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAchievementMetaByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameAchievementMetaInt wrapper = new ResponseGameAchievementMetaInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-achievement-meta/count/by-code/by-game-id";

            int i = api.CountGameAchievementMetaByCodeByGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAchievementMetaByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseGameAchievementMetaInt wrapper = new ResponseGameAchievementMetaInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-achievement-meta/count/by-name";

            int i = api.CountGameAchievementMetaByName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAchievementMetaByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameAchievementMetaInt wrapper = new ResponseGameAchievementMetaInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-achievement-meta/count/by-game-id";

            int i = api.CountGameAchievementMetaByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameAchievementMetaListByFilter()  {
        
            ResponseGameAchievementMetaList wrapper = new ResponseGameAchievementMetaList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-achievement-meta/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            GameAchievementMetaResult result = api.BrowseGameAchievementMetaListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameAchievementMetaByUuid()  {
        
            ResponseGameAchievementMetaBool wrapper = new ResponseGameAchievementMetaBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-achievement-meta/set/by-uuid";
                        
            GameAchievementMeta obj = new GameAchievementMeta();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _game_stat = util.GetParamValue(_context, "game_stat");
            if(!String.IsNullOrEmpty(_game_stat))
                obj.game_stat = Convert.ToBoolean(_game_stat);
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _points = util.GetParamValue(_context, "points");
            if(!String.IsNullOrEmpty(_points))
                obj.points = Convert.ToInt32(_points);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _modifier = util.GetParamValue(_context, "modifier");
            if(!String.IsNullOrEmpty(_modifier))
                obj.modifier = float.Parse(_modifier);
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _leaderboard = util.GetParamValue(_context, "leaderboard");
            if(!String.IsNullOrEmpty(_leaderboard))
                obj.leaderboard = Convert.ToBoolean(_leaderboard);
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameAchievementMetaByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameAchievementMetaByCodeByGameId()  {
        
            ResponseGameAchievementMetaBool wrapper = new ResponseGameAchievementMetaBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-achievement-meta/set/by-code/by-game-id";
                        
            GameAchievementMeta obj = new GameAchievementMeta();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _game_stat = util.GetParamValue(_context, "game_stat");
            if(!String.IsNullOrEmpty(_game_stat))
                obj.game_stat = Convert.ToBoolean(_game_stat);
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _level = util.GetParamValue(_context, "level");
            if(!String.IsNullOrEmpty(_level))
                obj.level = (string)_level;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _points = util.GetParamValue(_context, "points");
            if(!String.IsNullOrEmpty(_points))
                obj.points = Convert.ToInt32(_points);
            
            string _game_id = util.GetParamValue(_context, "game_id");
            if(!String.IsNullOrEmpty(_game_id))
                obj.game_id = (string)_game_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _modifier = util.GetParamValue(_context, "modifier");
            if(!String.IsNullOrEmpty(_modifier))
                obj.modifier = float.Parse(_modifier);
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _leaderboard = util.GetParamValue(_context, "leaderboard");
            if(!String.IsNullOrEmpty(_leaderboard))
                obj.leaderboard = Convert.ToBoolean(_leaderboard);
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetGameAchievementMetaByCodeByGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameAchievementMetaByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameAchievementMetaBool wrapper = new ResponseGameAchievementMetaBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-achievement-meta/del/by-uuid";

            bool completed = api.DelGameAchievementMetaByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameAchievementMetaByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameAchievementMetaBool wrapper = new ResponseGameAchievementMetaBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-achievement-meta/del/by-code/by-game-id";

            bool completed = api.DelGameAchievementMetaByCodeByGameId(
                        
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAchievementMetaListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseGameAchievementMetaList wrapper = new ResponseGameAchievementMetaList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-achievement-meta/get/by-uuid";

            List<GameAchievementMeta> objs = api.GetGameAchievementMetaListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAchievementMetaListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseGameAchievementMetaList wrapper = new ResponseGameAchievementMetaList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-achievement-meta/get/by-code";

            List<GameAchievementMeta> objs = api.GetGameAchievementMetaListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAchievementMetaListByCodeByGameId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameAchievementMetaList wrapper = new ResponseGameAchievementMetaList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-achievement-meta/get/by-code/by-game-id";

            List<GameAchievementMeta> objs = api.GetGameAchievementMetaListByCodeByGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAchievementMetaListByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseGameAchievementMetaList wrapper = new ResponseGameAchievementMetaList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-achievement-meta/get/by-name";

            List<GameAchievementMeta> objs = api.GetGameAchievementMetaListByName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAchievementMetaListByGameId() {
        
            string _game_id = (string)util.GetParamValue(_context, "game_id");

            ResponseGameAchievementMetaList wrapper = new ResponseGameAchievementMetaList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "game-achievement-meta/get/by-game-id";

            List<GameAchievementMeta> objs = api.GetGameAchievementMetaListByGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileReward() {
        

            ResponseProfileRewardInt wrapper = new ResponseProfileRewardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward/count";

            int i = api.CountProfileReward(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileRewardByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileRewardInt wrapper = new ResponseProfileRewardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward/count/by-uuid";

            int i = api.CountProfileRewardByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileRewardByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileRewardInt wrapper = new ResponseProfileRewardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward/count/by-profile-id";

            int i = api.CountProfileRewardByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileRewardByRewardId() {
        
            string _reward_id = (string)util.GetParamValue(_context, "reward_id");

            ResponseProfileRewardInt wrapper = new ResponseProfileRewardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward/count/by-reward-id";

            int i = api.CountProfileRewardByRewardId(
                _reward_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileRewardByProfileIdByRewardId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _reward_id = (string)util.GetParamValue(_context, "reward_id");

            ResponseProfileRewardInt wrapper = new ResponseProfileRewardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward/count/by-profile-id/by-reward-id";

            int i = api.CountProfileRewardByProfileIdByRewardId(
                _profile_id
                , _reward_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileRewardByProfileIdByChannelId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseProfileRewardInt wrapper = new ResponseProfileRewardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward/count/by-profile-id/by-channel-id";

            int i = api.CountProfileRewardByProfileIdByChannelId(
                _profile_id
                , _channel_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileRewardByProfileIdByChannelIdByRewardId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _reward_id = (string)util.GetParamValue(_context, "reward_id");

            ResponseProfileRewardInt wrapper = new ResponseProfileRewardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward/count/by-profile-id/by-channel-id/by-reward-id";

            int i = api.CountProfileRewardByProfileIdByChannelIdByRewardId(
                _profile_id
                , _channel_id
                , _reward_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseProfileRewardListByFilter()  {
        
            ResponseProfileRewardList wrapper = new ResponseProfileRewardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            ProfileRewardResult result = api.BrowseProfileRewardListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileRewardByUuid()  {
        
            ResponseProfileRewardBool wrapper = new ResponseProfileRewardBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward/set/by-uuid";
                        
            ProfileReward obj = new ProfileReward();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _viewed = util.GetParamValue(_context, "viewed");
            if(!String.IsNullOrEmpty(_viewed))
                obj.viewed = Convert.ToBoolean(_viewed);
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _downloaded = util.GetParamValue(_context, "downloaded");
            if(!String.IsNullOrEmpty(_downloaded))
                obj.downloaded = Convert.ToBoolean(_downloaded);
            
            string _channel_id = util.GetParamValue(_context, "channel_id");
            if(!String.IsNullOrEmpty(_channel_id))
                obj.channel_id = (string)_channel_id;
            
            string _reward_id = util.GetParamValue(_context, "reward_id");
            if(!String.IsNullOrEmpty(_reward_id))
                obj.reward_id = (string)_reward_id;
            
            string _usage_count = util.GetParamValue(_context, "usage_count");
            if(!String.IsNullOrEmpty(_usage_count))
                obj.usage_count = Convert.ToInt32(_usage_count);
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _blurb = util.GetParamValue(_context, "blurb");
            if(!String.IsNullOrEmpty(_blurb))
                obj.blurb = (string)_blurb;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetProfileRewardByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileRewardByProfileIdByChannelIdByRewardId()  {
        
            ResponseProfileRewardBool wrapper = new ResponseProfileRewardBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward/set/by-profile-id/by-channel-id/by-reward-id";
                        
            ProfileReward obj = new ProfileReward();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _viewed = util.GetParamValue(_context, "viewed");
            if(!String.IsNullOrEmpty(_viewed))
                obj.viewed = Convert.ToBoolean(_viewed);
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _downloaded = util.GetParamValue(_context, "downloaded");
            if(!String.IsNullOrEmpty(_downloaded))
                obj.downloaded = Convert.ToBoolean(_downloaded);
            
            string _channel_id = util.GetParamValue(_context, "channel_id");
            if(!String.IsNullOrEmpty(_channel_id))
                obj.channel_id = (string)_channel_id;
            
            string _reward_id = util.GetParamValue(_context, "reward_id");
            if(!String.IsNullOrEmpty(_reward_id))
                obj.reward_id = (string)_reward_id;
            
            string _usage_count = util.GetParamValue(_context, "usage_count");
            if(!String.IsNullOrEmpty(_usage_count))
                obj.usage_count = Convert.ToInt32(_usage_count);
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _blurb = util.GetParamValue(_context, "blurb");
            if(!String.IsNullOrEmpty(_blurb))
                obj.blurb = (string)_blurb;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetProfileRewardByProfileIdByChannelIdByRewardId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileRewardByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileRewardBool wrapper = new ResponseProfileRewardBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward/del/by-uuid";

            bool completed = api.DelProfileRewardByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileRewardByProfileIdByRewardId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _reward_id = (string)util.GetParamValue(_context, "reward_id");

            ResponseProfileRewardBool wrapper = new ResponseProfileRewardBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward/del/by-profile-id/by-reward-id";

            bool completed = api.DelProfileRewardByProfileIdByRewardId(
                        
                _profile_id
                , _reward_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileRewardListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileRewardList wrapper = new ResponseProfileRewardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward/get/by-uuid";

            List<ProfileReward> objs = api.GetProfileRewardListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileRewardListByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileRewardList wrapper = new ResponseProfileRewardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward/get/by-profile-id";

            List<ProfileReward> objs = api.GetProfileRewardListByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileRewardListByRewardId() {
        
            string _reward_id = (string)util.GetParamValue(_context, "reward_id");

            ResponseProfileRewardList wrapper = new ResponseProfileRewardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward/get/by-reward-id";

            List<ProfileReward> objs = api.GetProfileRewardListByRewardId(
                _reward_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileRewardListByProfileIdByRewardId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _reward_id = (string)util.GetParamValue(_context, "reward_id");

            ResponseProfileRewardList wrapper = new ResponseProfileRewardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward/get/by-profile-id/by-reward-id";

            List<ProfileReward> objs = api.GetProfileRewardListByProfileIdByRewardId(
                _profile_id
                , _reward_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileRewardListByProfileIdByChannelId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseProfileRewardList wrapper = new ResponseProfileRewardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward/get/by-profile-id/by-channel-id";

            List<ProfileReward> objs = api.GetProfileRewardListByProfileIdByChannelId(
                _profile_id
                , _channel_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileRewardListByProfileIdByChannelIdByRewardId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _reward_id = (string)util.GetParamValue(_context, "reward_id");

            ResponseProfileRewardList wrapper = new ResponseProfileRewardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward/get/by-profile-id/by-channel-id/by-reward-id";

            List<ProfileReward> objs = api.GetProfileRewardListByProfileIdByChannelIdByRewardId(
                _profile_id
                , _channel_id
                , _reward_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountCoupon() {
        

            ResponseCouponInt wrapper = new ResponseCouponInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "coupon/count";

            int i = api.CountCoupon(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountCouponByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseCouponInt wrapper = new ResponseCouponInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "coupon/count/by-uuid";

            int i = api.CountCouponByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountCouponByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseCouponInt wrapper = new ResponseCouponInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "coupon/count/by-code";

            int i = api.CountCouponByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountCouponByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseCouponInt wrapper = new ResponseCouponInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "coupon/count/by-name";

            int i = api.CountCouponByName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountCouponByOrgId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseCouponInt wrapper = new ResponseCouponInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "coupon/count/by-org-id";

            int i = api.CountCouponByOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseCouponListByFilter()  {
        
            ResponseCouponList wrapper = new ResponseCouponList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "coupon/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            CouponResult result = api.BrowseCouponListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetCouponByUuid()  {
        
            ResponseCouponBool wrapper = new ResponseCouponBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "coupon/set/by-uuid";
                        
            Coupon obj = new Coupon();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _org_id = util.GetParamValue(_context, "org_id");
            if(!String.IsNullOrEmpty(_org_id))
                obj.org_id = (string)_org_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _usage_count = util.GetParamValue(_context, "usage_count");
            if(!String.IsNullOrEmpty(_usage_count))
                obj.usage_count = Convert.ToInt32(_usage_count);
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetCouponByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelCouponByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseCouponBool wrapper = new ResponseCouponBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "coupon/del/by-uuid";

            bool completed = api.DelCouponByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelCouponByOrgId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseCouponBool wrapper = new ResponseCouponBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "coupon/del/by-org-id";

            bool completed = api.DelCouponByOrgId(
                        
                _org_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetCouponListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseCouponList wrapper = new ResponseCouponList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "coupon/get/by-uuid";

            List<Coupon> objs = api.GetCouponListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetCouponListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseCouponList wrapper = new ResponseCouponList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "coupon/get/by-code";

            List<Coupon> objs = api.GetCouponListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetCouponListByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseCouponList wrapper = new ResponseCouponList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "coupon/get/by-name";

            List<Coupon> objs = api.GetCouponListByName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetCouponListByOrgId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseCouponList wrapper = new ResponseCouponList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "coupon/get/by-org-id";

            List<Coupon> objs = api.GetCouponListByOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileCoupon() {
        

            ResponseProfileCouponInt wrapper = new ResponseProfileCouponInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-coupon/count";

            int i = api.CountProfileCoupon(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileCouponByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileCouponInt wrapper = new ResponseProfileCouponInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-coupon/count/by-uuid";

            int i = api.CountProfileCouponByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileCouponByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileCouponInt wrapper = new ResponseProfileCouponInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-coupon/count/by-profile-id";

            int i = api.CountProfileCouponByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseProfileCouponListByFilter()  {
        
            ResponseProfileCouponList wrapper = new ResponseProfileCouponList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-coupon/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            ProfileCouponResult result = api.BrowseProfileCouponListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileCouponByUuid()  {
        
            ResponseProfileCouponBool wrapper = new ResponseProfileCouponBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-coupon/set/by-uuid";
                        
            ProfileCoupon obj = new ProfileCoupon();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetProfileCouponByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileCouponByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileCouponBool wrapper = new ResponseProfileCouponBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-coupon/del/by-uuid";

            bool completed = api.DelProfileCouponByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileCouponByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileCouponBool wrapper = new ResponseProfileCouponBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-coupon/del/by-profile-id";

            bool completed = api.DelProfileCouponByProfileId(
                        
                _profile_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileCouponListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileCouponList wrapper = new ResponseProfileCouponList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-coupon/get/by-uuid";

            List<ProfileCoupon> objs = api.GetProfileCouponListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileCouponListByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileCouponList wrapper = new ResponseProfileCouponList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-coupon/get/by-profile-id";

            List<ProfileCoupon> objs = api.GetProfileCouponListByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountOrg() {
        

            ResponseOrgInt wrapper = new ResponseOrgInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "org/count";

            int i = api.CountOrg(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountOrgByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseOrgInt wrapper = new ResponseOrgInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "org/count/by-uuid";

            int i = api.CountOrgByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountOrgByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseOrgInt wrapper = new ResponseOrgInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "org/count/by-code";

            int i = api.CountOrgByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountOrgByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseOrgInt wrapper = new ResponseOrgInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "org/count/by-name";

            int i = api.CountOrgByName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseOrgListByFilter()  {
        
            ResponseOrgList wrapper = new ResponseOrgList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "org/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            OrgResult result = api.BrowseOrgListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetOrgByUuid()  {
        
            ResponseOrgBool wrapper = new ResponseOrgBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "org/set/by-uuid";
                        
            Org obj = new Org();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetOrgByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelOrgByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseOrgBool wrapper = new ResponseOrgBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "org/del/by-uuid";

            bool completed = api.DelOrgByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetOrgListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseOrgList wrapper = new ResponseOrgList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "org/get/by-uuid";

            List<Org> objs = api.GetOrgListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetOrgListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseOrgList wrapper = new ResponseOrgList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "org/get/by-code";

            List<Org> objs = api.GetOrgListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetOrgListByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseOrgList wrapper = new ResponseOrgList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "org/get/by-name";

            List<Org> objs = api.GetOrgListByName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountChannel() {
        

            ResponseChannelInt wrapper = new ResponseChannelInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel/count";

            int i = api.CountChannel(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountChannelByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseChannelInt wrapper = new ResponseChannelInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel/count/by-uuid";

            int i = api.CountChannelByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountChannelByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseChannelInt wrapper = new ResponseChannelInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel/count/by-code";

            int i = api.CountChannelByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountChannelByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseChannelInt wrapper = new ResponseChannelInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel/count/by-name";

            int i = api.CountChannelByName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountChannelByOrgId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseChannelInt wrapper = new ResponseChannelInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel/count/by-org-id";

            int i = api.CountChannelByOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountChannelByTypeId() {
        
            string _type_id = (string)util.GetParamValue(_context, "type_id");

            ResponseChannelInt wrapper = new ResponseChannelInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel/count/by-type-id";

            int i = api.CountChannelByTypeId(
                _type_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountChannelByOrgIdByTypeId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");
            string _type_id = (string)util.GetParamValue(_context, "type_id");

            ResponseChannelInt wrapper = new ResponseChannelInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel/count/by-org-id/by-type-id";

            int i = api.CountChannelByOrgIdByTypeId(
                _org_id
                , _type_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseChannelListByFilter()  {
        
            ResponseChannelList wrapper = new ResponseChannelList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            ChannelResult result = api.BrowseChannelListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetChannelByUuid()  {
        
            ResponseChannelBool wrapper = new ResponseChannelBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel/set/by-uuid";
                        
            Channel obj = new Channel();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _type_id = util.GetParamValue(_context, "type_id");
            if(!String.IsNullOrEmpty(_type_id))
                obj.type_id = (string)_type_id;
            
            string _org_id = util.GetParamValue(_context, "org_id");
            if(!String.IsNullOrEmpty(_org_id))
                obj.org_id = (string)_org_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetChannelByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelChannelByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseChannelBool wrapper = new ResponseChannelBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel/del/by-uuid";

            bool completed = api.DelChannelByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelChannelByCodeByOrgId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseChannelBool wrapper = new ResponseChannelBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel/del/by-code/by-org-id";

            bool completed = api.DelChannelByCodeByOrgId(
                        
                _code
                , _org_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelChannelByCodeByOrgIdByTypeId() {
        
            string _code = (string)util.GetParamValue(_context, "code");
            string _org_id = (string)util.GetParamValue(_context, "org_id");
            string _type_id = (string)util.GetParamValue(_context, "type_id");

            ResponseChannelBool wrapper = new ResponseChannelBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel/del/by-code/by-org-id/by-type-id";

            bool completed = api.DelChannelByCodeByOrgIdByTypeId(
                        
                _code
                , _org_id
                , _type_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetChannelListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseChannelList wrapper = new ResponseChannelList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel/get/by-uuid";

            List<Channel> objs = api.GetChannelListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetChannelListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseChannelList wrapper = new ResponseChannelList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel/get/by-code";

            List<Channel> objs = api.GetChannelListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetChannelListByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseChannelList wrapper = new ResponseChannelList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel/get/by-name";

            List<Channel> objs = api.GetChannelListByName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetChannelListByOrgId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseChannelList wrapper = new ResponseChannelList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel/get/by-org-id";

            List<Channel> objs = api.GetChannelListByOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetChannelListByTypeId() {
        
            string _type_id = (string)util.GetParamValue(_context, "type_id");

            ResponseChannelList wrapper = new ResponseChannelList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel/get/by-type-id";

            List<Channel> objs = api.GetChannelListByTypeId(
                _type_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetChannelListByOrgIdByTypeId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");
            string _type_id = (string)util.GetParamValue(_context, "type_id");

            ResponseChannelList wrapper = new ResponseChannelList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel/get/by-org-id/by-type-id";

            List<Channel> objs = api.GetChannelListByOrgIdByTypeId(
                _org_id
                , _type_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountChannelType() {
        

            ResponseChannelTypeInt wrapper = new ResponseChannelTypeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel-type/count";

            int i = api.CountChannelType(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountChannelTypeByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseChannelTypeInt wrapper = new ResponseChannelTypeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel-type/count/by-uuid";

            int i = api.CountChannelTypeByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountChannelTypeByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseChannelTypeInt wrapper = new ResponseChannelTypeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel-type/count/by-code";

            int i = api.CountChannelTypeByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountChannelTypeByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseChannelTypeInt wrapper = new ResponseChannelTypeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel-type/count/by-name";

            int i = api.CountChannelTypeByName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseChannelTypeListByFilter()  {
        
            ResponseChannelTypeList wrapper = new ResponseChannelTypeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel-type/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            ChannelTypeResult result = api.BrowseChannelTypeListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetChannelTypeByUuid()  {
        
            ResponseChannelTypeBool wrapper = new ResponseChannelTypeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel-type/set/by-uuid";
                        
            ChannelType obj = new ChannelType();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetChannelTypeByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelChannelTypeByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseChannelTypeBool wrapper = new ResponseChannelTypeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel-type/del/by-uuid";

            bool completed = api.DelChannelTypeByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetChannelTypeListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseChannelTypeList wrapper = new ResponseChannelTypeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel-type/get/by-uuid";

            List<ChannelType> objs = api.GetChannelTypeListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetChannelTypeListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseChannelTypeList wrapper = new ResponseChannelTypeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel-type/get/by-code";

            List<ChannelType> objs = api.GetChannelTypeListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetChannelTypeListByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseChannelTypeList wrapper = new ResponseChannelTypeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "channel-type/get/by-name";

            List<ChannelType> objs = api.GetChannelTypeListByName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountReward() {
        

            ResponseRewardInt wrapper = new ResponseRewardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward/count";

            int i = api.CountReward(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseRewardInt wrapper = new ResponseRewardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward/count/by-uuid";

            int i = api.CountRewardByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseRewardInt wrapper = new ResponseRewardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward/count/by-code";

            int i = api.CountRewardByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseRewardInt wrapper = new ResponseRewardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward/count/by-name";

            int i = api.CountRewardByName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardByOrgId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseRewardInt wrapper = new ResponseRewardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward/count/by-org-id";

            int i = api.CountRewardByOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardByChannelId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseRewardInt wrapper = new ResponseRewardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward/count/by-channel-id";

            int i = api.CountRewardByChannelId(
                _channel_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardByOrgIdByChannelId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseRewardInt wrapper = new ResponseRewardInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward/count/by-org-id/by-channel-id";

            int i = api.CountRewardByOrgIdByChannelId(
                _org_id
                , _channel_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseRewardListByFilter()  {
        
            ResponseRewardList wrapper = new ResponseRewardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            RewardResult result = api.BrowseRewardListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetRewardByUuid()  {
        
            ResponseRewardBool wrapper = new ResponseRewardBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward/set/by-uuid";
                        
            Reward obj = new Reward();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _type_url = util.GetParamValue(_context, "type_url");
            if(!String.IsNullOrEmpty(_type_url))
                obj.type_url = (string)_type_url;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "url");
            if(!String.IsNullOrEmpty(_url))
                obj.url = (string)_url;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _org_id = util.GetParamValue(_context, "org_id");
            if(!String.IsNullOrEmpty(_org_id))
                obj.org_id = (string)_org_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _channel_id = util.GetParamValue(_context, "channel_id");
            if(!String.IsNullOrEmpty(_channel_id))
                obj.channel_id = (string)_channel_id;
            
            string _usage_count = util.GetParamValue(_context, "usage_count");
            if(!String.IsNullOrEmpty(_usage_count))
                obj.usage_count = Convert.ToInt32(_usage_count);
            
            string _external_id = util.GetParamValue(_context, "external_id");
            if(!String.IsNullOrEmpty(_external_id))
                obj.external_id = (string)_external_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetRewardByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelRewardByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseRewardBool wrapper = new ResponseRewardBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward/del/by-uuid";

            bool completed = api.DelRewardByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelRewardByOrgIdByChannelId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseRewardBool wrapper = new ResponseRewardBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward/del/by-org-id/by-channel-id";

            bool completed = api.DelRewardByOrgIdByChannelId(
                        
                _org_id
                , _channel_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseRewardList wrapper = new ResponseRewardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward/get/by-uuid";

            List<Reward> objs = api.GetRewardListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseRewardList wrapper = new ResponseRewardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward/get/by-code";

            List<Reward> objs = api.GetRewardListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardListByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseRewardList wrapper = new ResponseRewardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward/get/by-name";

            List<Reward> objs = api.GetRewardListByName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardListByOrgId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseRewardList wrapper = new ResponseRewardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward/get/by-org-id";

            List<Reward> objs = api.GetRewardListByOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardListByChannelId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseRewardList wrapper = new ResponseRewardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward/get/by-channel-id";

            List<Reward> objs = api.GetRewardListByChannelId(
                _channel_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardListByOrgIdByChannelId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseRewardList wrapper = new ResponseRewardList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward/get/by-org-id/by-channel-id";

            List<Reward> objs = api.GetRewardListByOrgIdByChannelId(
                _org_id
                , _channel_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardType() {
        

            ResponseRewardTypeInt wrapper = new ResponseRewardTypeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-type/count";

            int i = api.CountRewardType(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardTypeByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseRewardTypeInt wrapper = new ResponseRewardTypeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-type/count/by-uuid";

            int i = api.CountRewardTypeByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardTypeByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseRewardTypeInt wrapper = new ResponseRewardTypeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-type/count/by-code";

            int i = api.CountRewardTypeByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardTypeByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseRewardTypeInt wrapper = new ResponseRewardTypeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-type/count/by-name";

            int i = api.CountRewardTypeByName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardTypeByType() {
        
            string _type = (string)util.GetParamValue(_context, "type");

            ResponseRewardTypeInt wrapper = new ResponseRewardTypeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-type/count/by-type";

            int i = api.CountRewardTypeByType(
                _type
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseRewardTypeListByFilter()  {
        
            ResponseRewardTypeList wrapper = new ResponseRewardTypeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-type/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            RewardTypeResult result = api.BrowseRewardTypeListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetRewardTypeByUuid()  {
        
            ResponseRewardTypeBool wrapper = new ResponseRewardTypeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-type/set/by-uuid";
                        
            RewardType obj = new RewardType();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _type_url = util.GetParamValue(_context, "type_url");
            if(!String.IsNullOrEmpty(_type_url))
                obj.type_url = (string)_type_url;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetRewardTypeByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelRewardTypeByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseRewardTypeBool wrapper = new ResponseRewardTypeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-type/del/by-uuid";

            bool completed = api.DelRewardTypeByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardTypeListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseRewardTypeList wrapper = new ResponseRewardTypeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-type/get/by-uuid";

            List<RewardType> objs = api.GetRewardTypeListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardTypeListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseRewardTypeList wrapper = new ResponseRewardTypeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-type/get/by-code";

            List<RewardType> objs = api.GetRewardTypeListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardTypeListByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseRewardTypeList wrapper = new ResponseRewardTypeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-type/get/by-name";

            List<RewardType> objs = api.GetRewardTypeListByName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardTypeListByType() {
        
            string _type = (string)util.GetParamValue(_context, "type");

            ResponseRewardTypeList wrapper = new ResponseRewardTypeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-type/get/by-type";

            List<RewardType> objs = api.GetRewardTypeListByType(
                _type
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardCondition() {
        

            ResponseRewardConditionInt wrapper = new ResponseRewardConditionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition/count";

            int i = api.CountRewardCondition(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardConditionByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseRewardConditionInt wrapper = new ResponseRewardConditionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition/count/by-uuid";

            int i = api.CountRewardConditionByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardConditionByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseRewardConditionInt wrapper = new ResponseRewardConditionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition/count/by-code";

            int i = api.CountRewardConditionByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardConditionByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseRewardConditionInt wrapper = new ResponseRewardConditionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition/count/by-name";

            int i = api.CountRewardConditionByName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardConditionByOrgId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseRewardConditionInt wrapper = new ResponseRewardConditionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition/count/by-org-id";

            int i = api.CountRewardConditionByOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardConditionByChannelId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseRewardConditionInt wrapper = new ResponseRewardConditionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition/count/by-channel-id";

            int i = api.CountRewardConditionByChannelId(
                _channel_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardConditionByOrgIdByChannelId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseRewardConditionInt wrapper = new ResponseRewardConditionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition/count/by-org-id/by-channel-id";

            int i = api.CountRewardConditionByOrgIdByChannelId(
                _org_id
                , _channel_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardConditionByOrgIdByChannelIdByRewardId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _reward_id = (string)util.GetParamValue(_context, "reward_id");

            ResponseRewardConditionInt wrapper = new ResponseRewardConditionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition/count/by-org-id/by-channel-id/by-reward-id";

            int i = api.CountRewardConditionByOrgIdByChannelIdByRewardId(
                _org_id
                , _channel_id
                , _reward_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardConditionByRewardId() {
        
            string _reward_id = (string)util.GetParamValue(_context, "reward_id");

            ResponseRewardConditionInt wrapper = new ResponseRewardConditionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition/count/by-reward-id";

            int i = api.CountRewardConditionByRewardId(
                _reward_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseRewardConditionListByFilter()  {
        
            ResponseRewardConditionList wrapper = new ResponseRewardConditionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            RewardConditionResult result = api.BrowseRewardConditionListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetRewardConditionByUuid()  {
        
            ResponseRewardConditionBool wrapper = new ResponseRewardConditionBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition/set/by-uuid";
                        
            RewardCondition obj = new RewardCondition();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _end_date = util.GetParamValue(_context, "end_date");
            if(!String.IsNullOrEmpty(_end_date))
                obj.end_date = Convert.ToDateTime(_end_date);
            else 
                obj.end_date = DateTime.Now;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _org_id = util.GetParamValue(_context, "org_id");
            if(!String.IsNullOrEmpty(_org_id))
                obj.org_id = (string)_org_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _channel_id = util.GetParamValue(_context, "channel_id");
            if(!String.IsNullOrEmpty(_channel_id))
                obj.channel_id = (string)_channel_id;
            
            string _amount = util.GetParamValue(_context, "amount");
            if(!String.IsNullOrEmpty(_amount))
                obj.amount = Convert.ToInt32(_amount);
            
            string _global_reward = util.GetParamValue(_context, "global_reward");
            if(!String.IsNullOrEmpty(_global_reward))
                obj.global_reward = Convert.ToBoolean(_global_reward);
            
            string _condition = util.GetParamValue(_context, "condition");
            if(!String.IsNullOrEmpty(_condition))
                obj.condition = (string)_condition;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _start_date = util.GetParamValue(_context, "start_date");
            if(!String.IsNullOrEmpty(_start_date))
                obj.start_date = Convert.ToDateTime(_start_date);
            else 
                obj.start_date = DateTime.Now;
            
            string _reward_id = util.GetParamValue(_context, "reward_id");
            if(!String.IsNullOrEmpty(_reward_id))
                obj.reward_id = (string)_reward_id;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetRewardConditionByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelRewardConditionByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseRewardConditionBool wrapper = new ResponseRewardConditionBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition/del/by-uuid";

            bool completed = api.DelRewardConditionByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelRewardConditionByOrgIdByChannelIdByRewardId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _reward_id = (string)util.GetParamValue(_context, "reward_id");

            ResponseRewardConditionBool wrapper = new ResponseRewardConditionBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition/del/by-org-id/by-channel-id/by-reward-id";

            bool completed = api.DelRewardConditionByOrgIdByChannelIdByRewardId(
                        
                _org_id
                , _channel_id
                , _reward_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardConditionListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseRewardConditionList wrapper = new ResponseRewardConditionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition/get/by-uuid";

            List<RewardCondition> objs = api.GetRewardConditionListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardConditionListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseRewardConditionList wrapper = new ResponseRewardConditionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition/get/by-code";

            List<RewardCondition> objs = api.GetRewardConditionListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardConditionListByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseRewardConditionList wrapper = new ResponseRewardConditionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition/get/by-name";

            List<RewardCondition> objs = api.GetRewardConditionListByName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardConditionListByOrgId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseRewardConditionList wrapper = new ResponseRewardConditionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition/get/by-org-id";

            List<RewardCondition> objs = api.GetRewardConditionListByOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardConditionListByChannelId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseRewardConditionList wrapper = new ResponseRewardConditionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition/get/by-channel-id";

            List<RewardCondition> objs = api.GetRewardConditionListByChannelId(
                _channel_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardConditionListByOrgIdByChannelId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseRewardConditionList wrapper = new ResponseRewardConditionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition/get/by-org-id/by-channel-id";

            List<RewardCondition> objs = api.GetRewardConditionListByOrgIdByChannelId(
                _org_id
                , _channel_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardConditionListByOrgIdByChannelIdByRewardId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _reward_id = (string)util.GetParamValue(_context, "reward_id");

            ResponseRewardConditionList wrapper = new ResponseRewardConditionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition/get/by-org-id/by-channel-id/by-reward-id";

            List<RewardCondition> objs = api.GetRewardConditionListByOrgIdByChannelIdByRewardId(
                _org_id
                , _channel_id
                , _reward_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardConditionListByRewardId() {
        
            string _reward_id = (string)util.GetParamValue(_context, "reward_id");

            ResponseRewardConditionList wrapper = new ResponseRewardConditionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition/get/by-reward-id";

            List<RewardCondition> objs = api.GetRewardConditionListByRewardId(
                _reward_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardConditionType() {
        

            ResponseRewardConditionTypeInt wrapper = new ResponseRewardConditionTypeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition-type/count";

            int i = api.CountRewardConditionType(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardConditionTypeByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseRewardConditionTypeInt wrapper = new ResponseRewardConditionTypeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition-type/count/by-uuid";

            int i = api.CountRewardConditionTypeByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardConditionTypeByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseRewardConditionTypeInt wrapper = new ResponseRewardConditionTypeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition-type/count/by-code";

            int i = api.CountRewardConditionTypeByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardConditionTypeByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseRewardConditionTypeInt wrapper = new ResponseRewardConditionTypeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition-type/count/by-name";

            int i = api.CountRewardConditionTypeByName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardConditionTypeByType() {
        
            string _type = (string)util.GetParamValue(_context, "type");

            ResponseRewardConditionTypeInt wrapper = new ResponseRewardConditionTypeInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition-type/count/by-type";

            int i = api.CountRewardConditionTypeByType(
                _type
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseRewardConditionTypeListByFilter()  {
        
            ResponseRewardConditionTypeList wrapper = new ResponseRewardConditionTypeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition-type/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            RewardConditionTypeResult result = api.BrowseRewardConditionTypeListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetRewardConditionTypeByUuid()  {
        
            ResponseRewardConditionTypeBool wrapper = new ResponseRewardConditionTypeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition-type/set/by-uuid";
                        
            RewardConditionType obj = new RewardConditionType();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetRewardConditionTypeByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelRewardConditionTypeByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseRewardConditionTypeBool wrapper = new ResponseRewardConditionTypeBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition-type/del/by-uuid";

            bool completed = api.DelRewardConditionTypeByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardConditionTypeListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseRewardConditionTypeList wrapper = new ResponseRewardConditionTypeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition-type/get/by-uuid";

            List<RewardConditionType> objs = api.GetRewardConditionTypeListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardConditionTypeListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseRewardConditionTypeList wrapper = new ResponseRewardConditionTypeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition-type/get/by-code";

            List<RewardConditionType> objs = api.GetRewardConditionTypeListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardConditionTypeListByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseRewardConditionTypeList wrapper = new ResponseRewardConditionTypeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition-type/get/by-name";

            List<RewardConditionType> objs = api.GetRewardConditionTypeListByName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardConditionTypeListByType() {
        
            string _type = (string)util.GetParamValue(_context, "type");

            ResponseRewardConditionTypeList wrapper = new ResponseRewardConditionTypeList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-condition-type/get/by-type";

            List<RewardConditionType> objs = api.GetRewardConditionTypeListByType(
                _type
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountQuestion() {
        

            ResponseQuestionInt wrapper = new ResponseQuestionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "question/count";

            int i = api.CountQuestion(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountQuestionByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseQuestionInt wrapper = new ResponseQuestionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "question/count/by-uuid";

            int i = api.CountQuestionByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountQuestionByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseQuestionInt wrapper = new ResponseQuestionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "question/count/by-code";

            int i = api.CountQuestionByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountQuestionByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseQuestionInt wrapper = new ResponseQuestionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "question/count/by-name";

            int i = api.CountQuestionByName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountQuestionByChannelId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseQuestionInt wrapper = new ResponseQuestionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "question/count/by-channel-id";

            int i = api.CountQuestionByChannelId(
                _channel_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountQuestionByOrgId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseQuestionInt wrapper = new ResponseQuestionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "question/count/by-org-id";

            int i = api.CountQuestionByOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountQuestionByChannelIdByOrgId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseQuestionInt wrapper = new ResponseQuestionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "question/count/by-channel-id/by-org-id";

            int i = api.CountQuestionByChannelIdByOrgId(
                _channel_id
                , _org_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountQuestionByChannelIdByCode() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseQuestionInt wrapper = new ResponseQuestionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "question/count/by-channel-id/by-code";

            int i = api.CountQuestionByChannelIdByCode(
                _channel_id
                , _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseQuestionListByFilter()  {
        
            ResponseQuestionList wrapper = new ResponseQuestionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "question/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            QuestionResult result = api.BrowseQuestionListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetQuestionByUuid()  {
        
            ResponseQuestionBool wrapper = new ResponseQuestionBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "question/set/by-uuid";
                        
            Question obj = new Question();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _org_id = util.GetParamValue(_context, "org_id");
            if(!String.IsNullOrEmpty(_org_id))
                obj.org_id = (string)_org_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _choices = util.GetParamValue(_context, "choices");
            if(!String.IsNullOrEmpty(_choices))
                obj.choices = (string)_choices;
            
            string _channel_id = util.GetParamValue(_context, "channel_id");
            if(!String.IsNullOrEmpty(_channel_id))
                obj.channel_id = (string)_channel_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetQuestionByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetQuestionByChannelIdByCode()  {
        
            ResponseQuestionBool wrapper = new ResponseQuestionBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "question/set/by-channel-id/by-code";
                        
            Question obj = new Question();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _org_id = util.GetParamValue(_context, "org_id");
            if(!String.IsNullOrEmpty(_org_id))
                obj.org_id = (string)_org_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _choices = util.GetParamValue(_context, "choices");
            if(!String.IsNullOrEmpty(_choices))
                obj.choices = (string)_choices;
            
            string _channel_id = util.GetParamValue(_context, "channel_id");
            if(!String.IsNullOrEmpty(_channel_id))
                obj.channel_id = (string)_channel_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            
            // get data
            wrapper.data = api.SetQuestionByChannelIdByCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelQuestionByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseQuestionBool wrapper = new ResponseQuestionBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "question/del/by-uuid";

            bool completed = api.DelQuestionByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelQuestionByChannelIdByOrgId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseQuestionBool wrapper = new ResponseQuestionBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "question/del/by-channel-id/by-org-id";

            bool completed = api.DelQuestionByChannelIdByOrgId(
                        
                _channel_id
                , _org_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetQuestionListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseQuestionList wrapper = new ResponseQuestionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "question/get/by-uuid";

            List<Question> objs = api.GetQuestionListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetQuestionListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseQuestionList wrapper = new ResponseQuestionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "question/get/by-code";

            List<Question> objs = api.GetQuestionListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetQuestionListByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseQuestionList wrapper = new ResponseQuestionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "question/get/by-name";

            List<Question> objs = api.GetQuestionListByName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetQuestionListByType() {
        
            string _type = (string)util.GetParamValue(_context, "type");

            ResponseQuestionList wrapper = new ResponseQuestionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "question/get/by-type";

            List<Question> objs = api.GetQuestionListByType(
                _type
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetQuestionListByChannelId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseQuestionList wrapper = new ResponseQuestionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "question/get/by-channel-id";

            List<Question> objs = api.GetQuestionListByChannelId(
                _channel_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetQuestionListByOrgId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseQuestionList wrapper = new ResponseQuestionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "question/get/by-org-id";

            List<Question> objs = api.GetQuestionListByOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetQuestionListByChannelIdByOrgId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseQuestionList wrapper = new ResponseQuestionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "question/get/by-channel-id/by-org-id";

            List<Question> objs = api.GetQuestionListByChannelIdByOrgId(
                _channel_id
                , _org_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetQuestionListByChannelIdByCode() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseQuestionList wrapper = new ResponseQuestionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "question/get/by-channel-id/by-code";

            List<Question> objs = api.GetQuestionListByChannelIdByCode(
                _channel_id
                , _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileQuestion() {
        

            ResponseProfileQuestionInt wrapper = new ResponseProfileQuestionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/count";

            int i = api.CountProfileQuestion(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileQuestionByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileQuestionInt wrapper = new ResponseProfileQuestionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/count/by-uuid";

            int i = api.CountProfileQuestionByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileQuestionByChannelId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseProfileQuestionInt wrapper = new ResponseProfileQuestionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/count/by-channel-id";

            int i = api.CountProfileQuestionByChannelId(
                _channel_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileQuestionByOrgId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseProfileQuestionInt wrapper = new ResponseProfileQuestionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/count/by-org-id";

            int i = api.CountProfileQuestionByOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileQuestionByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileQuestionInt wrapper = new ResponseProfileQuestionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/count/by-profile-id";

            int i = api.CountProfileQuestionByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileQuestionByQuestionId() {
        
            string _question_id = (string)util.GetParamValue(_context, "question_id");

            ResponseProfileQuestionInt wrapper = new ResponseProfileQuestionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/count/by-question-id";

            int i = api.CountProfileQuestionByQuestionId(
                _question_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileQuestionByChannelIdByOrgId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseProfileQuestionInt wrapper = new ResponseProfileQuestionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/count/by-channel-id/by-org-id";

            int i = api.CountProfileQuestionByChannelIdByOrgId(
                _channel_id
                , _org_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileQuestionByChannelIdByProfileId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileQuestionInt wrapper = new ResponseProfileQuestionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/count/by-channel-id/by-profile-id";

            int i = api.CountProfileQuestionByChannelIdByProfileId(
                _channel_id
                , _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileQuestionByQuestionIdByProfileId() {
        
            string _question_id = (string)util.GetParamValue(_context, "question_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileQuestionInt wrapper = new ResponseProfileQuestionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/count/by-question-id/by-profile-id";

            int i = api.CountProfileQuestionByQuestionIdByProfileId(
                _question_id
                , _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseProfileQuestionListByFilter()  {
        
            ResponseProfileQuestionList wrapper = new ResponseProfileQuestionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            ProfileQuestionResult result = api.BrowseProfileQuestionListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileQuestionByUuid()  {
        
            ResponseProfileQuestionBool wrapper = new ResponseProfileQuestionBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/set/by-uuid";
                        
            ProfileQuestion obj = new ProfileQuestion();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _org_id = util.GetParamValue(_context, "org_id");
            if(!String.IsNullOrEmpty(_org_id))
                obj.org_id = (string)_org_id;
            
            string _channel_id = util.GetParamValue(_context, "channel_id");
            if(!String.IsNullOrEmpty(_channel_id))
                obj.channel_id = (string)_channel_id;
            
            string _answer = util.GetParamValue(_context, "answer");
            if(!String.IsNullOrEmpty(_answer))
                obj.answer = (string)_answer;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _question_id = util.GetParamValue(_context, "question_id");
            if(!String.IsNullOrEmpty(_question_id))
                obj.question_id = (string)_question_id;
            
            
            // get data
            wrapper.data = api.SetProfileQuestionByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileQuestionByChannelIdByProfileId()  {
        
            ResponseProfileQuestionBool wrapper = new ResponseProfileQuestionBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/set/by-channel-id/by-profile-id";
                        
            ProfileQuestion obj = new ProfileQuestion();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _org_id = util.GetParamValue(_context, "org_id");
            if(!String.IsNullOrEmpty(_org_id))
                obj.org_id = (string)_org_id;
            
            string _channel_id = util.GetParamValue(_context, "channel_id");
            if(!String.IsNullOrEmpty(_channel_id))
                obj.channel_id = (string)_channel_id;
            
            string _answer = util.GetParamValue(_context, "answer");
            if(!String.IsNullOrEmpty(_answer))
                obj.answer = (string)_answer;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _question_id = util.GetParamValue(_context, "question_id");
            if(!String.IsNullOrEmpty(_question_id))
                obj.question_id = (string)_question_id;
            
            
            // get data
            wrapper.data = api.SetProfileQuestionByChannelIdByProfileId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileQuestionByQuestionIdByProfileId()  {
        
            ResponseProfileQuestionBool wrapper = new ResponseProfileQuestionBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/set/by-question-id/by-profile-id";
                        
            ProfileQuestion obj = new ProfileQuestion();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _org_id = util.GetParamValue(_context, "org_id");
            if(!String.IsNullOrEmpty(_org_id))
                obj.org_id = (string)_org_id;
            
            string _channel_id = util.GetParamValue(_context, "channel_id");
            if(!String.IsNullOrEmpty(_channel_id))
                obj.channel_id = (string)_channel_id;
            
            string _answer = util.GetParamValue(_context, "answer");
            if(!String.IsNullOrEmpty(_answer))
                obj.answer = (string)_answer;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _question_id = util.GetParamValue(_context, "question_id");
            if(!String.IsNullOrEmpty(_question_id))
                obj.question_id = (string)_question_id;
            
            
            // get data
            wrapper.data = api.SetProfileQuestionByQuestionIdByProfileId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileQuestionByChannelIdByQuestionIdByProfileId()  {
        
            ResponseProfileQuestionBool wrapper = new ResponseProfileQuestionBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/set/by-channel-id/by-question-id/by-profile-id";
                        
            ProfileQuestion obj = new ProfileQuestion();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _org_id = util.GetParamValue(_context, "org_id");
            if(!String.IsNullOrEmpty(_org_id))
                obj.org_id = (string)_org_id;
            
            string _channel_id = util.GetParamValue(_context, "channel_id");
            if(!String.IsNullOrEmpty(_channel_id))
                obj.channel_id = (string)_channel_id;
            
            string _answer = util.GetParamValue(_context, "answer");
            if(!String.IsNullOrEmpty(_answer))
                obj.answer = (string)_answer;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _question_id = util.GetParamValue(_context, "question_id");
            if(!String.IsNullOrEmpty(_question_id))
                obj.question_id = (string)_question_id;
            
            
            // get data
            wrapper.data = api.SetProfileQuestionByChannelIdByQuestionIdByProfileId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileQuestionByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileQuestionBool wrapper = new ResponseProfileQuestionBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/del/by-uuid";

            bool completed = api.DelProfileQuestionByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileQuestionByChannelIdByOrgId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseProfileQuestionBool wrapper = new ResponseProfileQuestionBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/del/by-channel-id/by-org-id";

            bool completed = api.DelProfileQuestionByChannelIdByOrgId(
                        
                _channel_id
                , _org_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileQuestionListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileQuestionList wrapper = new ResponseProfileQuestionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/get/by-uuid";

            List<ProfileQuestion> objs = api.GetProfileQuestionListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileQuestionListByChannelId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseProfileQuestionList wrapper = new ResponseProfileQuestionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/get/by-channel-id";

            List<ProfileQuestion> objs = api.GetProfileQuestionListByChannelId(
                _channel_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileQuestionListByOrgId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseProfileQuestionList wrapper = new ResponseProfileQuestionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/get/by-org-id";

            List<ProfileQuestion> objs = api.GetProfileQuestionListByOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileQuestionListByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileQuestionList wrapper = new ResponseProfileQuestionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/get/by-profile-id";

            List<ProfileQuestion> objs = api.GetProfileQuestionListByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileQuestionListByQuestionId() {
        
            string _question_id = (string)util.GetParamValue(_context, "question_id");

            ResponseProfileQuestionList wrapper = new ResponseProfileQuestionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/get/by-question-id";

            List<ProfileQuestion> objs = api.GetProfileQuestionListByQuestionId(
                _question_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileQuestionListByChannelIdByOrgId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseProfileQuestionList wrapper = new ResponseProfileQuestionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/get/by-channel-id/by-org-id";

            List<ProfileQuestion> objs = api.GetProfileQuestionListByChannelIdByOrgId(
                _channel_id
                , _org_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileQuestionListByChannelIdByProfileId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileQuestionList wrapper = new ResponseProfileQuestionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/get/by-channel-id/by-profile-id";

            List<ProfileQuestion> objs = api.GetProfileQuestionListByChannelIdByProfileId(
                _channel_id
                , _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileQuestionListByQuestionIdByProfileId() {
        
            string _question_id = (string)util.GetParamValue(_context, "question_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileQuestionList wrapper = new ResponseProfileQuestionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-question/get/by-question-id/by-profile-id";

            List<ProfileQuestion> objs = api.GetProfileQuestionListByQuestionIdByProfileId(
                _question_id
                , _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileChannel() {
        

            ResponseProfileChannelInt wrapper = new ResponseProfileChannelInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-channel/count";

            int i = api.CountProfileChannel(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileChannelByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileChannelInt wrapper = new ResponseProfileChannelInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-channel/count/by-uuid";

            int i = api.CountProfileChannelByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileChannelByChannelId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseProfileChannelInt wrapper = new ResponseProfileChannelInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-channel/count/by-channel-id";

            int i = api.CountProfileChannelByChannelId(
                _channel_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileChannelByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileChannelInt wrapper = new ResponseProfileChannelInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-channel/count/by-profile-id";

            int i = api.CountProfileChannelByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileChannelByChannelIdByProfileId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileChannelInt wrapper = new ResponseProfileChannelInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-channel/count/by-channel-id/by-profile-id";

            int i = api.CountProfileChannelByChannelIdByProfileId(
                _channel_id
                , _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseProfileChannelListByFilter()  {
        
            ResponseProfileChannelList wrapper = new ResponseProfileChannelList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-channel/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            ProfileChannelResult result = api.BrowseProfileChannelListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileChannelByUuid()  {
        
            ResponseProfileChannelBool wrapper = new ResponseProfileChannelBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-channel/set/by-uuid";
                        
            ProfileChannel obj = new ProfileChannel();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _channel_id = util.GetParamValue(_context, "channel_id");
            if(!String.IsNullOrEmpty(_channel_id))
                obj.channel_id = (string)_channel_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            
            // get data
            wrapper.data = api.SetProfileChannelByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileChannelByChannelIdByProfileId()  {
        
            ResponseProfileChannelBool wrapper = new ResponseProfileChannelBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-channel/set/by-channel-id/by-profile-id";
                        
            ProfileChannel obj = new ProfileChannel();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _channel_id = util.GetParamValue(_context, "channel_id");
            if(!String.IsNullOrEmpty(_channel_id))
                obj.channel_id = (string)_channel_id;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            
            // get data
            wrapper.data = api.SetProfileChannelByChannelIdByProfileId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileChannelByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileChannelBool wrapper = new ResponseProfileChannelBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-channel/del/by-uuid";

            bool completed = api.DelProfileChannelByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileChannelByChannelIdByProfileId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileChannelBool wrapper = new ResponseProfileChannelBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-channel/del/by-channel-id/by-profile-id";

            bool completed = api.DelProfileChannelByChannelIdByProfileId(
                        
                _channel_id
                , _profile_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileChannelListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileChannelList wrapper = new ResponseProfileChannelList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-channel/get/by-uuid";

            List<ProfileChannel> objs = api.GetProfileChannelListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileChannelListByChannelId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseProfileChannelList wrapper = new ResponseProfileChannelList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-channel/get/by-channel-id";

            List<ProfileChannel> objs = api.GetProfileChannelListByChannelId(
                _channel_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileChannelListByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileChannelList wrapper = new ResponseProfileChannelList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-channel/get/by-profile-id";

            List<ProfileChannel> objs = api.GetProfileChannelListByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileChannelListByChannelIdByProfileId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileChannelList wrapper = new ResponseProfileChannelList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-channel/get/by-channel-id/by-profile-id";

            List<ProfileChannel> objs = api.GetProfileChannelListByChannelIdByProfileId(
                _channel_id
                , _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileRewardPoints() {
        

            ResponseProfileRewardPointsInt wrapper = new ResponseProfileRewardPointsInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward-points/count";

            int i = api.CountProfileRewardPoints(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileRewardPointsByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileRewardPointsInt wrapper = new ResponseProfileRewardPointsInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward-points/count/by-uuid";

            int i = api.CountProfileRewardPointsByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileRewardPointsByChannelId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseProfileRewardPointsInt wrapper = new ResponseProfileRewardPointsInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward-points/count/by-channel-id";

            int i = api.CountProfileRewardPointsByChannelId(
                _channel_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileRewardPointsByOrgId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseProfileRewardPointsInt wrapper = new ResponseProfileRewardPointsInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward-points/count/by-org-id";

            int i = api.CountProfileRewardPointsByOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileRewardPointsByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileRewardPointsInt wrapper = new ResponseProfileRewardPointsInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward-points/count/by-profile-id";

            int i = api.CountProfileRewardPointsByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileRewardPointsByChannelIdByOrgId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseProfileRewardPointsInt wrapper = new ResponseProfileRewardPointsInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward-points/count/by-channel-id/by-org-id";

            int i = api.CountProfileRewardPointsByChannelIdByOrgId(
                _channel_id
                , _org_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileRewardPointsByChannelIdByProfileId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileRewardPointsInt wrapper = new ResponseProfileRewardPointsInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward-points/count/by-channel-id/by-profile-id";

            int i = api.CountProfileRewardPointsByChannelIdByProfileId(
                _channel_id
                , _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseProfileRewardPointsListByFilter()  {
        
            ResponseProfileRewardPointsList wrapper = new ResponseProfileRewardPointsList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward-points/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            ProfileRewardPointsResult result = api.BrowseProfileRewardPointsListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileRewardPointsByUuid()  {
        
            ResponseProfileRewardPointsBool wrapper = new ResponseProfileRewardPointsBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward-points/set/by-uuid";
                        
            ProfileRewardPoints obj = new ProfileRewardPoints();
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _profile_id = util.GetParamValue(_context, "profile_id");
            if(!String.IsNullOrEmpty(_profile_id))
                obj.profile_id = (string)_profile_id;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _org_id = util.GetParamValue(_context, "org_id");
            if(!String.IsNullOrEmpty(_org_id))
                obj.org_id = (string)_org_id;
            
            string _channel_id = util.GetParamValue(_context, "channel_id");
            if(!String.IsNullOrEmpty(_channel_id))
                obj.channel_id = (string)_channel_id;
            
            string _points = util.GetParamValue(_context, "points");
            if(!String.IsNullOrEmpty(_points))
                obj.points = Convert.ToInt32(_points);
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            
            // get data
            wrapper.data = api.SetProfileRewardPointsByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileRewardPointsByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileRewardPointsBool wrapper = new ResponseProfileRewardPointsBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward-points/del/by-uuid";

            bool completed = api.DelProfileRewardPointsByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileRewardPointsByChannelIdByOrgId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseProfileRewardPointsBool wrapper = new ResponseProfileRewardPointsBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward-points/del/by-channel-id/by-org-id";

            bool completed = api.DelProfileRewardPointsByChannelIdByOrgId(
                        
                _channel_id
                , _org_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileRewardPointsListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseProfileRewardPointsList wrapper = new ResponseProfileRewardPointsList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward-points/get/by-uuid";

            List<ProfileRewardPoints> objs = api.GetProfileRewardPointsListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileRewardPointsListByChannelId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseProfileRewardPointsList wrapper = new ResponseProfileRewardPointsList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward-points/get/by-channel-id";

            List<ProfileRewardPoints> objs = api.GetProfileRewardPointsListByChannelId(
                _channel_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileRewardPointsListByOrgId() {
        
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseProfileRewardPointsList wrapper = new ResponseProfileRewardPointsList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward-points/get/by-org-id";

            List<ProfileRewardPoints> objs = api.GetProfileRewardPointsListByOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileRewardPointsListByProfileId() {
        
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileRewardPointsList wrapper = new ResponseProfileRewardPointsList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward-points/get/by-profile-id";

            List<ProfileRewardPoints> objs = api.GetProfileRewardPointsListByProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileRewardPointsListByChannelIdByOrgId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _org_id = (string)util.GetParamValue(_context, "org_id");

            ResponseProfileRewardPointsList wrapper = new ResponseProfileRewardPointsList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward-points/get/by-channel-id/by-org-id";

            List<ProfileRewardPoints> objs = api.GetProfileRewardPointsListByChannelIdByOrgId(
                _channel_id
                , _org_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileRewardPointsListByChannelIdByProfileId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _profile_id = (string)util.GetParamValue(_context, "profile_id");

            ResponseProfileRewardPointsList wrapper = new ResponseProfileRewardPointsList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "profile-reward-points/get/by-channel-id/by-profile-id";

            List<ProfileRewardPoints> objs = api.GetProfileRewardPointsListByChannelIdByProfileId(
                _channel_id
                , _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardCompetitionByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseRewardCompetitionInt wrapper = new ResponseRewardCompetitionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-competition/count/by-uuid";

            int i = api.CountRewardCompetitionByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardCompetitionByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseRewardCompetitionInt wrapper = new ResponseRewardCompetitionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-competition/count/by-code";

            int i = api.CountRewardCompetitionByCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardCompetitionByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseRewardCompetitionInt wrapper = new ResponseRewardCompetitionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-competition/count/by-name";

            int i = api.CountRewardCompetitionByName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardCompetitionByPath() {
        
            string _path = (string)util.GetParamValue(_context, "path");

            ResponseRewardCompetitionInt wrapper = new ResponseRewardCompetitionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-competition/count/by-path";

            int i = api.CountRewardCompetitionByPath(
                _path
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardCompetitionByChannelId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseRewardCompetitionInt wrapper = new ResponseRewardCompetitionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-competition/count/by-channel-id";

            int i = api.CountRewardCompetitionByChannelId(
                _channel_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountRewardCompetitionByChannelIdByCompleted() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            bool _completed = Convert.ToBoolean(util.GetParamValue(_context, "completed"));

            ResponseRewardCompetitionInt wrapper = new ResponseRewardCompetitionInt();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-competition/count/by-channel-id/by-completed";

            int i = api.CountRewardCompetitionByChannelIdByCompleted(
                _channel_id
                , _completed
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseRewardCompetitionListByFilter()  {
        
            ResponseRewardCompetitionList wrapper = new ResponseRewardCompetitionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-competition/browse/by-filter";
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "page-size"));
            obj.filter = util.GetParamValue(_context, "filter");
            
            RewardCompetitionResult result = api.BrowseRewardCompetitionListByFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetRewardCompetitionByUuid()  {
        
            ResponseRewardCompetitionBool wrapper = new ResponseRewardCompetitionBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-competition/set/by-uuid";
                        
            RewardCompetition obj = new RewardCompetition();
            
            string _sort = util.GetParamValue(_context, "sort");
            if(!String.IsNullOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "code");
            if(!String.IsNullOrEmpty(_code))
                obj.code = (string)_code;
            
            string _date_end = util.GetParamValue(_context, "date_end");
            if(!String.IsNullOrEmpty(_date_end))
                obj.date_end = Convert.ToDateTime(_date_end);
            else 
                obj.date_end = DateTime.Now;
            
            string _results = util.GetParamValue(_context, "results");
            if(!String.IsNullOrEmpty(_results))
                obj.results = (string)_results;
            
            string _visible = util.GetParamValue(_context, "visible");
            if(!String.IsNullOrEmpty(_visible))
                obj.visible = Convert.ToBoolean(_visible);
            
            string _display_name = util.GetParamValue(_context, "display_name");
            if(!String.IsNullOrEmpty(_display_name))
                obj.display_name = (string)_display_name;
            
            string _uuid = util.GetParamValue(_context, "uuid");
            if(!String.IsNullOrEmpty(_uuid))
                obj.uuid = (string)_uuid;
            
            string _date_start = util.GetParamValue(_context, "date_start");
            if(!String.IsNullOrEmpty(_date_start))
                obj.date_start = Convert.ToDateTime(_date_start);
            else 
                obj.date_start = DateTime.Now;
            
            string _winners = util.GetParamValue(_context, "winners");
            if(!String.IsNullOrEmpty(_winners))
                obj.winners = (string)_winners;
            
            string _template = util.GetParamValue(_context, "template");
            if(!String.IsNullOrEmpty(_template))
                obj.template = (string)_template;
            
            string _type = util.GetParamValue(_context, "type");
            if(!String.IsNullOrEmpty(_type))
                obj.type = (string)_type;
            
            string _trigger_data = util.GetParamValue(_context, "trigger_data");
            if(!String.IsNullOrEmpty(_trigger_data))
                obj.trigger_data = (string)_trigger_data;
            
            string _status = util.GetParamValue(_context, "status");
            if(!String.IsNullOrEmpty(_status))
                obj.status = (string)_status;
            
            string _description = util.GetParamValue(_context, "description");
            if(!String.IsNullOrEmpty(_description))
                obj.description = (string)_description;
            
            string _completed = util.GetParamValue(_context, "completed");
            if(!String.IsNullOrEmpty(_completed))
                obj.completed = Convert.ToBoolean(_completed);
            
            string _template_url = util.GetParamValue(_context, "template_url");
            if(!String.IsNullOrEmpty(_template_url))
                obj.template_url = (string)_template_url;
            
            string _active = util.GetParamValue(_context, "active");
            if(!String.IsNullOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _path = util.GetParamValue(_context, "path");
            if(!String.IsNullOrEmpty(_path))
                obj.path = (string)_path;
            
            string _data = util.GetParamValue(_context, "data");
            if(!String.IsNullOrEmpty(_data))
                obj.data = (string)_data;
            
            string _name = util.GetParamValue(_context, "name");
            if(!String.IsNullOrEmpty(_name))
                obj.name = (string)_name;
            
            string _date_modified = util.GetParamValue(_context, "date_modified");
            if(!String.IsNullOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _fulfilled = util.GetParamValue(_context, "fulfilled");
            if(!String.IsNullOrEmpty(_fulfilled))
                obj.fulfilled = Convert.ToBoolean(_fulfilled);
            
            string _channel_id = util.GetParamValue(_context, "channel_id");
            if(!String.IsNullOrEmpty(_channel_id))
                obj.channel_id = (string)_channel_id;
            
            string _date_created = util.GetParamValue(_context, "date_created");
            if(!String.IsNullOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            
            // get data
            wrapper.data = api.SetRewardCompetitionByUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelRewardCompetitionByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseRewardCompetitionBool wrapper = new ResponseRewardCompetitionBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-competition/del/by-uuid";

            bool completed = api.DelRewardCompetitionByUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelRewardCompetitionByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseRewardCompetitionBool wrapper = new ResponseRewardCompetitionBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-competition/del/by-code";

            bool completed = api.DelRewardCompetitionByCode(
                        
                _code
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelRewardCompetitionByPathByChannelId() {
        
            string _path = (string)util.GetParamValue(_context, "path");
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseRewardCompetitionBool wrapper = new ResponseRewardCompetitionBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-competition/del/by-path/by-channel-id";

            bool completed = api.DelRewardCompetitionByPathByChannelId(
                        
                _path
                , _channel_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelRewardCompetitionByPath() {
        
            string _path = (string)util.GetParamValue(_context, "path");

            ResponseRewardCompetitionBool wrapper = new ResponseRewardCompetitionBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-competition/del/by-path";

            bool completed = api.DelRewardCompetitionByPath(
                        
                _path
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelRewardCompetitionByChannelIdByPath() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _path = (string)util.GetParamValue(_context, "path");

            ResponseRewardCompetitionBool wrapper = new ResponseRewardCompetitionBool();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-competition/del/by-channel-id/by-path";

            bool completed = api.DelRewardCompetitionByChannelIdByPath(
                        
                _channel_id
                , _path
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardCompetitionListByUuid() {
        
            string _uuid = (string)util.GetParamValue(_context, "uuid");

            ResponseRewardCompetitionList wrapper = new ResponseRewardCompetitionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-competition/get/by-uuid";

            List<RewardCompetition> objs = api.GetRewardCompetitionListByUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardCompetitionListByCode() {
        
            string _code = (string)util.GetParamValue(_context, "code");

            ResponseRewardCompetitionList wrapper = new ResponseRewardCompetitionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-competition/get/by-code";

            List<RewardCompetition> objs = api.GetRewardCompetitionListByCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardCompetitionListByName() {
        
            string _name = (string)util.GetParamValue(_context, "name");

            ResponseRewardCompetitionList wrapper = new ResponseRewardCompetitionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-competition/get/by-name";

            List<RewardCompetition> objs = api.GetRewardCompetitionListByName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardCompetitionListByPath() {
        
            string _path = (string)util.GetParamValue(_context, "path");

            ResponseRewardCompetitionList wrapper = new ResponseRewardCompetitionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-competition/get/by-path";

            List<RewardCompetition> objs = api.GetRewardCompetitionListByPath(
                _path
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardCompetitionListByChannelId() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");

            ResponseRewardCompetitionList wrapper = new ResponseRewardCompetitionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-competition/get/by-channel-id";

            List<RewardCompetition> objs = api.GetRewardCompetitionListByChannelId(
                _channel_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardCompetitionListByChannelIdByCompleted() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            bool _completed = Convert.ToBoolean(util.GetParamValue(_context, "completed"));

            ResponseRewardCompetitionList wrapper = new ResponseRewardCompetitionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-competition/get/by-channel-id/by-completed";

            List<RewardCompetition> objs = api.GetRewardCompetitionListByChannelIdByCompleted(
                _channel_id
                , _completed
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetRewardCompetitionListByChannelIdByPath() {
        
            string _channel_id = (string)util.GetParamValue(_context, "channel_id");
            string _path = (string)util.GetParamValue(_context, "path");

            ResponseRewardCompetitionList wrapper = new ResponseRewardCompetitionList();
            wrapper.message = "Success";
            wrapper.code = 0;
            wrapper.action = "reward-competition/get/by-channel-id/by-path";

            List<RewardCompetition> objs = api.GetRewardCompetitionListByChannelIdByPath(
                _channel_id
                , _path
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
    }
}






