<?php // namespace Gaming;
/*

import ent
from ent import *

class BaseGamingService(object):

    def __init__(self):
        self.path = ''
        self.path_parsed = ''
        self.path_info = ''
        self.qstring = ''
        self.action = ''
        self.action_params = ''
        self.url = ''
        
"""

namespace gaming {

    public class BaseGamingService : IBaseHandler  {	
    
	private static readonly log4net.ILog log = log4net.LogManager.GetLogger("main");
                
        public string path = "";
        public string path_parsed = "";
        public string path_info = "";
        public string qstring = "";

        public string action = "";
        public string action_params = "";

        public string url = "";
        public string ext = ".ashx";

        public HttpContext _context;
        public ServiceUtil util = new ServiceUtil();
        
        public string _format = "json";
    
        public GamingAPI api = new GamingAPI();
        
        public BaseGamingService(){
        
        }
        
        public void ParseServiceParams() {
            _format = util.GetParamValue(_context, "format");
            if(String.IsNoneOrEmpty(_format)){
               _format = util.FORMAT_JSON; 
            }
            
        }
        
        public virtual void Render(HttpContext context) {

            _context = context;
            
            log.Debug("------------------------------------------------------------------------->");
            log.Debug(String.Format("Start Render URL: {0}", HttpContext.Current.Request.Url.ToString()));

            path = context.Request.Url.ToString();
            path_parsed = path.Replace("api/v1/", "");
            path_info = context.Request.PathInfo;
            if(path_parsed.IndexOf("?") > -1)
                    qstring = path_parsed.Split('?')[1];
			
            ParseServiceParams();
                    
            BaseProcessRequest();
            
            // If you need to render a page in the service...
            //StringWriter writer = new StringWriter();
            //HttpContext.Current.Server.Execute("~/main.aspx", writer);
            //string html = writer.ToString();
            //writer.Close();
            //writer.Dispose();
            // Emit the rendered HTML
            //context.Response.Write(html);
        }
        
        public virtual bool IsContext(string action) {
            if(path.IndexOf(action) > -1) {
                return true;
            }
            return false;
        }

        public virtual void BaseProcessRequest() {        
            if(IsContext("game/count")){
                CountGame();
            }
            else if(IsContext("game/count/uuid")){
                CountGameUuid();
            }
            else if(IsContext("game/count/code")){
                CountGameCode();
            }
            else if(IsContext("game/count/name")){
                CountGameName();
            }
            else if(IsContext("game/count/org-id")){
                CountGameOrgId();
            }
            else if(IsContext("game/count/app-id")){
                CountGameAppId();
            }
            else if(IsContext("game/count/org-id/app-id")){
                CountGameOrgIdAppId();
            }
            else if(IsContext("game/browse/filter")){
                BrowseGameListFilter();
            }
            else if(IsContext("game/set/uuid")){
                SetGameUuid();
            }
            else if(IsContext("game/set/code")){
                SetGameCode();
            }
            else if(IsContext("game/set/name")){
                SetGameName();
            }
            else if(IsContext("game/set/org-id")){
                SetGameOrgId();
            }
            else if(IsContext("game/set/app-id")){
                SetGameAppId();
            }
            else if(IsContext("game/set/org-id/app-id")){
                SetGameOrgIdAppId();
            }
            else if(IsContext("game/del/uuid")){
                DelGameUuid();
            }
            else if(IsContext("game/del/code")){
                DelGameCode();
            }
            else if(IsContext("game/del/name")){
                DelGameName();
            }
            else if(IsContext("game/del/org-id")){
                DelGameOrgId();
            }
            else if(IsContext("game/del/app-id")){
                DelGameAppId();
            }
            else if(IsContext("game/del/org-id/app-id")){
                DelGameOrgIdAppId();
            }
            else if(IsContext("game/get")){
                GetGameList();
            }
            else if(IsContext("game/get/uuid")){
                GetGameListUuid();
            }
            else if(IsContext("game/get/code")){
                GetGameListCode();
            }
            else if(IsContext("game/get/name")){
                GetGameListName();
            }
            else if(IsContext("game/get/org-id")){
                GetGameListOrgId();
            }
            else if(IsContext("game/get/app-id")){
                GetGameListAppId();
            }
            else if(IsContext("game/get/org-id/app-id")){
                GetGameListOrgIdAppId();
            }
            if(IsContext("game-category/count")){
                CountGameCategory();
            }
            else if(IsContext("game-category/count/uuid")){
                CountGameCategoryUuid();
            }
            else if(IsContext("game-category/count/code")){
                CountGameCategoryCode();
            }
            else if(IsContext("game-category/count/name")){
                CountGameCategoryName();
            }
            else if(IsContext("game-category/count/org-id")){
                CountGameCategoryOrgId();
            }
            else if(IsContext("game-category/count/type-id")){
                CountGameCategoryTypeId();
            }
            else if(IsContext("game-category/count/org-id/type-id")){
                CountGameCategoryOrgIdTypeId();
            }
            else if(IsContext("game-category/browse/filter")){
                BrowseGameCategoryListFilter();
            }
            else if(IsContext("game-category/set/uuid")){
                SetGameCategoryUuid();
            }
            else if(IsContext("game-category/del/uuid")){
                DelGameCategoryUuid();
            }
            else if(IsContext("game-category/del/code/org-id")){
                DelGameCategoryCodeOrgId();
            }
            else if(IsContext("game-category/del/code/org-id/type-id")){
                DelGameCategoryCodeOrgIdTypeId();
            }
            else if(IsContext("game-category/get")){
                GetGameCategoryList();
            }
            else if(IsContext("game-category/get/uuid")){
                GetGameCategoryListUuid();
            }
            else if(IsContext("game-category/get/code")){
                GetGameCategoryListCode();
            }
            else if(IsContext("game-category/get/name")){
                GetGameCategoryListName();
            }
            else if(IsContext("game-category/get/org-id")){
                GetGameCategoryListOrgId();
            }
            else if(IsContext("game-category/get/type-id")){
                GetGameCategoryListTypeId();
            }
            else if(IsContext("game-category/get/org-id/type-id")){
                GetGameCategoryListOrgIdTypeId();
            }
            if(IsContext("game-category-tree/count")){
                CountGameCategoryTree();
            }
            else if(IsContext("game-category-tree/count/uuid")){
                CountGameCategoryTreeUuid();
            }
            else if(IsContext("game-category-tree/count/parent-id")){
                CountGameCategoryTreeParentId();
            }
            else if(IsContext("game-category-tree/count/category-id")){
                CountGameCategoryTreeCategoryId();
            }
            else if(IsContext("game-category-tree/count/parent-id/category-id")){
                CountGameCategoryTreeParentIdCategoryId();
            }
            else if(IsContext("game-category-tree/browse/filter")){
                BrowseGameCategoryTreeListFilter();
            }
            else if(IsContext("game-category-tree/set/uuid")){
                SetGameCategoryTreeUuid();
            }
            else if(IsContext("game-category-tree/del/uuid")){
                DelGameCategoryTreeUuid();
            }
            else if(IsContext("game-category-tree/del/parent-id")){
                DelGameCategoryTreeParentId();
            }
            else if(IsContext("game-category-tree/del/category-id")){
                DelGameCategoryTreeCategoryId();
            }
            else if(IsContext("game-category-tree/del/parent-id/category-id")){
                DelGameCategoryTreeParentIdCategoryId();
            }
            else if(IsContext("game-category-tree/get")){
                GetGameCategoryTreeList();
            }
            else if(IsContext("game-category-tree/get/uuid")){
                GetGameCategoryTreeListUuid();
            }
            else if(IsContext("game-category-tree/get/parent-id")){
                GetGameCategoryTreeListParentId();
            }
            else if(IsContext("game-category-tree/get/category-id")){
                GetGameCategoryTreeListCategoryId();
            }
            else if(IsContext("game-category-tree/get/parent-id/category-id")){
                GetGameCategoryTreeListParentIdCategoryId();
            }
            if(IsContext("game-category-assoc/count")){
                CountGameCategoryAssoc();
            }
            else if(IsContext("game-category-assoc/count/uuid")){
                CountGameCategoryAssocUuid();
            }
            else if(IsContext("game-category-assoc/count/game-id")){
                CountGameCategoryAssocGameId();
            }
            else if(IsContext("game-category-assoc/count/category-id")){
                CountGameCategoryAssocCategoryId();
            }
            else if(IsContext("game-category-assoc/count/game-id/category-id")){
                CountGameCategoryAssocGameIdCategoryId();
            }
            else if(IsContext("game-category-assoc/browse/filter")){
                BrowseGameCategoryAssocListFilter();
            }
            else if(IsContext("game-category-assoc/set/uuid")){
                SetGameCategoryAssocUuid();
            }
            else if(IsContext("game-category-assoc/del/uuid")){
                DelGameCategoryAssocUuid();
            }
            else if(IsContext("game-category-assoc/get")){
                GetGameCategoryAssocList();
            }
            else if(IsContext("game-category-assoc/get/uuid")){
                GetGameCategoryAssocListUuid();
            }
            else if(IsContext("game-category-assoc/get/game-id")){
                GetGameCategoryAssocListGameId();
            }
            else if(IsContext("game-category-assoc/get/category-id")){
                GetGameCategoryAssocListCategoryId();
            }
            else if(IsContext("game-category-assoc/get/game-id/category-id")){
                GetGameCategoryAssocListGameIdCategoryId();
            }
            if(IsContext("game-type/count")){
                CountGameType();
            }
            else if(IsContext("game-type/count/uuid")){
                CountGameTypeUuid();
            }
            else if(IsContext("game-type/count/code")){
                CountGameTypeCode();
            }
            else if(IsContext("game-type/count/name")){
                CountGameTypeName();
            }
            else if(IsContext("game-type/browse/filter")){
                BrowseGameTypeListFilter();
            }
            else if(IsContext("game-type/set/uuid")){
                SetGameTypeUuid();
            }
            else if(IsContext("game-type/del/uuid")){
                DelGameTypeUuid();
            }
            else if(IsContext("game-type/get")){
                GetGameTypeList();
            }
            else if(IsContext("game-type/get/uuid")){
                GetGameTypeListUuid();
            }
            else if(IsContext("game-type/get/code")){
                GetGameTypeListCode();
            }
            else if(IsContext("game-type/get/name")){
                GetGameTypeListName();
            }
            if(IsContext("profile-game/count")){
                CountProfileGame();
            }
            else if(IsContext("profile-game/count/uuid")){
                CountProfileGameUuid();
            }
            else if(IsContext("profile-game/count/game-id")){
                CountProfileGameGameId();
            }
            else if(IsContext("profile-game/count/profile-id")){
                CountProfileGameProfileId();
            }
            else if(IsContext("profile-game/count/profile-id/game-id")){
                CountProfileGameProfileIdGameId();
            }
            else if(IsContext("profile-game/browse/filter")){
                BrowseProfileGameListFilter();
            }
            else if(IsContext("profile-game/set/uuid")){
                SetProfileGameUuid();
            }
            else if(IsContext("profile-game/del/uuid")){
                DelProfileGameUuid();
            }
            else if(IsContext("profile-game/get")){
                GetProfileGameList();
            }
            else if(IsContext("profile-game/get/uuid")){
                GetProfileGameListUuid();
            }
            else if(IsContext("profile-game/get/game-id")){
                GetProfileGameListGameId();
            }
            else if(IsContext("profile-game/get/profile-id")){
                GetProfileGameListProfileId();
            }
            else if(IsContext("profile-game/get/profile-id/game-id")){
                GetProfileGameListProfileIdGameId();
            }
            if(IsContext("game-network/count")){
                CountGameNetwork();
            }
            else if(IsContext("game-network/count/uuid")){
                CountGameNetworkUuid();
            }
            else if(IsContext("game-network/count/code")){
                CountGameNetworkCode();
            }
            else if(IsContext("game-network/count/uuid/type")){
                CountGameNetworkUuidType();
            }
            else if(IsContext("game-network/browse/filter")){
                BrowseGameNetworkListFilter();
            }
            else if(IsContext("game-network/set/uuid")){
                SetGameNetworkUuid();
            }
            else if(IsContext("game-network/set/code")){
                SetGameNetworkCode();
            }
            else if(IsContext("game-network/del/uuid")){
                DelGameNetworkUuid();
            }
            else if(IsContext("game-network/get")){
                GetGameNetworkList();
            }
            else if(IsContext("game-network/get/uuid")){
                GetGameNetworkListUuid();
            }
            else if(IsContext("game-network/get/code")){
                GetGameNetworkListCode();
            }
            else if(IsContext("game-network/get/uuid/type")){
                GetGameNetworkListUuidType();
            }
            if(IsContext("game-network-auth/count")){
                CountGameNetworkAuth();
            }
            else if(IsContext("game-network-auth/count/uuid")){
                CountGameNetworkAuthUuid();
            }
            else if(IsContext("game-network-auth/count/game-id/game-network-id")){
                CountGameNetworkAuthGameIdGameNetworkId();
            }
            else if(IsContext("game-network-auth/browse/filter")){
                BrowseGameNetworkAuthListFilter();
            }
            else if(IsContext("game-network-auth/set/uuid")){
                SetGameNetworkAuthUuid();
            }
            else if(IsContext("game-network-auth/set/game-id/game-network-id")){
                SetGameNetworkAuthGameIdGameNetworkId();
            }
            else if(IsContext("game-network-auth/del/uuid")){
                DelGameNetworkAuthUuid();
            }
            else if(IsContext("game-network-auth/get")){
                GetGameNetworkAuthList();
            }
            else if(IsContext("game-network-auth/get/uuid")){
                GetGameNetworkAuthListUuid();
            }
            else if(IsContext("game-network-auth/get/game-id/game-network-id")){
                GetGameNetworkAuthListGameIdGameNetworkId();
            }
            if(IsContext("profile-game-network/count")){
                CountProfileGameNetwork();
            }
            else if(IsContext("profile-game-network/count/uuid")){
                CountProfileGameNetworkUuid();
            }
            else if(IsContext("profile-game-network/count/game-id")){
                CountProfileGameNetworkGameId();
            }
            else if(IsContext("profile-game-network/count/profile-id")){
                CountProfileGameNetworkProfileId();
            }
            else if(IsContext("profile-game-network/count/profile-id/game-id")){
                CountProfileGameNetworkProfileIdGameId();
            }
            else if(IsContext("profile-game-network/count/profile-id/game-id")){
                CountProfileGameNetworkProfileIdGameId();
            }
            else if(IsContext("profile-game-network/count/profile-id/game-id/game-network-id")){
                CountProfileGameNetworkProfileIdGameIdGameNetworkId();
            }
            else if(IsContext("profile-game-network/count/network-username/game-id/game-network-id")){
                CountProfileGameNetworkNetworkUsernameGameIdGameNetworkId();
            }
            else if(IsContext("profile-game-network/browse/filter")){
                BrowseProfileGameNetworkListFilter();
            }
            else if(IsContext("profile-game-network/set/uuid")){
                SetProfileGameNetworkUuid();
            }
            else if(IsContext("profile-game-network/set/profile-id/game-id")){
                SetProfileGameNetworkProfileIdGameId();
            }
            else if(IsContext("profile-game-network/set/profile-id/game-id/game-network-id")){
                SetProfileGameNetworkProfileIdGameIdGameNetworkId();
            }
            else if(IsContext("profile-game-network/set/network-username/game-id/game-network-id")){
                SetProfileGameNetworkNetworkUsernameGameIdGameNetworkId();
            }
            else if(IsContext("profile-game-network/del/uuid")){
                DelProfileGameNetworkUuid();
            }
            else if(IsContext("profile-game-network/del/profile-id/game-id")){
                DelProfileGameNetworkProfileIdGameId();
            }
            else if(IsContext("profile-game-network/del/profile-id/game-id/game-network-id")){
                DelProfileGameNetworkProfileIdGameIdGameNetworkId();
            }
            else if(IsContext("profile-game-network/del/network-username/game-id/game-network-id")){
                DelProfileGameNetworkNetworkUsernameGameIdGameNetworkId();
            }
            else if(IsContext("profile-game-network/get")){
                GetProfileGameNetworkList();
            }
            else if(IsContext("profile-game-network/get/uuid")){
                GetProfileGameNetworkListUuid();
            }
            else if(IsContext("profile-game-network/get/game-id")){
                GetProfileGameNetworkListGameId();
            }
            else if(IsContext("profile-game-network/get/profile-id")){
                GetProfileGameNetworkListProfileId();
            }
            else if(IsContext("profile-game-network/get/profile-id/game-id")){
                GetProfileGameNetworkListProfileIdGameId();
            }
            else if(IsContext("profile-game-network/get/profile-id/game-id/game-network-id")){
                GetProfileGameNetworkListProfileIdGameIdGameNetworkId();
            }
            else if(IsContext("profile-game-network/get/network-username/game-id/game-network-id")){
                GetProfileGameNetworkListNetworkUsernameGameIdGameNetworkId();
            }
            if(IsContext("profile-game-data-attribute/count")){
                CountProfileGameDataAttribute();
            }
            else if(IsContext("profile-game-data-attribute/count/uuid")){
                CountProfileGameDataAttributeUuid();
            }
            else if(IsContext("profile-game-data-attribute/count/profile-id")){
                CountProfileGameDataAttributeProfileId();
            }
            else if(IsContext("profile-game-data-attribute/count/profile-id/game-id/code")){
                CountProfileGameDataAttributeProfileIdGameIdCode();
            }
            else if(IsContext("profile-game-data-attribute/browse/filter")){
                BrowseProfileGameDataAttributeListFilter();
            }
            else if(IsContext("profile-game-data-attribute/set/uuid")){
                SetProfileGameDataAttributeUuid();
            }
            else if(IsContext("profile-game-data-attribute/set/profile-id")){
                SetProfileGameDataAttributeProfileId();
            }
            else if(IsContext("profile-game-data-attribute/set/profile-id/game-id/code")){
                SetProfileGameDataAttributeProfileIdGameIdCode();
            }
            else if(IsContext("profile-game-data-attribute/del/uuid")){
                DelProfileGameDataAttributeUuid();
            }
            else if(IsContext("profile-game-data-attribute/del/profile-id")){
                DelProfileGameDataAttributeProfileId();
            }
            else if(IsContext("profile-game-data-attribute/del/profile-id/game-id/code")){
                DelProfileGameDataAttributeProfileIdGameIdCode();
            }
            else if(IsContext("profile-game-data-attribute/get/uuid")){
                GetProfileGameDataAttributeListUuid();
            }
            else if(IsContext("profile-game-data-attribute/get/profile-id")){
                GetProfileGameDataAttributeListProfileId();
            }
            else if(IsContext("profile-game-data-attribute/get/profile-id/game-id/code")){
                GetProfileGameDataAttributeListProfileIdGameIdCode();
            }
            if(IsContext("game-session/count")){
                CountGameSession();
            }
            else if(IsContext("game-session/count/uuid")){
                CountGameSessionUuid();
            }
            else if(IsContext("game-session/count/game-id")){
                CountGameSessionGameId();
            }
            else if(IsContext("game-session/count/profile-id")){
                CountGameSessionProfileId();
            }
            else if(IsContext("game-session/count/profile-id/game-id")){
                CountGameSessionProfileIdGameId();
            }
            else if(IsContext("game-session/browse/filter")){
                BrowseGameSessionListFilter();
            }
            else if(IsContext("game-session/set/uuid")){
                SetGameSessionUuid();
            }
            else if(IsContext("game-session/del/uuid")){
                DelGameSessionUuid();
            }
            else if(IsContext("game-session/get")){
                GetGameSessionList();
            }
            else if(IsContext("game-session/get/uuid")){
                GetGameSessionListUuid();
            }
            else if(IsContext("game-session/get/game-id")){
                GetGameSessionListGameId();
            }
            else if(IsContext("game-session/get/profile-id")){
                GetGameSessionListProfileId();
            }
            else if(IsContext("game-session/get/profile-id/game-id")){
                GetGameSessionListProfileIdGameId();
            }
            if(IsContext("game-session-data/count")){
                CountGameSessionData();
            }
            else if(IsContext("game-session-data/count/uuid")){
                CountGameSessionDataUuid();
            }
            else if(IsContext("game-session-data/browse/filter")){
                BrowseGameSessionDataListFilter();
            }
            else if(IsContext("game-session-data/set/uuid")){
                SetGameSessionDataUuid();
            }
            else if(IsContext("game-session-data/del/uuid")){
                DelGameSessionDataUuid();
            }
            else if(IsContext("game-session-data/get")){
                GetGameSessionDataList();
            }
            else if(IsContext("game-session-data/get/uuid")){
                GetGameSessionDataListUuid();
            }
            if(IsContext("game-content/count")){
                CountGameContent();
            }
            else if(IsContext("game-content/count/uuid")){
                CountGameContentUuid();
            }
            else if(IsContext("game-content/count/game-id")){
                CountGameContentGameId();
            }
            else if(IsContext("game-content/count/game-id/path")){
                CountGameContentGameIdPath();
            }
            else if(IsContext("game-content/count/game-id/path/version")){
                CountGameContentGameIdPathVersion();
            }
            else if(IsContext("game-content/count/game-id/path/version/platform/increment")){
                CountGameContentGameIdPathVersionPlatformIncrement();
            }
            else if(IsContext("game-content/browse/filter")){
                BrowseGameContentListFilter();
            }
            else if(IsContext("game-content/set/uuid")){
                SetGameContentUuid();
            }
            else if(IsContext("game-content/set/game-id")){
                SetGameContentGameId();
            }
            else if(IsContext("game-content/set/game-id/path")){
                SetGameContentGameIdPath();
            }
            else if(IsContext("game-content/set/game-id/path/version")){
                SetGameContentGameIdPathVersion();
            }
            else if(IsContext("game-content/set/game-id/path/version/platform/increment")){
                SetGameContentGameIdPathVersionPlatformIncrement();
            }
            else if(IsContext("game-content/del/uuid")){
                DelGameContentUuid();
            }
            else if(IsContext("game-content/del/game-id")){
                DelGameContentGameId();
            }
            else if(IsContext("game-content/del/game-id/path")){
                DelGameContentGameIdPath();
            }
            else if(IsContext("game-content/del/game-id/path/version")){
                DelGameContentGameIdPathVersion();
            }
            else if(IsContext("game-content/del/game-id/path/version/platform/increment")){
                DelGameContentGameIdPathVersionPlatformIncrement();
            }
            else if(IsContext("game-content/get")){
                GetGameContentList();
            }
            else if(IsContext("game-content/get/uuid")){
                GetGameContentListUuid();
            }
            else if(IsContext("game-content/get/game-id")){
                GetGameContentListGameId();
            }
            else if(IsContext("game-content/get/game-id/path")){
                GetGameContentListGameIdPath();
            }
            else if(IsContext("game-content/get/game-id/path/version")){
                GetGameContentListGameIdPathVersion();
            }
            else if(IsContext("game-content/get/game-id/path/version/platform/increment")){
                GetGameContentListGameIdPathVersionPlatformIncrement();
            }
            if(IsContext("game-profile-content/count")){
                CountGameProfileContent();
            }
            else if(IsContext("game-profile-content/count/uuid")){
                CountGameProfileContentUuid();
            }
            else if(IsContext("game-profile-content/count/game-id/profile-id")){
                CountGameProfileContentGameIdProfileId();
            }
            else if(IsContext("game-profile-content/count/game-id/username")){
                CountGameProfileContentGameIdUsername();
            }
            else if(IsContext("game-profile-content/count/username")){
                CountGameProfileContentUsername();
            }
            else if(IsContext("game-profile-content/count/game-id/profile-id/path")){
                CountGameProfileContentGameIdProfileIdPath();
            }
            else if(IsContext("game-profile-content/count/game-id/profile-id/path/version")){
                CountGameProfileContentGameIdProfileIdPathVersion();
            }
            else if(IsContext("game-profile-content/count/game-id/profile-id/path/version/platform/increment")){
                CountGameProfileContentGameIdProfileIdPathVersionPlatformIncrement();
            }
            else if(IsContext("game-profile-content/count/game-id/username/path")){
                CountGameProfileContentGameIdUsernamePath();
            }
            else if(IsContext("game-profile-content/count/game-id/username/path/version")){
                CountGameProfileContentGameIdUsernamePathVersion();
            }
            else if(IsContext("game-profile-content/count/game-id/username/path/version/platform/increment")){
                CountGameProfileContentGameIdUsernamePathVersionPlatformIncrement();
            }
            else if(IsContext("game-profile-content/browse/filter")){
                BrowseGameProfileContentListFilter();
            }
            else if(IsContext("game-profile-content/set/uuid")){
                SetGameProfileContentUuid();
            }
            else if(IsContext("game-profile-content/set/game-id/profile-id")){
                SetGameProfileContentGameIdProfileId();
            }
            else if(IsContext("game-profile-content/set/game-id/username")){
                SetGameProfileContentGameIdUsername();
            }
            else if(IsContext("game-profile-content/set/username")){
                SetGameProfileContentUsername();
            }
            else if(IsContext("game-profile-content/set/game-id/profile-id/path")){
                SetGameProfileContentGameIdProfileIdPath();
            }
            else if(IsContext("game-profile-content/set/game-id/profile-id/path/version")){
                SetGameProfileContentGameIdProfileIdPathVersion();
            }
            else if(IsContext("game-profile-content/set/game-id/profile-id/path/version/platform/increment")){
                SetGameProfileContentGameIdProfileIdPathVersionPlatformIncrement();
            }
            else if(IsContext("game-profile-content/set/game-id/username/path")){
                SetGameProfileContentGameIdUsernamePath();
            }
            else if(IsContext("game-profile-content/set/game-id/username/path/version")){
                SetGameProfileContentGameIdUsernamePathVersion();
            }
            else if(IsContext("game-profile-content/set/game-id/username/path/version/platform/increment")){
                SetGameProfileContentGameIdUsernamePathVersionPlatformIncrement();
            }
            else if(IsContext("game-profile-content/del/uuid")){
                DelGameProfileContentUuid();
            }
            else if(IsContext("game-profile-content/del/game-id/profile-id")){
                DelGameProfileContentGameIdProfileId();
            }
            else if(IsContext("game-profile-content/del/game-id/username")){
                DelGameProfileContentGameIdUsername();
            }
            else if(IsContext("game-profile-content/del/username")){
                DelGameProfileContentUsername();
            }
            else if(IsContext("game-profile-content/del/game-id/profile-id/path")){
                DelGameProfileContentGameIdProfileIdPath();
            }
            else if(IsContext("game-profile-content/del/game-id/profile-id/path/version")){
                DelGameProfileContentGameIdProfileIdPathVersion();
            }
            else if(IsContext("game-profile-content/del/game-id/profile-id/path/version/platform/increment")){
                DelGameProfileContentGameIdProfileIdPathVersionPlatformIncrement();
            }
            else if(IsContext("game-profile-content/del/game-id/username/path")){
                DelGameProfileContentGameIdUsernamePath();
            }
            else if(IsContext("game-profile-content/del/game-id/username/path/version")){
                DelGameProfileContentGameIdUsernamePathVersion();
            }
            else if(IsContext("game-profile-content/del/game-id/username/path/version/platform/increment")){
                DelGameProfileContentGameIdUsernamePathVersionPlatformIncrement();
            }
            else if(IsContext("game-profile-content/get")){
                GetGameProfileContentList();
            }
            else if(IsContext("game-profile-content/get/uuid")){
                GetGameProfileContentListUuid();
            }
            else if(IsContext("game-profile-content/get/game-id/profile-id")){
                GetGameProfileContentListGameIdProfileId();
            }
            else if(IsContext("game-profile-content/get/game-id/username")){
                GetGameProfileContentListGameIdUsername();
            }
            else if(IsContext("game-profile-content/get/username")){
                GetGameProfileContentListUsername();
            }
            else if(IsContext("game-profile-content/get/game-id/profile-id/path")){
                GetGameProfileContentListGameIdProfileIdPath();
            }
            else if(IsContext("game-profile-content/get/game-id/profile-id/path/version")){
                GetGameProfileContentListGameIdProfileIdPathVersion();
            }
            else if(IsContext("game-profile-content/get/game-id/profile-id/path/version/platform/increment")){
                GetGameProfileContentListGameIdProfileIdPathVersionPlatformIncrement();
            }
            else if(IsContext("game-profile-content/get/game-id/username/path")){
                GetGameProfileContentListGameIdUsernamePath();
            }
            else if(IsContext("game-profile-content/get/game-id/username/path/version")){
                GetGameProfileContentListGameIdUsernamePathVersion();
            }
            else if(IsContext("game-profile-content/get/game-id/username/path/version/platform/increment")){
                GetGameProfileContentListGameIdUsernamePathVersionPlatformIncrement();
            }
            if(IsContext("game-app/count")){
                CountGameApp();
            }
            else if(IsContext("game-app/count/uuid")){
                CountGameAppUuid();
            }
            else if(IsContext("game-app/count/game-id")){
                CountGameAppGameId();
            }
            else if(IsContext("game-app/count/app-id")){
                CountGameAppAppId();
            }
            else if(IsContext("game-app/count/game-id/app-id")){
                CountGameAppGameIdAppId();
            }
            else if(IsContext("game-app/browse/filter")){
                BrowseGameAppListFilter();
            }
            else if(IsContext("game-app/set/uuid")){
                SetGameAppUuid();
            }
            else if(IsContext("game-app/del/uuid")){
                DelGameAppUuid();
            }
            else if(IsContext("game-app/get")){
                GetGameAppList();
            }
            else if(IsContext("game-app/get/uuid")){
                GetGameAppListUuid();
            }
            else if(IsContext("game-app/get/game-id")){
                GetGameAppListGameId();
            }
            else if(IsContext("game-app/get/app-id")){
                GetGameAppListAppId();
            }
            else if(IsContext("game-app/get/game-id/app-id")){
                GetGameAppListGameIdAppId();
            }
            if(IsContext("profile-game-location/count")){
                CountProfileGameLocation();
            }
            else if(IsContext("profile-game-location/count/uuid")){
                CountProfileGameLocationUuid();
            }
            else if(IsContext("profile-game-location/count/game-location-id")){
                CountProfileGameLocationGameLocationId();
            }
            else if(IsContext("profile-game-location/count/profile-id")){
                CountProfileGameLocationProfileId();
            }
            else if(IsContext("profile-game-location/count/profile-id/game-location-id")){
                CountProfileGameLocationProfileIdGameLocationId();
            }
            else if(IsContext("profile-game-location/browse/filter")){
                BrowseProfileGameLocationListFilter();
            }
            else if(IsContext("profile-game-location/set/uuid")){
                SetProfileGameLocationUuid();
            }
            else if(IsContext("profile-game-location/del/uuid")){
                DelProfileGameLocationUuid();
            }
            else if(IsContext("profile-game-location/get")){
                GetProfileGameLocationList();
            }
            else if(IsContext("profile-game-location/get/uuid")){
                GetProfileGameLocationListUuid();
            }
            else if(IsContext("profile-game-location/get/game-location-id")){
                GetProfileGameLocationListGameLocationId();
            }
            else if(IsContext("profile-game-location/get/profile-id")){
                GetProfileGameLocationListProfileId();
            }
            else if(IsContext("profile-game-location/get/profile-id/game-location-id")){
                GetProfileGameLocationListProfileIdGameLocationId();
            }
            if(IsContext("game-photo/count")){
                CountGamePhoto();
            }
            else if(IsContext("game-photo/count/uuid")){
                CountGamePhotoUuid();
            }
            else if(IsContext("game-photo/count/external-id")){
                CountGamePhotoExternalId();
            }
            else if(IsContext("game-photo/count/url")){
                CountGamePhotoUrl();
            }
            else if(IsContext("game-photo/count/url/external-id")){
                CountGamePhotoUrlExternalId();
            }
            else if(IsContext("game-photo/count/uuid/external-id")){
                CountGamePhotoUuidExternalId();
            }
            else if(IsContext("game-photo/browse/filter")){
                BrowseGamePhotoListFilter();
            }
            else if(IsContext("game-photo/set/uuid")){
                SetGamePhotoUuid();
            }
            else if(IsContext("game-photo/set/external-id")){
                SetGamePhotoExternalId();
            }
            else if(IsContext("game-photo/set/url")){
                SetGamePhotoUrl();
            }
            else if(IsContext("game-photo/set/url/external-id")){
                SetGamePhotoUrlExternalId();
            }
            else if(IsContext("game-photo/set/uuid/external-id")){
                SetGamePhotoUuidExternalId();
            }
            else if(IsContext("game-photo/del/uuid")){
                DelGamePhotoUuid();
            }
            else if(IsContext("game-photo/del/external-id")){
                DelGamePhotoExternalId();
            }
            else if(IsContext("game-photo/del/url")){
                DelGamePhotoUrl();
            }
            else if(IsContext("game-photo/del/url/external-id")){
                DelGamePhotoUrlExternalId();
            }
            else if(IsContext("game-photo/del/uuid/external-id")){
                DelGamePhotoUuidExternalId();
            }
            else if(IsContext("game-photo/get")){
                GetGamePhotoList();
            }
            else if(IsContext("game-photo/get/uuid")){
                GetGamePhotoListUuid();
            }
            else if(IsContext("game-photo/get/external-id")){
                GetGamePhotoListExternalId();
            }
            else if(IsContext("game-photo/get/url")){
                GetGamePhotoListUrl();
            }
            else if(IsContext("game-photo/get/url/external-id")){
                GetGamePhotoListUrlExternalId();
            }
            else if(IsContext("game-photo/get/uuid/external-id")){
                GetGamePhotoListUuidExternalId();
            }
            if(IsContext("game-video/count")){
                CountGameVideo();
            }
            else if(IsContext("game-video/count/uuid")){
                CountGameVideoUuid();
            }
            else if(IsContext("game-video/count/external-id")){
                CountGameVideoExternalId();
            }
            else if(IsContext("game-video/count/url")){
                CountGameVideoUrl();
            }
            else if(IsContext("game-video/count/url/external-id")){
                CountGameVideoUrlExternalId();
            }
            else if(IsContext("game-video/count/uuid/external-id")){
                CountGameVideoUuidExternalId();
            }
            else if(IsContext("game-video/browse/filter")){
                BrowseGameVideoListFilter();
            }
            else if(IsContext("game-video/set/uuid")){
                SetGameVideoUuid();
            }
            else if(IsContext("game-video/set/external-id")){
                SetGameVideoExternalId();
            }
            else if(IsContext("game-video/set/url")){
                SetGameVideoUrl();
            }
            else if(IsContext("game-video/set/url/external-id")){
                SetGameVideoUrlExternalId();
            }
            else if(IsContext("game-video/set/uuid/external-id")){
                SetGameVideoUuidExternalId();
            }
            else if(IsContext("game-video/del/uuid")){
                DelGameVideoUuid();
            }
            else if(IsContext("game-video/del/external-id")){
                DelGameVideoExternalId();
            }
            else if(IsContext("game-video/del/url")){
                DelGameVideoUrl();
            }
            else if(IsContext("game-video/del/url/external-id")){
                DelGameVideoUrlExternalId();
            }
            else if(IsContext("game-video/del/uuid/external-id")){
                DelGameVideoUuidExternalId();
            }
            else if(IsContext("game-video/get")){
                GetGameVideoList();
            }
            else if(IsContext("game-video/get/uuid")){
                GetGameVideoListUuid();
            }
            else if(IsContext("game-video/get/external-id")){
                GetGameVideoListExternalId();
            }
            else if(IsContext("game-video/get/url")){
                GetGameVideoListUrl();
            }
            else if(IsContext("game-video/get/url/external-id")){
                GetGameVideoListUrlExternalId();
            }
            else if(IsContext("game-video/get/uuid/external-id")){
                GetGameVideoListUuidExternalId();
            }
            if(IsContext("game-rpg-item/count")){
                CountGameRpgItem();
            }
            else if(IsContext("game-rpg-item/count/uuid")){
                CountGameRpgItemUuid();
            }
            else if(IsContext("game-rpg-item/count/game-id")){
                CountGameRpgItemGameId();
            }
            else if(IsContext("game-rpg-item/count/url")){
                CountGameRpgItemUrl();
            }
            else if(IsContext("game-rpg-item/count/url/game-id")){
                CountGameRpgItemUrlGameId();
            }
            else if(IsContext("game-rpg-item/count/uuid/game-id")){
                CountGameRpgItemUuidGameId();
            }
            else if(IsContext("game-rpg-item/browse/filter")){
                BrowseGameRpgItemListFilter();
            }
            else if(IsContext("game-rpg-item/set/uuid")){
                SetGameRpgItemUuid();
            }
            else if(IsContext("game-rpg-item/set/game-id")){
                SetGameRpgItemGameId();
            }
            else if(IsContext("game-rpg-item/set/url")){
                SetGameRpgItemUrl();
            }
            else if(IsContext("game-rpg-item/set/url/game-id")){
                SetGameRpgItemUrlGameId();
            }
            else if(IsContext("game-rpg-item/set/uuid/game-id")){
                SetGameRpgItemUuidGameId();
            }
            else if(IsContext("game-rpg-item/del/uuid")){
                DelGameRpgItemUuid();
            }
            else if(IsContext("game-rpg-item/del/game-id")){
                DelGameRpgItemGameId();
            }
            else if(IsContext("game-rpg-item/del/url")){
                DelGameRpgItemUrl();
            }
            else if(IsContext("game-rpg-item/del/url/game-id")){
                DelGameRpgItemUrlGameId();
            }
            else if(IsContext("game-rpg-item/del/uuid/game-id")){
                DelGameRpgItemUuidGameId();
            }
            else if(IsContext("game-rpg-item/get")){
                GetGameRpgItemList();
            }
            else if(IsContext("game-rpg-item/get/uuid")){
                GetGameRpgItemListUuid();
            }
            else if(IsContext("game-rpg-item/get/game-id")){
                GetGameRpgItemListGameId();
            }
            else if(IsContext("game-rpg-item/get/url")){
                GetGameRpgItemListUrl();
            }
            else if(IsContext("game-rpg-item/get/url/game-id")){
                GetGameRpgItemListUrlGameId();
            }
            else if(IsContext("game-rpg-item/get/uuid/game-id")){
                GetGameRpgItemListUuidGameId();
            }
            if(IsContext("game-rpg-item-weapon/count")){
                CountGameRpgItemWeapon();
            }
            else if(IsContext("game-rpg-item-weapon/count/uuid")){
                CountGameRpgItemWeaponUuid();
            }
            else if(IsContext("game-rpg-item-weapon/count/game-id")){
                CountGameRpgItemWeaponGameId();
            }
            else if(IsContext("game-rpg-item-weapon/count/url")){
                CountGameRpgItemWeaponUrl();
            }
            else if(IsContext("game-rpg-item-weapon/count/url/game-id")){
                CountGameRpgItemWeaponUrlGameId();
            }
            else if(IsContext("game-rpg-item-weapon/count/uuid/game-id")){
                CountGameRpgItemWeaponUuidGameId();
            }
            else if(IsContext("game-rpg-item-weapon/browse/filter")){
                BrowseGameRpgItemWeaponListFilter();
            }
            else if(IsContext("game-rpg-item-weapon/set/uuid")){
                SetGameRpgItemWeaponUuid();
            }
            else if(IsContext("game-rpg-item-weapon/set/game-id")){
                SetGameRpgItemWeaponGameId();
            }
            else if(IsContext("game-rpg-item-weapon/set/url")){
                SetGameRpgItemWeaponUrl();
            }
            else if(IsContext("game-rpg-item-weapon/set/url/game-id")){
                SetGameRpgItemWeaponUrlGameId();
            }
            else if(IsContext("game-rpg-item-weapon/set/uuid/game-id")){
                SetGameRpgItemWeaponUuidGameId();
            }
            else if(IsContext("game-rpg-item-weapon/del/uuid")){
                DelGameRpgItemWeaponUuid();
            }
            else if(IsContext("game-rpg-item-weapon/del/game-id")){
                DelGameRpgItemWeaponGameId();
            }
            else if(IsContext("game-rpg-item-weapon/del/url")){
                DelGameRpgItemWeaponUrl();
            }
            else if(IsContext("game-rpg-item-weapon/del/url/game-id")){
                DelGameRpgItemWeaponUrlGameId();
            }
            else if(IsContext("game-rpg-item-weapon/del/uuid/game-id")){
                DelGameRpgItemWeaponUuidGameId();
            }
            else if(IsContext("game-rpg-item-weapon/get")){
                GetGameRpgItemWeaponList();
            }
            else if(IsContext("game-rpg-item-weapon/get/uuid")){
                GetGameRpgItemWeaponListUuid();
            }
            else if(IsContext("game-rpg-item-weapon/get/game-id")){
                GetGameRpgItemWeaponListGameId();
            }
            else if(IsContext("game-rpg-item-weapon/get/url")){
                GetGameRpgItemWeaponListUrl();
            }
            else if(IsContext("game-rpg-item-weapon/get/url/game-id")){
                GetGameRpgItemWeaponListUrlGameId();
            }
            else if(IsContext("game-rpg-item-weapon/get/uuid/game-id")){
                GetGameRpgItemWeaponListUuidGameId();
            }
            if(IsContext("game-rpg-item-skill/count")){
                CountGameRpgItemSkill();
            }
            else if(IsContext("game-rpg-item-skill/count/uuid")){
                CountGameRpgItemSkillUuid();
            }
            else if(IsContext("game-rpg-item-skill/count/game-id")){
                CountGameRpgItemSkillGameId();
            }
            else if(IsContext("game-rpg-item-skill/count/url")){
                CountGameRpgItemSkillUrl();
            }
            else if(IsContext("game-rpg-item-skill/count/url/game-id")){
                CountGameRpgItemSkillUrlGameId();
            }
            else if(IsContext("game-rpg-item-skill/count/uuid/game-id")){
                CountGameRpgItemSkillUuidGameId();
            }
            else if(IsContext("game-rpg-item-skill/browse/filter")){
                BrowseGameRpgItemSkillListFilter();
            }
            else if(IsContext("game-rpg-item-skill/set/uuid")){
                SetGameRpgItemSkillUuid();
            }
            else if(IsContext("game-rpg-item-skill/set/game-id")){
                SetGameRpgItemSkillGameId();
            }
            else if(IsContext("game-rpg-item-skill/set/url")){
                SetGameRpgItemSkillUrl();
            }
            else if(IsContext("game-rpg-item-skill/set/url/game-id")){
                SetGameRpgItemSkillUrlGameId();
            }
            else if(IsContext("game-rpg-item-skill/set/uuid/game-id")){
                SetGameRpgItemSkillUuidGameId();
            }
            else if(IsContext("game-rpg-item-skill/del/uuid")){
                DelGameRpgItemSkillUuid();
            }
            else if(IsContext("game-rpg-item-skill/del/game-id")){
                DelGameRpgItemSkillGameId();
            }
            else if(IsContext("game-rpg-item-skill/del/url")){
                DelGameRpgItemSkillUrl();
            }
            else if(IsContext("game-rpg-item-skill/del/url/game-id")){
                DelGameRpgItemSkillUrlGameId();
            }
            else if(IsContext("game-rpg-item-skill/del/uuid/game-id")){
                DelGameRpgItemSkillUuidGameId();
            }
            else if(IsContext("game-rpg-item-skill/get")){
                GetGameRpgItemSkillList();
            }
            else if(IsContext("game-rpg-item-skill/get/uuid")){
                GetGameRpgItemSkillListUuid();
            }
            else if(IsContext("game-rpg-item-skill/get/game-id")){
                GetGameRpgItemSkillListGameId();
            }
            else if(IsContext("game-rpg-item-skill/get/url")){
                GetGameRpgItemSkillListUrl();
            }
            else if(IsContext("game-rpg-item-skill/get/url/game-id")){
                GetGameRpgItemSkillListUrlGameId();
            }
            else if(IsContext("game-rpg-item-skill/get/uuid/game-id")){
                GetGameRpgItemSkillListUuidGameId();
            }
            if(IsContext("game-product/count")){
                CountGameProduct();
            }
            else if(IsContext("game-product/count/uuid")){
                CountGameProductUuid();
            }
            else if(IsContext("game-product/count/game-id")){
                CountGameProductGameId();
            }
            else if(IsContext("game-product/count/url")){
                CountGameProductUrl();
            }
            else if(IsContext("game-product/count/url/game-id")){
                CountGameProductUrlGameId();
            }
            else if(IsContext("game-product/count/uuid/game-id")){
                CountGameProductUuidGameId();
            }
            else if(IsContext("game-product/browse/filter")){
                BrowseGameProductListFilter();
            }
            else if(IsContext("game-product/set/uuid")){
                SetGameProductUuid();
            }
            else if(IsContext("game-product/set/game-id")){
                SetGameProductGameId();
            }
            else if(IsContext("game-product/set/url")){
                SetGameProductUrl();
            }
            else if(IsContext("game-product/set/url/game-id")){
                SetGameProductUrlGameId();
            }
            else if(IsContext("game-product/set/uuid/game-id")){
                SetGameProductUuidGameId();
            }
            else if(IsContext("game-product/del/uuid")){
                DelGameProductUuid();
            }
            else if(IsContext("game-product/del/game-id")){
                DelGameProductGameId();
            }
            else if(IsContext("game-product/del/url")){
                DelGameProductUrl();
            }
            else if(IsContext("game-product/del/url/game-id")){
                DelGameProductUrlGameId();
            }
            else if(IsContext("game-product/del/uuid/game-id")){
                DelGameProductUuidGameId();
            }
            else if(IsContext("game-product/get")){
                GetGameProductList();
            }
            else if(IsContext("game-product/get/uuid")){
                GetGameProductListUuid();
            }
            else if(IsContext("game-product/get/game-id")){
                GetGameProductListGameId();
            }
            else if(IsContext("game-product/get/url")){
                GetGameProductListUrl();
            }
            else if(IsContext("game-product/get/url/game-id")){
                GetGameProductListUrlGameId();
            }
            else if(IsContext("game-product/get/uuid/game-id")){
                GetGameProductListUuidGameId();
            }
            if(IsContext("game-statistic-leaderboard/count")){
                CountGameStatisticLeaderboard();
            }
            else if(IsContext("game-statistic-leaderboard/count/uuid")){
                CountGameStatisticLeaderboardUuid();
            }
            else if(IsContext("game-statistic-leaderboard/count/game-id")){
                CountGameStatisticLeaderboardGameId();
            }
            else if(IsContext("game-statistic-leaderboard/count/code")){
                CountGameStatisticLeaderboardCode();
            }
            else if(IsContext("game-statistic-leaderboard/count/code/game-id")){
                CountGameStatisticLeaderboardCodeGameId();
            }
            else if(IsContext("game-statistic-leaderboard/count/code/game-id/profile-id")){
                CountGameStatisticLeaderboardCodeGameIdProfileId();
            }
            else if(IsContext("game-statistic-leaderboard/count/code/game-id/profile-id/timestamp")){
                CountGameStatisticLeaderboardCodeGameIdProfileIdTimestamp();
            }
            else if(IsContext("game-statistic-leaderboard/count/profile-id/game-id")){
                CountGameStatisticLeaderboardProfileIdGameId();
            }
            else if(IsContext("game-statistic-leaderboard/browse/filter")){
                BrowseGameStatisticLeaderboardListFilter();
            }
            else if(IsContext("game-statistic-leaderboard/set/uuid")){
                SetGameStatisticLeaderboardUuid();
            }
            else if(IsContext("game-statistic-leaderboard/set/uuid/profile-id/game-id/timestamp")){
                SetGameStatisticLeaderboardUuidProfileIdGameIdTimestamp();
            }
            else if(IsContext("game-statistic-leaderboard/set/code")){
                SetGameStatisticLeaderboardCode();
            }
            else if(IsContext("game-statistic-leaderboard/set/code/game-id")){
                SetGameStatisticLeaderboardCodeGameId();
            }
            else if(IsContext("game-statistic-leaderboard/set/code/game-id/profile-id")){
                SetGameStatisticLeaderboardCodeGameIdProfileId();
            }
            else if(IsContext("game-statistic-leaderboard/set/code/game-id/profile-id/timestamp")){
                SetGameStatisticLeaderboardCodeGameIdProfileIdTimestamp();
            }
            else if(IsContext("game-statistic-leaderboard/del/uuid")){
                DelGameStatisticLeaderboardUuid();
            }
            else if(IsContext("game-statistic-leaderboard/del/code")){
                DelGameStatisticLeaderboardCode();
            }
            else if(IsContext("game-statistic-leaderboard/del/code/game-id")){
                DelGameStatisticLeaderboardCodeGameId();
            }
            else if(IsContext("game-statistic-leaderboard/del/code/game-id/profile-id")){
                DelGameStatisticLeaderboardCodeGameIdProfileId();
            }
            else if(IsContext("game-statistic-leaderboard/del/code/game-id/profile-id/timestamp")){
                DelGameStatisticLeaderboardCodeGameIdProfileIdTimestamp();
            }
            else if(IsContext("game-statistic-leaderboard/del/profile-id/game-id")){
                DelGameStatisticLeaderboardProfileIdGameId();
            }
            else if(IsContext("game-statistic-leaderboard/get")){
                GetGameStatisticLeaderboardList();
            }
            else if(IsContext("game-statistic-leaderboard/get/uuid")){
                GetGameStatisticLeaderboardListUuid();
            }
            else if(IsContext("game-statistic-leaderboard/get/game-id")){
                GetGameStatisticLeaderboardListGameId();
            }
            else if(IsContext("game-statistic-leaderboard/get/code")){
                GetGameStatisticLeaderboardListCode();
            }
            else if(IsContext("game-statistic-leaderboard/get/code/game-id")){
                GetGameStatisticLeaderboardListCodeGameId();
            }
            else if(IsContext("game-statistic-leaderboard/get/code/game-id/profile-id")){
                GetGameStatisticLeaderboardListCodeGameIdProfileId();
            }
            else if(IsContext("game-statistic-leaderboard/get/code/game-id/profile-id/timestamp")){
                GetGameStatisticLeaderboardListCodeGameIdProfileIdTimestamp();
            }
            else if(IsContext("game-statistic-leaderboard/get/profile-id/game-id")){
                GetGameStatisticLeaderboardListProfileIdGameId();
            }
            else if(IsContext("game-statistic-leaderboard/get/profile-id/game-id/timestamp")){
                GetGameStatisticLeaderboardListProfileIdGameIdTimestamp();
            }
            if(IsContext("game-statistic-leaderboard-item/count")){
                CountGameStatisticLeaderboardItem();
            }
            else if(IsContext("game-statistic-leaderboard-item/count/uuid")){
                CountGameStatisticLeaderboardItemUuid();
            }
            else if(IsContext("game-statistic-leaderboard-item/count/game-id")){
                CountGameStatisticLeaderboardItemGameId();
            }
            else if(IsContext("game-statistic-leaderboard-item/count/code")){
                CountGameStatisticLeaderboardItemCode();
            }
            else if(IsContext("game-statistic-leaderboard-item/count/code/game-id")){
                CountGameStatisticLeaderboardItemCodeGameId();
            }
            else if(IsContext("game-statistic-leaderboard-item/count/code/game-id/profile-id")){
                CountGameStatisticLeaderboardItemCodeGameIdProfileId();
            }
            else if(IsContext("game-statistic-leaderboard-item/count/code/game-id/profile-id/timestamp")){
                CountGameStatisticLeaderboardItemCodeGameIdProfileIdTimestamp();
            }
            else if(IsContext("game-statistic-leaderboard-item/count/profile-id/game-id")){
                CountGameStatisticLeaderboardItemProfileIdGameId();
            }
            else if(IsContext("game-statistic-leaderboard-item/browse/filter")){
                BrowseGameStatisticLeaderboardItemListFilter();
            }
            else if(IsContext("game-statistic-leaderboard-item/set/uuid")){
                SetGameStatisticLeaderboardItemUuid();
            }
            else if(IsContext("game-statistic-leaderboard-item/set/uuid/profile-id/game-id/timestamp")){
                SetGameStatisticLeaderboardItemUuidProfileIdGameIdTimestamp();
            }
            else if(IsContext("game-statistic-leaderboard-item/set/code")){
                SetGameStatisticLeaderboardItemCode();
            }
            else if(IsContext("game-statistic-leaderboard-item/set/code/game-id")){
                SetGameStatisticLeaderboardItemCodeGameId();
            }
            else if(IsContext("game-statistic-leaderboard-item/set/code/game-id/profile-id")){
                SetGameStatisticLeaderboardItemCodeGameIdProfileId();
            }
            else if(IsContext("game-statistic-leaderboard-item/set/code/game-id/profile-id/timestamp")){
                SetGameStatisticLeaderboardItemCodeGameIdProfileIdTimestamp();
            }
            else if(IsContext("game-statistic-leaderboard-item/del/uuid")){
                DelGameStatisticLeaderboardItemUuid();
            }
            else if(IsContext("game-statistic-leaderboard-item/del/code")){
                DelGameStatisticLeaderboardItemCode();
            }
            else if(IsContext("game-statistic-leaderboard-item/del/code/game-id")){
                DelGameStatisticLeaderboardItemCodeGameId();
            }
            else if(IsContext("game-statistic-leaderboard-item/del/code/game-id/profile-id")){
                DelGameStatisticLeaderboardItemCodeGameIdProfileId();
            }
            else if(IsContext("game-statistic-leaderboard-item/del/code/game-id/profile-id/timestamp")){
                DelGameStatisticLeaderboardItemCodeGameIdProfileIdTimestamp();
            }
            else if(IsContext("game-statistic-leaderboard-item/del/profile-id/game-id")){
                DelGameStatisticLeaderboardItemProfileIdGameId();
            }
            else if(IsContext("game-statistic-leaderboard-item/get")){
                GetGameStatisticLeaderboardItemList();
            }
            else if(IsContext("game-statistic-leaderboard-item/get/uuid")){
                GetGameStatisticLeaderboardItemListUuid();
            }
            else if(IsContext("game-statistic-leaderboard-item/get/game-id")){
                GetGameStatisticLeaderboardItemListGameId();
            }
            else if(IsContext("game-statistic-leaderboard-item/get/code")){
                GetGameStatisticLeaderboardItemListCode();
            }
            else if(IsContext("game-statistic-leaderboard-item/get/code/game-id")){
                GetGameStatisticLeaderboardItemListCodeGameId();
            }
            else if(IsContext("game-statistic-leaderboard-item/get/code/game-id/profile-id")){
                GetGameStatisticLeaderboardItemListCodeGameIdProfileId();
            }
            else if(IsContext("game-statistic-leaderboard-item/get/code/game-id/profile-id/timestamp")){
                GetGameStatisticLeaderboardItemListCodeGameIdProfileIdTimestamp();
            }
            else if(IsContext("game-statistic-leaderboard-item/get/profile-id/game-id")){
                GetGameStatisticLeaderboardItemListProfileIdGameId();
            }
            else if(IsContext("game-statistic-leaderboard-item/get/profile-id/game-id/timestamp")){
                GetGameStatisticLeaderboardItemListProfileIdGameIdTimestamp();
            }
            if(IsContext("game-statistic-leaderboard-rollup/count")){
                CountGameStatisticLeaderboardRollup();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/count/uuid")){
                CountGameStatisticLeaderboardRollupUuid();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/count/game-id")){
                CountGameStatisticLeaderboardRollupGameId();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/count/code")){
                CountGameStatisticLeaderboardRollupCode();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/count/code/game-id")){
                CountGameStatisticLeaderboardRollupCodeGameId();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/count/code/game-id/profile-id")){
                CountGameStatisticLeaderboardRollupCodeGameIdProfileId();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/count/code/game-id/profile-id/timestamp")){
                CountGameStatisticLeaderboardRollupCodeGameIdProfileIdTimestamp();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/count/profile-id/game-id")){
                CountGameStatisticLeaderboardRollupProfileIdGameId();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/browse/filter")){
                BrowseGameStatisticLeaderboardRollupListFilter();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/set/uuid")){
                SetGameStatisticLeaderboardRollupUuid();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/set/uuid/profile-id/game-id/timestamp")){
                SetGameStatisticLeaderboardRollupUuidProfileIdGameIdTimestamp();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/set/code")){
                SetGameStatisticLeaderboardRollupCode();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/set/code/game-id")){
                SetGameStatisticLeaderboardRollupCodeGameId();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/set/code/game-id/profile-id")){
                SetGameStatisticLeaderboardRollupCodeGameIdProfileId();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/set/code/game-id/profile-id/timestamp")){
                SetGameStatisticLeaderboardRollupCodeGameIdProfileIdTimestamp();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/del/uuid")){
                DelGameStatisticLeaderboardRollupUuid();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/del/code")){
                DelGameStatisticLeaderboardRollupCode();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/del/code/game-id")){
                DelGameStatisticLeaderboardRollupCodeGameId();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/del/code/game-id/profile-id")){
                DelGameStatisticLeaderboardRollupCodeGameIdProfileId();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/del/code/game-id/profile-id/timestamp")){
                DelGameStatisticLeaderboardRollupCodeGameIdProfileIdTimestamp();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/del/profile-id/game-id")){
                DelGameStatisticLeaderboardRollupProfileIdGameId();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/get")){
                GetGameStatisticLeaderboardRollupList();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/get/uuid")){
                GetGameStatisticLeaderboardRollupListUuid();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/get/game-id")){
                GetGameStatisticLeaderboardRollupListGameId();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/get/code")){
                GetGameStatisticLeaderboardRollupListCode();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/get/code/game-id")){
                GetGameStatisticLeaderboardRollupListCodeGameId();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/get/code/game-id/profile-id")){
                GetGameStatisticLeaderboardRollupListCodeGameIdProfileId();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/get/code/game-id/profile-id/timestamp")){
                GetGameStatisticLeaderboardRollupListCodeGameIdProfileIdTimestamp();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/get/profile-id/game-id")){
                GetGameStatisticLeaderboardRollupListProfileIdGameId();
            }
            else if(IsContext("game-statistic-leaderboard-rollup/get/profile-id/game-id/timestamp")){
                GetGameStatisticLeaderboardRollupListProfileIdGameIdTimestamp();
            }
            if(IsContext("game-live-queue/count")){
                CountGameLiveQueue();
            }
            else if(IsContext("game-live-queue/count/uuid")){
                CountGameLiveQueueUuid();
            }
            else if(IsContext("game-live-queue/count/profile-id/game-id")){
                CountGameLiveQueueProfileIdGameId();
            }
            else if(IsContext("game-live-queue/browse/filter")){
                BrowseGameLiveQueueListFilter();
            }
            else if(IsContext("game-live-queue/set/uuid")){
                SetGameLiveQueueUuid();
            }
            else if(IsContext("game-live-queue/set/profile-id/game-id")){
                SetGameLiveQueueProfileIdGameId();
            }
            else if(IsContext("game-live-queue/del/uuid")){
                DelGameLiveQueueUuid();
            }
            else if(IsContext("game-live-queue/del/profile-id/game-id")){
                DelGameLiveQueueProfileIdGameId();
            }
            else if(IsContext("game-live-queue/get")){
                GetGameLiveQueueList();
            }
            else if(IsContext("game-live-queue/get/uuid")){
                GetGameLiveQueueListUuid();
            }
            else if(IsContext("game-live-queue/get/game-id")){
                GetGameLiveQueueListGameId();
            }
            else if(IsContext("game-live-queue/get/profile-id/game-id")){
                GetGameLiveQueueListProfileIdGameId();
            }
            if(IsContext("game-live-recent-queue/count")){
                CountGameLiveRecentQueue();
            }
            else if(IsContext("game-live-recent-queue/count/uuid")){
                CountGameLiveRecentQueueUuid();
            }
            else if(IsContext("game-live-recent-queue/count/profile-id/game-id")){
                CountGameLiveRecentQueueProfileIdGameId();
            }
            else if(IsContext("game-live-recent-queue/browse/filter")){
                BrowseGameLiveRecentQueueListFilter();
            }
            else if(IsContext("game-live-recent-queue/set/uuid")){
                SetGameLiveRecentQueueUuid();
            }
            else if(IsContext("game-live-recent-queue/set/profile-id/game-id")){
                SetGameLiveRecentQueueProfileIdGameId();
            }
            else if(IsContext("game-live-recent-queue/del/uuid")){
                DelGameLiveRecentQueueUuid();
            }
            else if(IsContext("game-live-recent-queue/del/profile-id/game-id")){
                DelGameLiveRecentQueueProfileIdGameId();
            }
            else if(IsContext("game-live-recent-queue/get")){
                GetGameLiveRecentQueueList();
            }
            else if(IsContext("game-live-recent-queue/get/uuid")){
                GetGameLiveRecentQueueListUuid();
            }
            else if(IsContext("game-live-recent-queue/get/game-id")){
                GetGameLiveRecentQueueListGameId();
            }
            else if(IsContext("game-live-recent-queue/get/profile-id/game-id")){
                GetGameLiveRecentQueueListProfileIdGameId();
            }
            if(IsContext("game-profile-statistic/count")){
                CountGameProfileStatistic();
            }
            else if(IsContext("game-profile-statistic/count/uuid")){
                CountGameProfileStatisticUuid();
            }
            else if(IsContext("game-profile-statistic/count/code")){
                CountGameProfileStatisticCode();
            }
            else if(IsContext("game-profile-statistic/count/game-id")){
                CountGameProfileStatisticGameId();
            }
            else if(IsContext("game-profile-statistic/count/code/game-id")){
                CountGameProfileStatisticCodeGameId();
            }
            else if(IsContext("game-profile-statistic/count/profile-id/game-id")){
                CountGameProfileStatisticProfileIdGameId();
            }
            else if(IsContext("game-profile-statistic/count/code/profile-id/game-id")){
                CountGameProfileStatisticCodeProfileIdGameId();
            }
            else if(IsContext("game-profile-statistic/count/code/profile-id/game-id/timestamp")){
                CountGameProfileStatisticCodeProfileIdGameIdTimestamp();
            }
            else if(IsContext("game-profile-statistic/browse/filter")){
                BrowseGameProfileStatisticListFilter();
            }
            else if(IsContext("game-profile-statistic/set/uuid")){
                SetGameProfileStatisticUuid();
            }
            else if(IsContext("game-profile-statistic/set/uuid/profile-id/game-id/timestamp")){
                SetGameProfileStatisticUuidProfileIdGameIdTimestamp();
            }
            else if(IsContext("game-profile-statistic/set/profile-id/code")){
                SetGameProfileStatisticProfileIdCode();
            }
            else if(IsContext("game-profile-statistic/set/profile-id/code/timestamp")){
                SetGameProfileStatisticProfileIdCodeTimestamp();
            }
            else if(IsContext("game-profile-statistic/set/code/profile-id/game-id/timestamp")){
                SetGameProfileStatisticCodeProfileIdGameIdTimestamp();
            }
            else if(IsContext("game-profile-statistic/set/code/profile-id/game-id")){
                SetGameProfileStatisticCodeProfileIdGameId();
            }
            else if(IsContext("game-profile-statistic/del/uuid")){
                DelGameProfileStatisticUuid();
            }
            else if(IsContext("game-profile-statistic/del/code/game-id")){
                DelGameProfileStatisticCodeGameId();
            }
            else if(IsContext("game-profile-statistic/del/profile-id/game-id")){
                DelGameProfileStatisticProfileIdGameId();
            }
            else if(IsContext("game-profile-statistic/del/code/profile-id/game-id")){
                DelGameProfileStatisticCodeProfileIdGameId();
            }
            else if(IsContext("game-profile-statistic/get/uuid")){
                GetGameProfileStatisticListUuid();
            }
            else if(IsContext("game-profile-statistic/get/code")){
                GetGameProfileStatisticListCode();
            }
            else if(IsContext("game-profile-statistic/get/game-id")){
                GetGameProfileStatisticListGameId();
            }
            else if(IsContext("game-profile-statistic/get/code/game-id")){
                GetGameProfileStatisticListCodeGameId();
            }
            else if(IsContext("game-profile-statistic/get/profile-id/game-id")){
                GetGameProfileStatisticListProfileIdGameId();
            }
            else if(IsContext("game-profile-statistic/get/profile-id/game-id/timestamp")){
                GetGameProfileStatisticListProfileIdGameIdTimestamp();
            }
            else if(IsContext("game-profile-statistic/get/code/profile-id/game-id")){
                GetGameProfileStatisticListCodeProfileIdGameId();
            }
            else if(IsContext("game-profile-statistic/get/code/profile-id/game-id/timestamp")){
                GetGameProfileStatisticListCodeProfileIdGameIdTimestamp();
            }
            if(IsContext("game-statistic-meta/count")){
                CountGameStatisticMeta();
            }
            else if(IsContext("game-statistic-meta/count/uuid")){
                CountGameStatisticMetaUuid();
            }
            else if(IsContext("game-statistic-meta/count/code")){
                CountGameStatisticMetaCode();
            }
            else if(IsContext("game-statistic-meta/count/code/game-id")){
                CountGameStatisticMetaCodeGameId();
            }
            else if(IsContext("game-statistic-meta/count/name")){
                CountGameStatisticMetaName();
            }
            else if(IsContext("game-statistic-meta/count/game-id")){
                CountGameStatisticMetaGameId();
            }
            else if(IsContext("game-statistic-meta/browse/filter")){
                BrowseGameStatisticMetaListFilter();
            }
            else if(IsContext("game-statistic-meta/set/uuid")){
                SetGameStatisticMetaUuid();
            }
            else if(IsContext("game-statistic-meta/set/code/game-id")){
                SetGameStatisticMetaCodeGameId();
            }
            else if(IsContext("game-statistic-meta/del/uuid")){
                DelGameStatisticMetaUuid();
            }
            else if(IsContext("game-statistic-meta/del/code/game-id")){
                DelGameStatisticMetaCodeGameId();
            }
            else if(IsContext("game-statistic-meta/get/uuid")){
                GetGameStatisticMetaListUuid();
            }
            else if(IsContext("game-statistic-meta/get/code")){
                GetGameStatisticMetaListCode();
            }
            else if(IsContext("game-statistic-meta/get/name")){
                GetGameStatisticMetaListName();
            }
            else if(IsContext("game-statistic-meta/get/game-id")){
                GetGameStatisticMetaListGameId();
            }
            else if(IsContext("game-statistic-meta/get/code/game-id")){
                GetGameStatisticMetaListCodeGameId();
            }
            if(IsContext("game-profile-statistic-timestamp/count")){
                CountGameProfileStatisticTimestamp();
            }
            else if(IsContext("game-profile-statistic-timestamp/count/uuid")){
                CountGameProfileStatisticTimestampUuid();
            }
            else if(IsContext("game-profile-statistic-timestamp/count/code/profile-id/game-id")){
                CountGameProfileStatisticTimestampCodeProfileIdGameId();
            }
            else if(IsContext("game-profile-statistic-timestamp/count/code/profile-id/game-id/timestamp")){
                CountGameProfileStatisticTimestampCodeProfileIdGameIdTimestamp();
            }
            else if(IsContext("game-profile-statistic-timestamp/browse/filter")){
                BrowseGameProfileStatisticTimestampListFilter();
            }
            else if(IsContext("game-profile-statistic-timestamp/set/uuid")){
                SetGameProfileStatisticTimestampUuid();
            }
            else if(IsContext("game-profile-statistic-timestamp/set/code/profile-id/game-id")){
                SetGameProfileStatisticTimestampCodeProfileIdGameId();
            }
            else if(IsContext("game-profile-statistic-timestamp/set/code/profile-id/game-id/timestamp")){
                SetGameProfileStatisticTimestampCodeProfileIdGameIdTimestamp();
            }
            else if(IsContext("game-profile-statistic-timestamp/del/uuid")){
                DelGameProfileStatisticTimestampUuid();
            }
            else if(IsContext("game-profile-statistic-timestamp/del/code/profile-id/game-id")){
                DelGameProfileStatisticTimestampCodeProfileIdGameId();
            }
            else if(IsContext("game-profile-statistic-timestamp/del/code/profile-id/game-id/timestamp")){
                DelGameProfileStatisticTimestampCodeProfileIdGameIdTimestamp();
            }
            else if(IsContext("game-profile-statistic-timestamp/get/uuid")){
                GetGameProfileStatisticTimestampListUuid();
            }
            else if(IsContext("game-profile-statistic-timestamp/get/code/profile-id/game-id")){
                GetGameProfileStatisticTimestampListCodeProfileIdGameId();
            }
            else if(IsContext("game-profile-statistic-timestamp/get/code/profile-id/game-id/timestamp")){
                GetGameProfileStatisticTimestampListCodeProfileIdGameIdTimestamp();
            }
            if(IsContext("game-key-meta/count")){
                CountGameKeyMeta();
            }
            else if(IsContext("game-key-meta/count/uuid")){
                CountGameKeyMetaUuid();
            }
            else if(IsContext("game-key-meta/count/code")){
                CountGameKeyMetaCode();
            }
            else if(IsContext("game-key-meta/count/code/game-id")){
                CountGameKeyMetaCodeGameId();
            }
            else if(IsContext("game-key-meta/count/name")){
                CountGameKeyMetaName();
            }
            else if(IsContext("game-key-meta/count/key")){
                CountGameKeyMetaKey();
            }
            else if(IsContext("game-key-meta/count/game-id")){
                CountGameKeyMetaGameId();
            }
            else if(IsContext("game-key-meta/count/key/game-id")){
                CountGameKeyMetaKeyGameId();
            }
            else if(IsContext("game-key-meta/browse/filter")){
                BrowseGameKeyMetaListFilter();
            }
            else if(IsContext("game-key-meta/set/uuid")){
                SetGameKeyMetaUuid();
            }
            else if(IsContext("game-key-meta/set/code/game-id")){
                SetGameKeyMetaCodeGameId();
            }
            else if(IsContext("game-key-meta/set/key/game-id")){
                SetGameKeyMetaKeyGameId();
            }
            else if(IsContext("game-key-meta/set/key/game-id/level")){
                SetGameKeyMetaKeyGameIdLevel();
            }
            else if(IsContext("game-key-meta/del/uuid")){
                DelGameKeyMetaUuid();
            }
            else if(IsContext("game-key-meta/del/code/game-id")){
                DelGameKeyMetaCodeGameId();
            }
            else if(IsContext("game-key-meta/del/key/game-id")){
                DelGameKeyMetaKeyGameId();
            }
            else if(IsContext("game-key-meta/get/uuid")){
                GetGameKeyMetaListUuid();
            }
            else if(IsContext("game-key-meta/get/code")){
                GetGameKeyMetaListCode();
            }
            else if(IsContext("game-key-meta/get/code/game-id")){
                GetGameKeyMetaListCodeGameId();
            }
            else if(IsContext("game-key-meta/get/name")){
                GetGameKeyMetaListName();
            }
            else if(IsContext("game-key-meta/get/key")){
                GetGameKeyMetaListKey();
            }
            else if(IsContext("game-key-meta/get/game-id")){
                GetGameKeyMetaListGameId();
            }
            else if(IsContext("game-key-meta/get/key/game-id")){
                GetGameKeyMetaListKeyGameId();
            }
            else if(IsContext("game-key-meta/get/code/level")){
                GetGameKeyMetaListCodeLevel();
            }
            if(IsContext("game-level/count")){
                CountGameLevel();
            }
            else if(IsContext("game-level/count/uuid")){
                CountGameLevelUuid();
            }
            else if(IsContext("game-level/count/code")){
                CountGameLevelCode();
            }
            else if(IsContext("game-level/count/code/game-id")){
                CountGameLevelCodeGameId();
            }
            else if(IsContext("game-level/count/name")){
                CountGameLevelName();
            }
            else if(IsContext("game-level/count/game-id")){
                CountGameLevelGameId();
            }
            else if(IsContext("game-level/browse/filter")){
                BrowseGameLevelListFilter();
            }
            else if(IsContext("game-level/set/uuid")){
                SetGameLevelUuid();
            }
            else if(IsContext("game-level/set/code/game-id")){
                SetGameLevelCodeGameId();
            }
            else if(IsContext("game-level/del/uuid")){
                DelGameLevelUuid();
            }
            else if(IsContext("game-level/del/code/game-id")){
                DelGameLevelCodeGameId();
            }
            else if(IsContext("game-level/get/uuid")){
                GetGameLevelListUuid();
            }
            else if(IsContext("game-level/get/code")){
                GetGameLevelListCode();
            }
            else if(IsContext("game-level/get/code/game-id")){
                GetGameLevelListCodeGameId();
            }
            else if(IsContext("game-level/get/name")){
                GetGameLevelListName();
            }
            else if(IsContext("game-level/get/game-id")){
                GetGameLevelListGameId();
            }
            if(IsContext("game-profile-achievement/count")){
                CountGameProfileAchievement();
            }
            else if(IsContext("game-profile-achievement/count/uuid")){
                CountGameProfileAchievementUuid();
            }
            else if(IsContext("game-profile-achievement/count/profile-id/code")){
                CountGameProfileAchievementProfileIdCode();
            }
            else if(IsContext("game-profile-achievement/count/username")){
                CountGameProfileAchievementUsername();
            }
            else if(IsContext("game-profile-achievement/count/code/profile-id/game-id")){
                CountGameProfileAchievementCodeProfileIdGameId();
            }
            else if(IsContext("game-profile-achievement/count/code/profile-id/game-id/timestamp")){
                CountGameProfileAchievementCodeProfileIdGameIdTimestamp();
            }
            else if(IsContext("game-profile-achievement/browse/filter")){
                BrowseGameProfileAchievementListFilter();
            }
            else if(IsContext("game-profile-achievement/set/uuid")){
                SetGameProfileAchievementUuid();
            }
            else if(IsContext("game-profile-achievement/set/uuid/code")){
                SetGameProfileAchievementUuidCode();
            }
            else if(IsContext("game-profile-achievement/set/profile-id/code")){
                SetGameProfileAchievementProfileIdCode();
            }
            else if(IsContext("game-profile-achievement/set/code/profile-id/game-id")){
                SetGameProfileAchievementCodeProfileIdGameId();
            }
            else if(IsContext("game-profile-achievement/set/code/profile-id/game-id/timestamp")){
                SetGameProfileAchievementCodeProfileIdGameIdTimestamp();
            }
            else if(IsContext("game-profile-achievement/del/uuid")){
                DelGameProfileAchievementUuid();
            }
            else if(IsContext("game-profile-achievement/del/profile-id/code")){
                DelGameProfileAchievementProfileIdCode();
            }
            else if(IsContext("game-profile-achievement/del/uuid/code")){
                DelGameProfileAchievementUuidCode();
            }
            else if(IsContext("game-profile-achievement/get/uuid")){
                GetGameProfileAchievementListUuid();
            }
            else if(IsContext("game-profile-achievement/get/profile-id/code")){
                GetGameProfileAchievementListProfileIdCode();
            }
            else if(IsContext("game-profile-achievement/get/username")){
                GetGameProfileAchievementListUsername();
            }
            else if(IsContext("game-profile-achievement/get/code")){
                GetGameProfileAchievementListCode();
            }
            else if(IsContext("game-profile-achievement/get/game-id")){
                GetGameProfileAchievementListGameId();
            }
            else if(IsContext("game-profile-achievement/get/code/game-id")){
                GetGameProfileAchievementListCodeGameId();
            }
            else if(IsContext("game-profile-achievement/get/profile-id/game-id")){
                GetGameProfileAchievementListProfileIdGameId();
            }
            else if(IsContext("game-profile-achievement/get/profile-id/game-id/timestamp")){
                GetGameProfileAchievementListProfileIdGameIdTimestamp();
            }
            else if(IsContext("game-profile-achievement/get/code/profile-id/game-id")){
                GetGameProfileAchievementListCodeProfileIdGameId();
            }
            else if(IsContext("game-profile-achievement/get/code/profile-id/game-id/timestamp")){
                GetGameProfileAchievementListCodeProfileIdGameIdTimestamp();
            }
            if(IsContext("game-achievement-meta/count")){
                CountGameAchievementMeta();
            }
            else if(IsContext("game-achievement-meta/count/uuid")){
                CountGameAchievementMetaUuid();
            }
            else if(IsContext("game-achievement-meta/count/code")){
                CountGameAchievementMetaCode();
            }
            else if(IsContext("game-achievement-meta/count/code/game-id")){
                CountGameAchievementMetaCodeGameId();
            }
            else if(IsContext("game-achievement-meta/count/name")){
                CountGameAchievementMetaName();
            }
            else if(IsContext("game-achievement-meta/count/game-id")){
                CountGameAchievementMetaGameId();
            }
            else if(IsContext("game-achievement-meta/browse/filter")){
                BrowseGameAchievementMetaListFilter();
            }
            else if(IsContext("game-achievement-meta/set/uuid")){
                SetGameAchievementMetaUuid();
            }
            else if(IsContext("game-achievement-meta/set/code/game-id")){
                SetGameAchievementMetaCodeGameId();
            }
            else if(IsContext("game-achievement-meta/del/uuid")){
                DelGameAchievementMetaUuid();
            }
            else if(IsContext("game-achievement-meta/del/code/game-id")){
                DelGameAchievementMetaCodeGameId();
            }
            else if(IsContext("game-achievement-meta/get/uuid")){
                GetGameAchievementMetaListUuid();
            }
            else if(IsContext("game-achievement-meta/get/code")){
                GetGameAchievementMetaListCode();
            }
            else if(IsContext("game-achievement-meta/get/code/game-id")){
                GetGameAchievementMetaListCodeGameId();
            }
            else if(IsContext("game-achievement-meta/get/name")){
                GetGameAchievementMetaListName();
            }
            else if(IsContext("game-achievement-meta/get/game-id")){
                GetGameAchievementMetaListGameId();
            }
        }    
        
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGame() {
        

            ResponseGameInt wrapper = new ResponseGameInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGame(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameInt wrapper = new ResponseGameInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameInt wrapper = new ResponseGameInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/count/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameName() {
        
             _name = ()util.GetParamValue(_context, "@name");

            ResponseGameInt wrapper = new ResponseGameInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/count/name";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameOrgId() {
        
             _org_id = ()util.GetParamValue(_context, "@org_id");

            ResponseGameInt wrapper = new ResponseGameInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/count/org-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAppId() {
        
             _app_id = ()util.GetParamValue(_context, "@app_id");

            ResponseGameInt wrapper = new ResponseGameInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/count/app-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameAppId(
                _app_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameOrgIdAppId() {
        
             _org_id = ()util.GetParamValue(_context, "@org_id");
             _app_id = ()util.GetParamValue(_context, "@app_id");

            ResponseGameInt wrapper = new ResponseGameInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/count/org-id/app-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameOrgIdAppId(
                _org_id
                , _app_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameListFilter()  {
        
            ResponseGameList wrapper = new ResponseGameList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameResult result = api.BrowseGameListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameUuid()  {
        
            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            Game obj = new Game();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _org_id = util.GetParamValue(_context, "@org_id");
            if(!String.IsNoneOrEmpty(_org_id))
                obj.org_id = ()_org_id;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _app_id = util.GetParamValue(_context, "@app_id");
            if(!String.IsNoneOrEmpty(_app_id))
                obj.app_id = ()_app_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameCode()  {
        
            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/set/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            Game obj = new Game();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _org_id = util.GetParamValue(_context, "@org_id");
            if(!String.IsNoneOrEmpty(_org_id))
                obj.org_id = ()_org_id;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _app_id = util.GetParamValue(_context, "@app_id");
            if(!String.IsNoneOrEmpty(_app_id))
                obj.app_id = ()_app_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameName()  {
        
            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/set/name";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            Game obj = new Game();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _org_id = util.GetParamValue(_context, "@org_id");
            if(!String.IsNoneOrEmpty(_org_id))
                obj.org_id = ()_org_id;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _app_id = util.GetParamValue(_context, "@app_id");
            if(!String.IsNoneOrEmpty(_app_id))
                obj.app_id = ()_app_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameName(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameOrgId()  {
        
            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/set/org-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            Game obj = new Game();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _org_id = util.GetParamValue(_context, "@org_id");
            if(!String.IsNoneOrEmpty(_org_id))
                obj.org_id = ()_org_id;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _app_id = util.GetParamValue(_context, "@app_id");
            if(!String.IsNoneOrEmpty(_app_id))
                obj.app_id = ()_app_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameOrgId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameAppId()  {
        
            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/set/app-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            Game obj = new Game();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _org_id = util.GetParamValue(_context, "@org_id");
            if(!String.IsNoneOrEmpty(_org_id))
                obj.org_id = ()_org_id;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _app_id = util.GetParamValue(_context, "@app_id");
            if(!String.IsNoneOrEmpty(_app_id))
                obj.app_id = ()_app_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameAppId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameOrgIdAppId()  {
        
            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/set/org-id/app-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            Game obj = new Game();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _org_id = util.GetParamValue(_context, "@org_id");
            if(!String.IsNoneOrEmpty(_org_id))
                obj.org_id = ()_org_id;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _app_id = util.GetParamValue(_context, "@app_id");
            if(!String.IsNoneOrEmpty(_app_id))
                obj.app_id = ()_app_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameOrgIdAppId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/del/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameCode(
                        
                _code
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameName() {
        
             _name = ()util.GetParamValue(_context, "@name");

            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/del/name";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameName(
                        
                _name
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameOrgId() {
        
             _org_id = ()util.GetParamValue(_context, "@org_id");

            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/del/org-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameOrgId(
                        
                _org_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameAppId() {
        
             _app_id = ()util.GetParamValue(_context, "@app_id");

            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/del/app-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameAppId(
                        
                _app_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameOrgIdAppId() {
        
             _org_id = ()util.GetParamValue(_context, "@org_id");
             _app_id = ()util.GetParamValue(_context, "@app_id");

            ResponseGameBool wrapper = new ResponseGameBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/del/org-id/app-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameOrgIdAppId(
                        
                _org_id
                , _app_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameList() {
        

            ResponseGameList wrapper = new ResponseGameList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<Game> objs = api.GetGameList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameList wrapper = new ResponseGameList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<Game> objs = api.GetGameListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameListCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameList wrapper = new ResponseGameList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/get/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<Game> objs = api.GetGameListCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameListName() {
        
             _name = ()util.GetParamValue(_context, "@name");

            ResponseGameList wrapper = new ResponseGameList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/get/name";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<Game> objs = api.GetGameListName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameListOrgId() {
        
             _org_id = ()util.GetParamValue(_context, "@org_id");

            ResponseGameList wrapper = new ResponseGameList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/get/org-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<Game> objs = api.GetGameListOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameListAppId() {
        
             _app_id = ()util.GetParamValue(_context, "@app_id");

            ResponseGameList wrapper = new ResponseGameList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/get/app-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<Game> objs = api.GetGameListAppId(
                _app_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameListOrgIdAppId() {
        
             _org_id = ()util.GetParamValue(_context, "@org_id");
             _app_id = ()util.GetParamValue(_context, "@app_id");

            ResponseGameList wrapper = new ResponseGameList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game/get/org-id/app-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<Game> objs = api.GetGameListOrgIdAppId(
                _org_id
                , _app_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategory() {
        

            ResponseGameCategoryInt wrapper = new ResponseGameCategoryInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameCategory(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameCategoryInt wrapper = new ResponseGameCategoryInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameCategoryUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameCategoryInt wrapper = new ResponseGameCategoryInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category/count/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameCategoryCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryName() {
        
             _name = ()util.GetParamValue(_context, "@name");

            ResponseGameCategoryInt wrapper = new ResponseGameCategoryInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category/count/name";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameCategoryName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryOrgId() {
        
             _org_id = ()util.GetParamValue(_context, "@org_id");

            ResponseGameCategoryInt wrapper = new ResponseGameCategoryInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category/count/org-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameCategoryOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryTypeId() {
        
             _type_id = ()util.GetParamValue(_context, "@type_id");

            ResponseGameCategoryInt wrapper = new ResponseGameCategoryInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category/count/type-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameCategoryTypeId(
                _type_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryOrgIdTypeId() {
        
             _org_id = ()util.GetParamValue(_context, "@org_id");
             _type_id = ()util.GetParamValue(_context, "@type_id");

            ResponseGameCategoryInt wrapper = new ResponseGameCategoryInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category/count/org-id/type-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameCategoryOrgIdTypeId(
                _org_id
                , _type_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameCategoryListFilter()  {
        
            ResponseGameCategoryList wrapper = new ResponseGameCategoryList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameCategoryResult result = api.BrowseGameCategoryListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameCategoryUuid()  {
        
            ResponseGameCategoryBool wrapper = new ResponseGameCategoryBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameCategory obj = new GameCategory();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _type_id = util.GetParamValue(_context, "@type_id");
            if(!String.IsNoneOrEmpty(_type_id))
                obj.type_id = ()_type_id;
            
            string _org_id = util.GetParamValue(_context, "@org_id");
            if(!String.IsNoneOrEmpty(_org_id))
                obj.org_id = ()_org_id;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameCategoryUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameCategoryUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameCategoryBool wrapper = new ResponseGameCategoryBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameCategoryUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameCategoryCodeOrgId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _org_id = ()util.GetParamValue(_context, "@org_id");

            ResponseGameCategoryBool wrapper = new ResponseGameCategoryBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category/del/code/org-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameCategoryCodeOrgId(
                        
                _code
                , _org_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameCategoryCodeOrgIdTypeId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _org_id = ()util.GetParamValue(_context, "@org_id");
             _type_id = ()util.GetParamValue(_context, "@type_id");

            ResponseGameCategoryBool wrapper = new ResponseGameCategoryBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category/del/code/org-id/type-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameCategoryCodeOrgIdTypeId(
                        
                _code
                , _org_id
                , _type_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryList() {
        

            ResponseGameCategoryList wrapper = new ResponseGameCategoryList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameCategory> objs = api.GetGameCategoryList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameCategoryList wrapper = new ResponseGameCategoryList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameCategory> objs = api.GetGameCategoryListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryListCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameCategoryList wrapper = new ResponseGameCategoryList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category/get/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameCategory> objs = api.GetGameCategoryListCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryListName() {
        
             _name = ()util.GetParamValue(_context, "@name");

            ResponseGameCategoryList wrapper = new ResponseGameCategoryList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category/get/name";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameCategory> objs = api.GetGameCategoryListName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryListOrgId() {
        
             _org_id = ()util.GetParamValue(_context, "@org_id");

            ResponseGameCategoryList wrapper = new ResponseGameCategoryList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category/get/org-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameCategory> objs = api.GetGameCategoryListOrgId(
                _org_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryListTypeId() {
        
             _type_id = ()util.GetParamValue(_context, "@type_id");

            ResponseGameCategoryList wrapper = new ResponseGameCategoryList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category/get/type-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameCategory> objs = api.GetGameCategoryListTypeId(
                _type_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryListOrgIdTypeId() {
        
             _org_id = ()util.GetParamValue(_context, "@org_id");
             _type_id = ()util.GetParamValue(_context, "@type_id");

            ResponseGameCategoryList wrapper = new ResponseGameCategoryList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category/get/org-id/type-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameCategory> objs = api.GetGameCategoryListOrgIdTypeId(
                _org_id
                , _type_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryTree() {
        

            ResponseGameCategoryTreeInt wrapper = new ResponseGameCategoryTreeInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-tree/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameCategoryTree(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryTreeUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameCategoryTreeInt wrapper = new ResponseGameCategoryTreeInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-tree/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameCategoryTreeUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryTreeParentId() {
        
             _parent_id = ()util.GetParamValue(_context, "@parent_id");

            ResponseGameCategoryTreeInt wrapper = new ResponseGameCategoryTreeInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-tree/count/parent-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameCategoryTreeParentId(
                _parent_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryTreeCategoryId() {
        
             _category_id = ()util.GetParamValue(_context, "@category_id");

            ResponseGameCategoryTreeInt wrapper = new ResponseGameCategoryTreeInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-tree/count/category-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameCategoryTreeCategoryId(
                _category_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryTreeParentIdCategoryId() {
        
             _parent_id = ()util.GetParamValue(_context, "@parent_id");
             _category_id = ()util.GetParamValue(_context, "@category_id");

            ResponseGameCategoryTreeInt wrapper = new ResponseGameCategoryTreeInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-tree/count/parent-id/category-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameCategoryTreeParentIdCategoryId(
                _parent_id
                , _category_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameCategoryTreeListFilter()  {
        
            ResponseGameCategoryTreeList wrapper = new ResponseGameCategoryTreeList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-tree/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameCategoryTreeResult result = api.BrowseGameCategoryTreeListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameCategoryTreeUuid()  {
        
            ResponseGameCategoryTreeBool wrapper = new ResponseGameCategoryTreeBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-tree/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameCategoryTree obj = new GameCategoryTree();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _parent_id = util.GetParamValue(_context, "@parent_id");
            if(!String.IsNoneOrEmpty(_parent_id))
                obj.parent_id = ()_parent_id;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _category_id = util.GetParamValue(_context, "@category_id");
            if(!String.IsNoneOrEmpty(_category_id))
                obj.category_id = ()_category_id;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameCategoryTreeUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameCategoryTreeUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameCategoryTreeBool wrapper = new ResponseGameCategoryTreeBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-tree/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameCategoryTreeUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameCategoryTreeParentId() {
        
             _parent_id = ()util.GetParamValue(_context, "@parent_id");

            ResponseGameCategoryTreeBool wrapper = new ResponseGameCategoryTreeBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-tree/del/parent-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameCategoryTreeParentId(
                        
                _parent_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameCategoryTreeCategoryId() {
        
             _category_id = ()util.GetParamValue(_context, "@category_id");

            ResponseGameCategoryTreeBool wrapper = new ResponseGameCategoryTreeBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-tree/del/category-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameCategoryTreeCategoryId(
                        
                _category_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameCategoryTreeParentIdCategoryId() {
        
             _parent_id = ()util.GetParamValue(_context, "@parent_id");
             _category_id = ()util.GetParamValue(_context, "@category_id");

            ResponseGameCategoryTreeBool wrapper = new ResponseGameCategoryTreeBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-tree/del/parent-id/category-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameCategoryTreeParentIdCategoryId(
                        
                _parent_id
                , _category_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryTreeList() {
        

            ResponseGameCategoryTreeList wrapper = new ResponseGameCategoryTreeList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-tree/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameCategoryTree> objs = api.GetGameCategoryTreeList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryTreeListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameCategoryTreeList wrapper = new ResponseGameCategoryTreeList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-tree/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameCategoryTree> objs = api.GetGameCategoryTreeListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryTreeListParentId() {
        
             _parent_id = ()util.GetParamValue(_context, "@parent_id");

            ResponseGameCategoryTreeList wrapper = new ResponseGameCategoryTreeList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-tree/get/parent-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameCategoryTree> objs = api.GetGameCategoryTreeListParentId(
                _parent_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryTreeListCategoryId() {
        
             _category_id = ()util.GetParamValue(_context, "@category_id");

            ResponseGameCategoryTreeList wrapper = new ResponseGameCategoryTreeList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-tree/get/category-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameCategoryTree> objs = api.GetGameCategoryTreeListCategoryId(
                _category_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryTreeListParentIdCategoryId() {
        
             _parent_id = ()util.GetParamValue(_context, "@parent_id");
             _category_id = ()util.GetParamValue(_context, "@category_id");

            ResponseGameCategoryTreeList wrapper = new ResponseGameCategoryTreeList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-tree/get/parent-id/category-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameCategoryTree> objs = api.GetGameCategoryTreeListParentIdCategoryId(
                _parent_id
                , _category_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryAssoc() {
        

            ResponseGameCategoryAssocInt wrapper = new ResponseGameCategoryAssocInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-assoc/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameCategoryAssoc(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryAssocUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameCategoryAssocInt wrapper = new ResponseGameCategoryAssocInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-assoc/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameCategoryAssocUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryAssocGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameCategoryAssocInt wrapper = new ResponseGameCategoryAssocInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-assoc/count/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameCategoryAssocGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryAssocCategoryId() {
        
             _category_id = ()util.GetParamValue(_context, "@category_id");

            ResponseGameCategoryAssocInt wrapper = new ResponseGameCategoryAssocInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-assoc/count/category-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameCategoryAssocCategoryId(
                _category_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameCategoryAssocGameIdCategoryId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _category_id = ()util.GetParamValue(_context, "@category_id");

            ResponseGameCategoryAssocInt wrapper = new ResponseGameCategoryAssocInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-assoc/count/game-id/category-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameCategoryAssocGameIdCategoryId(
                _game_id
                , _category_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameCategoryAssocListFilter()  {
        
            ResponseGameCategoryAssocList wrapper = new ResponseGameCategoryAssocList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-assoc/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameCategoryAssocResult result = api.BrowseGameCategoryAssocListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameCategoryAssocUuid()  {
        
            ResponseGameCategoryAssocBool wrapper = new ResponseGameCategoryAssocBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-assoc/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameCategoryAssoc obj = new GameCategoryAssoc();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _category_id = util.GetParamValue(_context, "@category_id");
            if(!String.IsNoneOrEmpty(_category_id))
                obj.category_id = ()_category_id;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameCategoryAssocUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameCategoryAssocUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameCategoryAssocBool wrapper = new ResponseGameCategoryAssocBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-assoc/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameCategoryAssocUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryAssocList() {
        

            ResponseGameCategoryAssocList wrapper = new ResponseGameCategoryAssocList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-assoc/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameCategoryAssoc> objs = api.GetGameCategoryAssocList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryAssocListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameCategoryAssocList wrapper = new ResponseGameCategoryAssocList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-assoc/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameCategoryAssoc> objs = api.GetGameCategoryAssocListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryAssocListGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameCategoryAssocList wrapper = new ResponseGameCategoryAssocList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-assoc/get/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameCategoryAssoc> objs = api.GetGameCategoryAssocListGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryAssocListCategoryId() {
        
             _category_id = ()util.GetParamValue(_context, "@category_id");

            ResponseGameCategoryAssocList wrapper = new ResponseGameCategoryAssocList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-assoc/get/category-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameCategoryAssoc> objs = api.GetGameCategoryAssocListCategoryId(
                _category_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameCategoryAssocListGameIdCategoryId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _category_id = ()util.GetParamValue(_context, "@category_id");

            ResponseGameCategoryAssocList wrapper = new ResponseGameCategoryAssocList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-category-assoc/get/game-id/category-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameCategoryAssoc> objs = api.GetGameCategoryAssocListGameIdCategoryId(
                _game_id
                , _category_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameType() {
        

            ResponseGameTypeInt wrapper = new ResponseGameTypeInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-type/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameType(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameTypeUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameTypeInt wrapper = new ResponseGameTypeInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-type/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameTypeUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameTypeCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameTypeInt wrapper = new ResponseGameTypeInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-type/count/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameTypeCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameTypeName() {
        
             _name = ()util.GetParamValue(_context, "@name");

            ResponseGameTypeInt wrapper = new ResponseGameTypeInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-type/count/name";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameTypeName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameTypeListFilter()  {
        
            ResponseGameTypeList wrapper = new ResponseGameTypeList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-type/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameTypeResult result = api.BrowseGameTypeListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameTypeUuid()  {
        
            ResponseGameTypeBool wrapper = new ResponseGameTypeBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-type/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameType obj = new GameType();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameTypeUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameTypeUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameTypeBool wrapper = new ResponseGameTypeBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-type/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameTypeUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameTypeList() {
        

            ResponseGameTypeList wrapper = new ResponseGameTypeList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-type/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameType> objs = api.GetGameTypeList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameTypeListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameTypeList wrapper = new ResponseGameTypeList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-type/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameType> objs = api.GetGameTypeListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameTypeListCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameTypeList wrapper = new ResponseGameTypeList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-type/get/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameType> objs = api.GetGameTypeListCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameTypeListName() {
        
             _name = ()util.GetParamValue(_context, "@name");

            ResponseGameTypeList wrapper = new ResponseGameTypeList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-type/get/name";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameType> objs = api.GetGameTypeListName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGame() {
        

            ResponseProfileGameInt wrapper = new ResponseProfileGameInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGame(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseProfileGameInt wrapper = new ResponseProfileGameInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGameUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseProfileGameInt wrapper = new ResponseProfileGameInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game/count/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGameGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameProfileId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseProfileGameInt wrapper = new ResponseProfileGameInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game/count/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGameProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseProfileGameInt wrapper = new ResponseProfileGameInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game/count/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGameProfileIdGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseProfileGameListFilter()  {
        
            ResponseProfileGameList wrapper = new ResponseProfileGameList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            ProfileGameResult result = api.BrowseProfileGameListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileGameUuid()  {
        
            ResponseProfileGameBool wrapper = new ResponseProfileGameBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            ProfileGame obj = new ProfileGame();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _type_id = util.GetParamValue(_context, "@type_id");
            if(!String.IsNoneOrEmpty(_type_id))
                obj.type_id = ()_type_id;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _game_profile = util.GetParamValue(_context, "@game_profile");
            if(!String.IsNoneOrEmpty(_game_profile))
                obj.game_profile = ()_game_profile;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _profile_version = util.GetParamValue(_context, "@profile_version");
            if(!String.IsNoneOrEmpty(_profile_version))
                obj.profile_version = ()_profile_version;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetProfileGameUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileGameUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseProfileGameBool wrapper = new ResponseProfileGameBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelProfileGameUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameList() {
        

            ResponseProfileGameList wrapper = new ResponseProfileGameList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<ProfileGame> objs = api.GetProfileGameList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseProfileGameList wrapper = new ResponseProfileGameList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<ProfileGame> objs = api.GetProfileGameListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameListGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseProfileGameList wrapper = new ResponseProfileGameList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game/get/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<ProfileGame> objs = api.GetProfileGameListGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameListProfileId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseProfileGameList wrapper = new ResponseProfileGameList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game/get/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<ProfileGame> objs = api.GetProfileGameListProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameListProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseProfileGameList wrapper = new ResponseProfileGameList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game/get/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<ProfileGame> objs = api.GetProfileGameListProfileIdGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameNetwork() {
        

            ResponseGameNetworkInt wrapper = new ResponseGameNetworkInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameNetwork(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameNetworkUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameNetworkInt wrapper = new ResponseGameNetworkInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameNetworkUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameNetworkCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameNetworkInt wrapper = new ResponseGameNetworkInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network/count/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameNetworkCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameNetworkUuidType() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");
             _type = ()util.GetParamValue(_context, "@type");

            ResponseGameNetworkInt wrapper = new ResponseGameNetworkInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network/count/uuid/type";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameNetworkUuidType(
                _uuid
                , _type
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameNetworkListFilter()  {
        
            ResponseGameNetworkList wrapper = new ResponseGameNetworkList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameNetworkResult result = api.BrowseGameNetworkListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameNetworkUuid()  {
        
            ResponseGameNetworkBool wrapper = new ResponseGameNetworkBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameNetwork obj = new GameNetwork();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _secret = util.GetParamValue(_context, "@secret");
            if(!String.IsNoneOrEmpty(_secret))
                obj.secret = ()_secret;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameNetworkUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameNetworkCode()  {
        
            ResponseGameNetworkBool wrapper = new ResponseGameNetworkBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network/set/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameNetwork obj = new GameNetwork();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _secret = util.GetParamValue(_context, "@secret");
            if(!String.IsNoneOrEmpty(_secret))
                obj.secret = ()_secret;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameNetworkCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameNetworkUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameNetworkBool wrapper = new ResponseGameNetworkBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameNetworkUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameNetworkList() {
        

            ResponseGameNetworkList wrapper = new ResponseGameNetworkList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameNetwork> objs = api.GetGameNetworkList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameNetworkListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameNetworkList wrapper = new ResponseGameNetworkList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameNetwork> objs = api.GetGameNetworkListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameNetworkListCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameNetworkList wrapper = new ResponseGameNetworkList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network/get/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameNetwork> objs = api.GetGameNetworkListCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameNetworkListUuidType() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");
             _type = ()util.GetParamValue(_context, "@type");

            ResponseGameNetworkList wrapper = new ResponseGameNetworkList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network/get/uuid/type";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameNetwork> objs = api.GetGameNetworkListUuidType(
                _uuid
                , _type
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameNetworkAuth() {
        

            ResponseGameNetworkAuthInt wrapper = new ResponseGameNetworkAuthInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network-auth/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameNetworkAuth(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameNetworkAuthUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameNetworkAuthInt wrapper = new ResponseGameNetworkAuthInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network-auth/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameNetworkAuthUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameNetworkAuthGameIdGameNetworkId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _game_network_id = ()util.GetParamValue(_context, "@game_network_id");

            ResponseGameNetworkAuthInt wrapper = new ResponseGameNetworkAuthInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network-auth/count/game-id/game-network-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameNetworkAuthGameIdGameNetworkId(
                _game_id
                , _game_network_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameNetworkAuthListFilter()  {
        
            ResponseGameNetworkAuthList wrapper = new ResponseGameNetworkAuthList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network-auth/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameNetworkAuthResult result = api.BrowseGameNetworkAuthListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameNetworkAuthUuid()  {
        
            ResponseGameNetworkAuthBool wrapper = new ResponseGameNetworkAuthBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network-auth/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameNetworkAuth obj = new GameNetworkAuth();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _app_id = util.GetParamValue(_context, "@app_id");
            if(!String.IsNoneOrEmpty(_app_id))
                obj.app_id = ()_app_id;
            
            string _game_network_id = util.GetParamValue(_context, "@game_network_id");
            if(!String.IsNoneOrEmpty(_game_network_id))
                obj.game_network_id = ()_game_network_id;
            
            string _secret = util.GetParamValue(_context, "@secret");
            if(!String.IsNoneOrEmpty(_secret))
                obj.secret = ()_secret;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameNetworkAuthUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameNetworkAuthGameIdGameNetworkId()  {
        
            ResponseGameNetworkAuthBool wrapper = new ResponseGameNetworkAuthBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network-auth/set/game-id/game-network-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameNetworkAuth obj = new GameNetworkAuth();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _app_id = util.GetParamValue(_context, "@app_id");
            if(!String.IsNoneOrEmpty(_app_id))
                obj.app_id = ()_app_id;
            
            string _game_network_id = util.GetParamValue(_context, "@game_network_id");
            if(!String.IsNoneOrEmpty(_game_network_id))
                obj.game_network_id = ()_game_network_id;
            
            string _secret = util.GetParamValue(_context, "@secret");
            if(!String.IsNoneOrEmpty(_secret))
                obj.secret = ()_secret;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameNetworkAuthGameIdGameNetworkId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameNetworkAuthUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameNetworkAuthBool wrapper = new ResponseGameNetworkAuthBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network-auth/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameNetworkAuthUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameNetworkAuthList() {
        

            ResponseGameNetworkAuthList wrapper = new ResponseGameNetworkAuthList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network-auth/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameNetworkAuth> objs = api.GetGameNetworkAuthList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameNetworkAuthListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameNetworkAuthList wrapper = new ResponseGameNetworkAuthList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network-auth/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameNetworkAuth> objs = api.GetGameNetworkAuthListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameNetworkAuthListGameIdGameNetworkId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _game_network_id = ()util.GetParamValue(_context, "@game_network_id");

            ResponseGameNetworkAuthList wrapper = new ResponseGameNetworkAuthList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-network-auth/get/game-id/game-network-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameNetworkAuth> objs = api.GetGameNetworkAuthListGameIdGameNetworkId(
                _game_id
                , _game_network_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameNetwork() {
        

            ResponseProfileGameNetworkInt wrapper = new ResponseProfileGameNetworkInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGameNetwork(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameNetworkUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseProfileGameNetworkInt wrapper = new ResponseProfileGameNetworkInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGameNetworkUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameNetworkGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseProfileGameNetworkInt wrapper = new ResponseProfileGameNetworkInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/count/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGameNetworkGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameNetworkProfileId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseProfileGameNetworkInt wrapper = new ResponseProfileGameNetworkInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/count/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGameNetworkProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameNetworkProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseProfileGameNetworkInt wrapper = new ResponseProfileGameNetworkInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/count/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGameNetworkProfileIdGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameNetworkProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseProfileGameNetworkInt wrapper = new ResponseProfileGameNetworkInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/count/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGameNetworkProfileIdGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameNetworkProfileIdGameIdGameNetworkId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _game_network_id = ()util.GetParamValue(_context, "@game_network_id");

            ResponseProfileGameNetworkInt wrapper = new ResponseProfileGameNetworkInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/count/profile-id/game-id/game-network-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGameNetworkProfileIdGameIdGameNetworkId(
                _profile_id
                , _game_id
                , _game_network_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameNetworkNetworkUsernameGameIdGameNetworkId() {
        
             _network_username = ()util.GetParamValue(_context, "@network_username");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _game_network_id = ()util.GetParamValue(_context, "@game_network_id");

            ResponseProfileGameNetworkInt wrapper = new ResponseProfileGameNetworkInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/count/network-username/game-id/game-network-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGameNetworkNetworkUsernameGameIdGameNetworkId(
                _network_username
                , _game_id
                , _game_network_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseProfileGameNetworkListFilter()  {
        
            ResponseProfileGameNetworkList wrapper = new ResponseProfileGameNetworkList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            ProfileGameNetworkResult result = api.BrowseProfileGameNetworkListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileGameNetworkUuid()  {
        
            ResponseProfileGameNetworkBool wrapper = new ResponseProfileGameNetworkBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            ProfileGameNetwork obj = new ProfileGameNetwork();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _hash = util.GetParamValue(_context, "@hash");
            if(!String.IsNoneOrEmpty(_hash))
                obj.hash = ()_hash;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _game_network_id = util.GetParamValue(_context, "@game_network_id");
            if(!String.IsNoneOrEmpty(_game_network_id))
                obj.game_network_id = ()_game_network_id;
            
            string _network_username = util.GetParamValue(_context, "@network_username");
            if(!String.IsNoneOrEmpty(_network_username))
                obj.network_username = ()_network_username;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _network_fullname = util.GetParamValue(_context, "@network_fullname");
            if(!String.IsNoneOrEmpty(_network_fullname))
                obj.network_fullname = ()_network_fullname;
            
            string _secret = util.GetParamValue(_context, "@secret");
            if(!String.IsNoneOrEmpty(_secret))
                obj.secret = ()_secret;
            
            string _token = util.GetParamValue(_context, "@token");
            if(!String.IsNoneOrEmpty(_token))
                obj.token = ()_token;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _network_auth = util.GetParamValue(_context, "@network_auth");
            if(!String.IsNoneOrEmpty(_network_auth))
                obj.network_auth = ()_network_auth;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _network_user_id = util.GetParamValue(_context, "@network_user_id");
            if(!String.IsNoneOrEmpty(_network_user_id))
                obj.network_user_id = ()_network_user_id;
            
            
            // get data
            wrapper.data = api.SetProfileGameNetworkUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileGameNetworkProfileIdGameId()  {
        
            ResponseProfileGameNetworkBool wrapper = new ResponseProfileGameNetworkBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/set/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            ProfileGameNetwork obj = new ProfileGameNetwork();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _hash = util.GetParamValue(_context, "@hash");
            if(!String.IsNoneOrEmpty(_hash))
                obj.hash = ()_hash;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _game_network_id = util.GetParamValue(_context, "@game_network_id");
            if(!String.IsNoneOrEmpty(_game_network_id))
                obj.game_network_id = ()_game_network_id;
            
            string _network_username = util.GetParamValue(_context, "@network_username");
            if(!String.IsNoneOrEmpty(_network_username))
                obj.network_username = ()_network_username;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _network_fullname = util.GetParamValue(_context, "@network_fullname");
            if(!String.IsNoneOrEmpty(_network_fullname))
                obj.network_fullname = ()_network_fullname;
            
            string _secret = util.GetParamValue(_context, "@secret");
            if(!String.IsNoneOrEmpty(_secret))
                obj.secret = ()_secret;
            
            string _token = util.GetParamValue(_context, "@token");
            if(!String.IsNoneOrEmpty(_token))
                obj.token = ()_token;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _network_auth = util.GetParamValue(_context, "@network_auth");
            if(!String.IsNoneOrEmpty(_network_auth))
                obj.network_auth = ()_network_auth;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _network_user_id = util.GetParamValue(_context, "@network_user_id");
            if(!String.IsNoneOrEmpty(_network_user_id))
                obj.network_user_id = ()_network_user_id;
            
            
            // get data
            wrapper.data = api.SetProfileGameNetworkProfileIdGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileGameNetworkProfileIdGameIdGameNetworkId()  {
        
            ResponseProfileGameNetworkBool wrapper = new ResponseProfileGameNetworkBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/set/profile-id/game-id/game-network-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            ProfileGameNetwork obj = new ProfileGameNetwork();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _hash = util.GetParamValue(_context, "@hash");
            if(!String.IsNoneOrEmpty(_hash))
                obj.hash = ()_hash;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _game_network_id = util.GetParamValue(_context, "@game_network_id");
            if(!String.IsNoneOrEmpty(_game_network_id))
                obj.game_network_id = ()_game_network_id;
            
            string _network_username = util.GetParamValue(_context, "@network_username");
            if(!String.IsNoneOrEmpty(_network_username))
                obj.network_username = ()_network_username;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _network_fullname = util.GetParamValue(_context, "@network_fullname");
            if(!String.IsNoneOrEmpty(_network_fullname))
                obj.network_fullname = ()_network_fullname;
            
            string _secret = util.GetParamValue(_context, "@secret");
            if(!String.IsNoneOrEmpty(_secret))
                obj.secret = ()_secret;
            
            string _token = util.GetParamValue(_context, "@token");
            if(!String.IsNoneOrEmpty(_token))
                obj.token = ()_token;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _network_auth = util.GetParamValue(_context, "@network_auth");
            if(!String.IsNoneOrEmpty(_network_auth))
                obj.network_auth = ()_network_auth;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _network_user_id = util.GetParamValue(_context, "@network_user_id");
            if(!String.IsNoneOrEmpty(_network_user_id))
                obj.network_user_id = ()_network_user_id;
            
            
            // get data
            wrapper.data = api.SetProfileGameNetworkProfileIdGameIdGameNetworkId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileGameNetworkNetworkUsernameGameIdGameNetworkId()  {
        
            ResponseProfileGameNetworkBool wrapper = new ResponseProfileGameNetworkBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/set/network-username/game-id/game-network-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            ProfileGameNetwork obj = new ProfileGameNetwork();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _hash = util.GetParamValue(_context, "@hash");
            if(!String.IsNoneOrEmpty(_hash))
                obj.hash = ()_hash;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _game_network_id = util.GetParamValue(_context, "@game_network_id");
            if(!String.IsNoneOrEmpty(_game_network_id))
                obj.game_network_id = ()_game_network_id;
            
            string _network_username = util.GetParamValue(_context, "@network_username");
            if(!String.IsNoneOrEmpty(_network_username))
                obj.network_username = ()_network_username;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _network_fullname = util.GetParamValue(_context, "@network_fullname");
            if(!String.IsNoneOrEmpty(_network_fullname))
                obj.network_fullname = ()_network_fullname;
            
            string _secret = util.GetParamValue(_context, "@secret");
            if(!String.IsNoneOrEmpty(_secret))
                obj.secret = ()_secret;
            
            string _token = util.GetParamValue(_context, "@token");
            if(!String.IsNoneOrEmpty(_token))
                obj.token = ()_token;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _network_auth = util.GetParamValue(_context, "@network_auth");
            if(!String.IsNoneOrEmpty(_network_auth))
                obj.network_auth = ()_network_auth;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _network_user_id = util.GetParamValue(_context, "@network_user_id");
            if(!String.IsNoneOrEmpty(_network_user_id))
                obj.network_user_id = ()_network_user_id;
            
            
            // get data
            wrapper.data = api.SetProfileGameNetworkNetworkUsernameGameIdGameNetworkId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileGameNetworkUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseProfileGameNetworkBool wrapper = new ResponseProfileGameNetworkBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelProfileGameNetworkUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileGameNetworkProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseProfileGameNetworkBool wrapper = new ResponseProfileGameNetworkBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/del/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelProfileGameNetworkProfileIdGameId(
                        
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileGameNetworkProfileIdGameIdGameNetworkId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _game_network_id = ()util.GetParamValue(_context, "@game_network_id");

            ResponseProfileGameNetworkBool wrapper = new ResponseProfileGameNetworkBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/del/profile-id/game-id/game-network-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelProfileGameNetworkProfileIdGameIdGameNetworkId(
                        
                _profile_id
                , _game_id
                , _game_network_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileGameNetworkNetworkUsernameGameIdGameNetworkId() {
        
             _network_username = ()util.GetParamValue(_context, "@network_username");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _game_network_id = ()util.GetParamValue(_context, "@game_network_id");

            ResponseProfileGameNetworkBool wrapper = new ResponseProfileGameNetworkBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/del/network-username/game-id/game-network-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelProfileGameNetworkNetworkUsernameGameIdGameNetworkId(
                        
                _network_username
                , _game_id
                , _game_network_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameNetworkList() {
        

            ResponseProfileGameNetworkList wrapper = new ResponseProfileGameNetworkList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<ProfileGameNetwork> objs = api.GetProfileGameNetworkList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameNetworkListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseProfileGameNetworkList wrapper = new ResponseProfileGameNetworkList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<ProfileGameNetwork> objs = api.GetProfileGameNetworkListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameNetworkListGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseProfileGameNetworkList wrapper = new ResponseProfileGameNetworkList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/get/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<ProfileGameNetwork> objs = api.GetProfileGameNetworkListGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameNetworkListProfileId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseProfileGameNetworkList wrapper = new ResponseProfileGameNetworkList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/get/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<ProfileGameNetwork> objs = api.GetProfileGameNetworkListProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameNetworkListProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseProfileGameNetworkList wrapper = new ResponseProfileGameNetworkList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/get/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<ProfileGameNetwork> objs = api.GetProfileGameNetworkListProfileIdGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameNetworkListProfileIdGameIdGameNetworkId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _game_network_id = ()util.GetParamValue(_context, "@game_network_id");

            ResponseProfileGameNetworkList wrapper = new ResponseProfileGameNetworkList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/get/profile-id/game-id/game-network-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<ProfileGameNetwork> objs = api.GetProfileGameNetworkListProfileIdGameIdGameNetworkId(
                _profile_id
                , _game_id
                , _game_network_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameNetworkListNetworkUsernameGameIdGameNetworkId() {
        
             _network_username = ()util.GetParamValue(_context, "@network_username");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _game_network_id = ()util.GetParamValue(_context, "@game_network_id");

            ResponseProfileGameNetworkList wrapper = new ResponseProfileGameNetworkList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-network/get/network-username/game-id/game-network-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<ProfileGameNetwork> objs = api.GetProfileGameNetworkListNetworkUsernameGameIdGameNetworkId(
                _network_username
                , _game_id
                , _game_network_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameDataAttribute() {
        

            ResponseProfileGameDataAttributeInt wrapper = new ResponseProfileGameDataAttributeInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-data-attribute/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGameDataAttribute(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameDataAttributeUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseProfileGameDataAttributeInt wrapper = new ResponseProfileGameDataAttributeInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-data-attribute/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGameDataAttributeUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameDataAttributeProfileId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseProfileGameDataAttributeInt wrapper = new ResponseProfileGameDataAttributeInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-data-attribute/count/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGameDataAttributeProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameDataAttributeProfileIdGameIdCode() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _code = ()util.GetParamValue(_context, "@code");

            ResponseProfileGameDataAttributeInt wrapper = new ResponseProfileGameDataAttributeInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-data-attribute/count/profile-id/game-id/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGameDataAttributeProfileIdGameIdCode(
                _profile_id
                , _game_id
                , _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseProfileGameDataAttributeListFilter()  {
        
            ResponseProfileGameDataAttributeList wrapper = new ResponseProfileGameDataAttributeList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-data-attribute/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            ProfileGameDataAttributeResult result = api.BrowseProfileGameDataAttributeListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileGameDataAttributeUuid()  {
        
            ResponseProfileGameDataAttributeBool wrapper = new ResponseProfileGameDataAttributeBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-data-attribute/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            ProfileGameDataAttribute obj = new ProfileGameDataAttribute();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _val = util.GetParamValue(_context, "@val");
            if(!String.IsNoneOrEmpty(_val))
                obj.val = ()_val;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _otype = util.GetParamValue(_context, "@otype");
            if(!String.IsNoneOrEmpty(_otype))
                obj.otype = ()_otype;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetProfileGameDataAttributeUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileGameDataAttributeProfileId()  {
        
            ResponseProfileGameDataAttributeBool wrapper = new ResponseProfileGameDataAttributeBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-data-attribute/set/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            ProfileGameDataAttribute obj = new ProfileGameDataAttribute();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _val = util.GetParamValue(_context, "@val");
            if(!String.IsNoneOrEmpty(_val))
                obj.val = ()_val;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _otype = util.GetParamValue(_context, "@otype");
            if(!String.IsNoneOrEmpty(_otype))
                obj.otype = ()_otype;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetProfileGameDataAttributeProfileId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileGameDataAttributeProfileIdGameIdCode()  {
        
            ResponseProfileGameDataAttributeBool wrapper = new ResponseProfileGameDataAttributeBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-data-attribute/set/profile-id/game-id/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            ProfileGameDataAttribute obj = new ProfileGameDataAttribute();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _val = util.GetParamValue(_context, "@val");
            if(!String.IsNoneOrEmpty(_val))
                obj.val = ()_val;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _otype = util.GetParamValue(_context, "@otype");
            if(!String.IsNoneOrEmpty(_otype))
                obj.otype = ()_otype;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetProfileGameDataAttributeProfileIdGameIdCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileGameDataAttributeUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseProfileGameDataAttributeBool wrapper = new ResponseProfileGameDataAttributeBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-data-attribute/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelProfileGameDataAttributeUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileGameDataAttributeProfileId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseProfileGameDataAttributeBool wrapper = new ResponseProfileGameDataAttributeBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-data-attribute/del/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelProfileGameDataAttributeProfileId(
                        
                _profile_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileGameDataAttributeProfileIdGameIdCode() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _code = ()util.GetParamValue(_context, "@code");

            ResponseProfileGameDataAttributeBool wrapper = new ResponseProfileGameDataAttributeBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-data-attribute/del/profile-id/game-id/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelProfileGameDataAttributeProfileIdGameIdCode(
                        
                _profile_id
                , _game_id
                , _code
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameDataAttributeListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseProfileGameDataAttributeList wrapper = new ResponseProfileGameDataAttributeList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-data-attribute/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<ProfileGameDataAttribute> objs = api.GetProfileGameDataAttributeListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameDataAttributeListProfileId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseProfileGameDataAttributeList wrapper = new ResponseProfileGameDataAttributeList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-data-attribute/get/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<ProfileGameDataAttribute> objs = api.GetProfileGameDataAttributeListProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameDataAttributeListProfileIdGameIdCode() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _code = ()util.GetParamValue(_context, "@code");

            ResponseProfileGameDataAttributeList wrapper = new ResponseProfileGameDataAttributeList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-data-attribute/get/profile-id/game-id/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<ProfileGameDataAttribute> objs = api.GetProfileGameDataAttributeListProfileIdGameIdCode(
                _profile_id
                , _game_id
                , _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameSession() {
        

            ResponseGameSessionInt wrapper = new ResponseGameSessionInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-session/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameSession(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameSessionUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameSessionInt wrapper = new ResponseGameSessionInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-session/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameSessionUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameSessionGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameSessionInt wrapper = new ResponseGameSessionInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-session/count/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameSessionGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameSessionProfileId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseGameSessionInt wrapper = new ResponseGameSessionInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-session/count/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameSessionProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameSessionProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameSessionInt wrapper = new ResponseGameSessionInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-session/count/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameSessionProfileIdGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameSessionListFilter()  {
        
            ResponseGameSessionList wrapper = new ResponseGameSessionList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-session/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameSessionResult result = api.BrowseGameSessionListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameSessionUuid()  {
        
            ResponseGameSessionBool wrapper = new ResponseGameSessionBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-session/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameSession obj = new GameSession();
            
            string _game_area = util.GetParamValue(_context, "@game_area");
            if(!String.IsNoneOrEmpty(_game_area))
                obj.game_area = ()_game_area;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _network_uuid = util.GetParamValue(_context, "@network_uuid");
            if(!String.IsNoneOrEmpty(_network_uuid))
                obj.network_uuid = ()_network_uuid;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _game_level = util.GetParamValue(_context, "@game_level");
            if(!String.IsNoneOrEmpty(_game_level))
                obj.game_level = ()_game_level;
            
            string _profile_network = util.GetParamValue(_context, "@profile_network");
            if(!String.IsNoneOrEmpty(_profile_network))
                obj.profile_network = ()_profile_network;
            
            string _profile_device = util.GetParamValue(_context, "@profile_device");
            if(!String.IsNoneOrEmpty(_profile_device))
                obj.profile_device = ()_profile_device;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _network_external_port = util.GetParamValue(_context, "@network_external_port");
            if(!String.IsNoneOrEmpty(_network_external_port))
                obj.network_external_port = Convert.ToInt32(_network_external_port);
            
            string _game_players_connected = util.GetParamValue(_context, "@game_players_connected");
            if(!String.IsNoneOrEmpty(_game_players_connected))
                obj.game_players_connected = Convert.ToInt32(_game_players_connected);
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _game_state = util.GetParamValue(_context, "@game_state");
            if(!String.IsNoneOrEmpty(_game_state))
                obj.game_state = ()_game_state;
            
            string _hash = util.GetParamValue(_context, "@hash");
            if(!String.IsNoneOrEmpty(_hash))
                obj.hash = ()_hash;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _network_external_ip = util.GetParamValue(_context, "@network_external_ip");
            if(!String.IsNoneOrEmpty(_network_external_ip))
                obj.network_external_ip = ()_network_external_ip;
            
            string _profile_username = util.GetParamValue(_context, "@profile_username");
            if(!String.IsNoneOrEmpty(_profile_username))
                obj.profile_username = ()_profile_username;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _game_code = util.GetParamValue(_context, "@game_code");
            if(!String.IsNoneOrEmpty(_game_code))
                obj.game_code = ()_game_code;
            
            string _game_player_z = util.GetParamValue(_context, "@game_player_z");
            if(!String.IsNoneOrEmpty(_game_player_z))
                obj.game_player_z = float.Parse(_game_player_z);
            
            string _game_player_x = util.GetParamValue(_context, "@game_player_x");
            if(!String.IsNoneOrEmpty(_game_player_x))
                obj.game_player_x = float.Parse(_game_player_x);
            
            string _game_player_y = util.GetParamValue(_context, "@game_player_y");
            if(!String.IsNoneOrEmpty(_game_player_y))
                obj.game_player_y = float.Parse(_game_player_y);
            
            string _network_port = util.GetParamValue(_context, "@network_port");
            if(!String.IsNoneOrEmpty(_network_port))
                obj.network_port = Convert.ToInt32(_network_port);
            
            string _game_players_allowed = util.GetParamValue(_context, "@game_players_allowed");
            if(!String.IsNoneOrEmpty(_game_players_allowed))
                obj.game_players_allowed = Convert.ToInt32(_game_players_allowed);
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _game_type = util.GetParamValue(_context, "@game_type");
            if(!String.IsNoneOrEmpty(_game_type))
                obj.game_type = ()_game_type;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _network_ip = util.GetParamValue(_context, "@network_ip");
            if(!String.IsNoneOrEmpty(_network_ip))
                obj.network_ip = ()_network_ip;
            
            string _network_use_nat = util.GetParamValue(_context, "@network_use_nat");
            if(!String.IsNoneOrEmpty(_network_use_nat))
                obj.network_use_nat = Convert.ToBoolean(_network_use_nat);
            
            
            // get data
            wrapper.data = api.SetGameSessionUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameSessionUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameSessionBool wrapper = new ResponseGameSessionBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-session/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameSessionUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameSessionList() {
        

            ResponseGameSessionList wrapper = new ResponseGameSessionList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-session/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameSession> objs = api.GetGameSessionList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameSessionListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameSessionList wrapper = new ResponseGameSessionList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-session/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameSession> objs = api.GetGameSessionListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameSessionListGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameSessionList wrapper = new ResponseGameSessionList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-session/get/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameSession> objs = api.GetGameSessionListGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameSessionListProfileId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseGameSessionList wrapper = new ResponseGameSessionList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-session/get/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameSession> objs = api.GetGameSessionListProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameSessionListProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameSessionList wrapper = new ResponseGameSessionList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-session/get/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameSession> objs = api.GetGameSessionListProfileIdGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameSessionData() {
        

            ResponseGameSessionDataInt wrapper = new ResponseGameSessionDataInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-session-data/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameSessionData(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameSessionDataUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameSessionDataInt wrapper = new ResponseGameSessionDataInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-session-data/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameSessionDataUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameSessionDataListFilter()  {
        
            ResponseGameSessionDataList wrapper = new ResponseGameSessionDataList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-session-data/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameSessionDataResult result = api.BrowseGameSessionDataListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameSessionDataUuid()  {
        
            ResponseGameSessionDataBool wrapper = new ResponseGameSessionDataBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-session-data/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameSessionData obj = new GameSessionData();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data_results = util.GetParamValue(_context, "@data_results");
            if(!String.IsNoneOrEmpty(_data_results))
                obj.data_results = ()_data_results;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _data_layer_projectile = util.GetParamValue(_context, "@data_layer_projectile");
            if(!String.IsNoneOrEmpty(_data_layer_projectile))
                obj.data_layer_projectile = ()_data_layer_projectile;
            
            string _data_layer_actors = util.GetParamValue(_context, "@data_layer_actors");
            if(!String.IsNoneOrEmpty(_data_layer_actors))
                obj.data_layer_actors = ()_data_layer_actors;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _data_layer_enemy = util.GetParamValue(_context, "@data_layer_enemy");
            if(!String.IsNoneOrEmpty(_data_layer_enemy))
                obj.data_layer_enemy = ()_data_layer_enemy;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameSessionDataUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameSessionDataUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameSessionDataBool wrapper = new ResponseGameSessionDataBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-session-data/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameSessionDataUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameSessionDataList() {
        

            ResponseGameSessionDataList wrapper = new ResponseGameSessionDataList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-session-data/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameSessionData> objs = api.GetGameSessionDataList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameSessionDataListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameSessionDataList wrapper = new ResponseGameSessionDataList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-session-data/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameSessionData> objs = api.GetGameSessionDataListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameContent() {
        

            ResponseGameContentInt wrapper = new ResponseGameContentInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameContent(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameContentUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameContentInt wrapper = new ResponseGameContentInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameContentUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameContentGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameContentInt wrapper = new ResponseGameContentInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/count/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameContentGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameContentGameIdPath() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _path = ()util.GetParamValue(_context, "@path");

            ResponseGameContentInt wrapper = new ResponseGameContentInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/count/game-id/path";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameContentGameIdPath(
                _game_id
                , _path
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameContentGameIdPathVersion() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _path = ()util.GetParamValue(_context, "@path");
             _version = ()util.GetParamValue(_context, "@version");

            ResponseGameContentInt wrapper = new ResponseGameContentInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/count/game-id/path/version";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameContentGameIdPathVersion(
                _game_id
                , _path
                , _version
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameContentGameIdPathVersionPlatformIncrement() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _path = ()util.GetParamValue(_context, "@path");
             _version = ()util.GetParamValue(_context, "@version");
             _platform = ()util.GetParamValue(_context, "@platform");
             _increment = ()util.GetParamValue(_context, "@increment");

            ResponseGameContentInt wrapper = new ResponseGameContentInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/count/game-id/path/version/platform/increment";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameContentGameIdPathVersionPlatformIncrement(
                _game_id
                , _path
                , _version
                , _platform
                , _increment
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameContentListFilter()  {
        
            ResponseGameContentList wrapper = new ResponseGameContentList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameContentResult result = api.BrowseGameContentListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameContentUuid()  {
        
            ResponseGameContentBool wrapper = new ResponseGameContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameContent obj = new GameContent();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _extension = util.GetParamValue(_context, "@extension");
            if(!String.IsNoneOrEmpty(_extension))
                obj.extension = ()_extension;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _filename = util.GetParamValue(_context, "@filename");
            if(!String.IsNoneOrEmpty(_filename))
                obj.filename = ()_filename;
            
            string _source = util.GetParamValue(_context, "@source");
            if(!String.IsNoneOrEmpty(_source))
                obj.source = ()_source;
            
            string _version = util.GetParamValue(_context, "@version");
            if(!String.IsNoneOrEmpty(_version))
                obj.version = ()_version;
            
            string _platform = util.GetParamValue(_context, "@platform");
            if(!String.IsNoneOrEmpty(_platform))
                obj.platform = ()_platform;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _path = util.GetParamValue(_context, "@path");
            if(!String.IsNoneOrEmpty(_path))
                obj.path = ()_path;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _increment = util.GetParamValue(_context, "@increment");
            if(!String.IsNoneOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _hash = util.GetParamValue(_context, "@hash");
            if(!String.IsNoneOrEmpty(_hash))
                obj.hash = ()_hash;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameContentUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameContentGameId()  {
        
            ResponseGameContentBool wrapper = new ResponseGameContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/set/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameContent obj = new GameContent();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _extension = util.GetParamValue(_context, "@extension");
            if(!String.IsNoneOrEmpty(_extension))
                obj.extension = ()_extension;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _filename = util.GetParamValue(_context, "@filename");
            if(!String.IsNoneOrEmpty(_filename))
                obj.filename = ()_filename;
            
            string _source = util.GetParamValue(_context, "@source");
            if(!String.IsNoneOrEmpty(_source))
                obj.source = ()_source;
            
            string _version = util.GetParamValue(_context, "@version");
            if(!String.IsNoneOrEmpty(_version))
                obj.version = ()_version;
            
            string _platform = util.GetParamValue(_context, "@platform");
            if(!String.IsNoneOrEmpty(_platform))
                obj.platform = ()_platform;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _path = util.GetParamValue(_context, "@path");
            if(!String.IsNoneOrEmpty(_path))
                obj.path = ()_path;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _increment = util.GetParamValue(_context, "@increment");
            if(!String.IsNoneOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _hash = util.GetParamValue(_context, "@hash");
            if(!String.IsNoneOrEmpty(_hash))
                obj.hash = ()_hash;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameContentGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameContentGameIdPath()  {
        
            ResponseGameContentBool wrapper = new ResponseGameContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/set/game-id/path";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameContent obj = new GameContent();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _extension = util.GetParamValue(_context, "@extension");
            if(!String.IsNoneOrEmpty(_extension))
                obj.extension = ()_extension;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _filename = util.GetParamValue(_context, "@filename");
            if(!String.IsNoneOrEmpty(_filename))
                obj.filename = ()_filename;
            
            string _source = util.GetParamValue(_context, "@source");
            if(!String.IsNoneOrEmpty(_source))
                obj.source = ()_source;
            
            string _version = util.GetParamValue(_context, "@version");
            if(!String.IsNoneOrEmpty(_version))
                obj.version = ()_version;
            
            string _platform = util.GetParamValue(_context, "@platform");
            if(!String.IsNoneOrEmpty(_platform))
                obj.platform = ()_platform;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _path = util.GetParamValue(_context, "@path");
            if(!String.IsNoneOrEmpty(_path))
                obj.path = ()_path;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _increment = util.GetParamValue(_context, "@increment");
            if(!String.IsNoneOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _hash = util.GetParamValue(_context, "@hash");
            if(!String.IsNoneOrEmpty(_hash))
                obj.hash = ()_hash;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameContentGameIdPath(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameContentGameIdPathVersion()  {
        
            ResponseGameContentBool wrapper = new ResponseGameContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/set/game-id/path/version";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameContent obj = new GameContent();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _extension = util.GetParamValue(_context, "@extension");
            if(!String.IsNoneOrEmpty(_extension))
                obj.extension = ()_extension;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _filename = util.GetParamValue(_context, "@filename");
            if(!String.IsNoneOrEmpty(_filename))
                obj.filename = ()_filename;
            
            string _source = util.GetParamValue(_context, "@source");
            if(!String.IsNoneOrEmpty(_source))
                obj.source = ()_source;
            
            string _version = util.GetParamValue(_context, "@version");
            if(!String.IsNoneOrEmpty(_version))
                obj.version = ()_version;
            
            string _platform = util.GetParamValue(_context, "@platform");
            if(!String.IsNoneOrEmpty(_platform))
                obj.platform = ()_platform;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _path = util.GetParamValue(_context, "@path");
            if(!String.IsNoneOrEmpty(_path))
                obj.path = ()_path;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _increment = util.GetParamValue(_context, "@increment");
            if(!String.IsNoneOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _hash = util.GetParamValue(_context, "@hash");
            if(!String.IsNoneOrEmpty(_hash))
                obj.hash = ()_hash;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameContentGameIdPathVersion(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameContentGameIdPathVersionPlatformIncrement()  {
        
            ResponseGameContentBool wrapper = new ResponseGameContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/set/game-id/path/version/platform/increment";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameContent obj = new GameContent();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _extension = util.GetParamValue(_context, "@extension");
            if(!String.IsNoneOrEmpty(_extension))
                obj.extension = ()_extension;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _filename = util.GetParamValue(_context, "@filename");
            if(!String.IsNoneOrEmpty(_filename))
                obj.filename = ()_filename;
            
            string _source = util.GetParamValue(_context, "@source");
            if(!String.IsNoneOrEmpty(_source))
                obj.source = ()_source;
            
            string _version = util.GetParamValue(_context, "@version");
            if(!String.IsNoneOrEmpty(_version))
                obj.version = ()_version;
            
            string _platform = util.GetParamValue(_context, "@platform");
            if(!String.IsNoneOrEmpty(_platform))
                obj.platform = ()_platform;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _path = util.GetParamValue(_context, "@path");
            if(!String.IsNoneOrEmpty(_path))
                obj.path = ()_path;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _increment = util.GetParamValue(_context, "@increment");
            if(!String.IsNoneOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _hash = util.GetParamValue(_context, "@hash");
            if(!String.IsNoneOrEmpty(_hash))
                obj.hash = ()_hash;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameContentGameIdPathVersionPlatformIncrement(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameContentUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameContentBool wrapper = new ResponseGameContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameContentUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameContentGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameContentBool wrapper = new ResponseGameContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/del/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameContentGameId(
                        
                _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameContentGameIdPath() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _path = ()util.GetParamValue(_context, "@path");

            ResponseGameContentBool wrapper = new ResponseGameContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/del/game-id/path";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameContentGameIdPath(
                        
                _game_id
                , _path
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameContentGameIdPathVersion() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _path = ()util.GetParamValue(_context, "@path");
             _version = ()util.GetParamValue(_context, "@version");

            ResponseGameContentBool wrapper = new ResponseGameContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/del/game-id/path/version";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameContentGameIdPathVersion(
                        
                _game_id
                , _path
                , _version
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameContentGameIdPathVersionPlatformIncrement() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _path = ()util.GetParamValue(_context, "@path");
             _version = ()util.GetParamValue(_context, "@version");
             _platform = ()util.GetParamValue(_context, "@platform");
             _increment = ()util.GetParamValue(_context, "@increment");

            ResponseGameContentBool wrapper = new ResponseGameContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/del/game-id/path/version/platform/increment";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameContentGameIdPathVersionPlatformIncrement(
                        
                _game_id
                , _path
                , _version
                , _platform
                , _increment
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameContentList() {
        

            ResponseGameContentList wrapper = new ResponseGameContentList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameContent> objs = api.GetGameContentList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameContentListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameContentList wrapper = new ResponseGameContentList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameContent> objs = api.GetGameContentListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameContentListGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameContentList wrapper = new ResponseGameContentList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/get/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameContent> objs = api.GetGameContentListGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameContentListGameIdPath() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _path = ()util.GetParamValue(_context, "@path");

            ResponseGameContentList wrapper = new ResponseGameContentList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/get/game-id/path";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameContent> objs = api.GetGameContentListGameIdPath(
                _game_id
                , _path
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameContentListGameIdPathVersion() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _path = ()util.GetParamValue(_context, "@path");
             _version = ()util.GetParamValue(_context, "@version");

            ResponseGameContentList wrapper = new ResponseGameContentList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/get/game-id/path/version";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameContent> objs = api.GetGameContentListGameIdPathVersion(
                _game_id
                , _path
                , _version
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameContentListGameIdPathVersionPlatformIncrement() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _path = ()util.GetParamValue(_context, "@path");
             _version = ()util.GetParamValue(_context, "@version");
             _platform = ()util.GetParamValue(_context, "@platform");
             _increment = ()util.GetParamValue(_context, "@increment");

            ResponseGameContentList wrapper = new ResponseGameContentList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-content/get/game-id/path/version/platform/increment";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameContent> objs = api.GetGameContentListGameIdPathVersionPlatformIncrement(
                _game_id
                , _path
                , _version
                , _platform
                , _increment
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContent() {
        

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileContent(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContentUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileContentUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContentGameIdProfileId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/count/game-id/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileContentGameIdProfileId(
                _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContentGameIdUsername() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _username = ()util.GetParamValue(_context, "@username");

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/count/game-id/username";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileContentGameIdUsername(
                _game_id
                , _username
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContentUsername() {
        
             _username = ()util.GetParamValue(_context, "@username");

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/count/username";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileContentUsername(
                _username
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContentGameIdProfileIdPath() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _path = ()util.GetParamValue(_context, "@path");

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/count/game-id/profile-id/path";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileContentGameIdProfileIdPath(
                _game_id
                , _profile_id
                , _path
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContentGameIdProfileIdPathVersion() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _path = ()util.GetParamValue(_context, "@path");
             _version = ()util.GetParamValue(_context, "@version");

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/count/game-id/profile-id/path/version";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileContentGameIdProfileIdPathVersion(
                _game_id
                , _profile_id
                , _path
                , _version
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContentGameIdProfileIdPathVersionPlatformIncrement() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _path = ()util.GetParamValue(_context, "@path");
             _version = ()util.GetParamValue(_context, "@version");
             _platform = ()util.GetParamValue(_context, "@platform");
             _increment = ()util.GetParamValue(_context, "@increment");

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/count/game-id/profile-id/path/version/platform/increment";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileContentGameIdProfileIdPathVersionPlatformIncrement(
                _game_id
                , _profile_id
                , _path
                , _version
                , _platform
                , _increment
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContentGameIdUsernamePath() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _username = ()util.GetParamValue(_context, "@username");
             _path = ()util.GetParamValue(_context, "@path");

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/count/game-id/username/path";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileContentGameIdUsernamePath(
                _game_id
                , _username
                , _path
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContentGameIdUsernamePathVersion() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _username = ()util.GetParamValue(_context, "@username");
             _path = ()util.GetParamValue(_context, "@path");
             _version = ()util.GetParamValue(_context, "@version");

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/count/game-id/username/path/version";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileContentGameIdUsernamePathVersion(
                _game_id
                , _username
                , _path
                , _version
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileContentGameIdUsernamePathVersionPlatformIncrement() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _username = ()util.GetParamValue(_context, "@username");
             _path = ()util.GetParamValue(_context, "@path");
             _version = ()util.GetParamValue(_context, "@version");
             _platform = ()util.GetParamValue(_context, "@platform");
             _increment = ()util.GetParamValue(_context, "@increment");

            ResponseGameProfileContentInt wrapper = new ResponseGameProfileContentInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/count/game-id/username/path/version/platform/increment";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileContentGameIdUsernamePathVersionPlatformIncrement(
                _game_id
                , _username
                , _path
                , _version
                , _platform
                , _increment
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameProfileContentListFilter()  {
        
            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameProfileContentResult result = api.BrowseGameProfileContentListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileContentUuid()  {
        
            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileContent obj = new GameProfileContent();
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _increment = util.GetParamValue(_context, "@increment");
            if(!String.IsNoneOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _path = util.GetParamValue(_context, "@path");
            if(!String.IsNoneOrEmpty(_path))
                obj.path = ()_path;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _platform = util.GetParamValue(_context, "@platform");
            if(!String.IsNoneOrEmpty(_platform))
                obj.platform = ()_platform;
            
            string _filename = util.GetParamValue(_context, "@filename");
            if(!String.IsNoneOrEmpty(_filename))
                obj.filename = ()_filename;
            
            string _source = util.GetParamValue(_context, "@source");
            if(!String.IsNoneOrEmpty(_source))
                obj.source = ()_source;
            
            string _version = util.GetParamValue(_context, "@version");
            if(!String.IsNoneOrEmpty(_version))
                obj.version = ()_version;
            
            string _game_network = util.GetParamValue(_context, "@game_network");
            if(!String.IsNoneOrEmpty(_game_network))
                obj.game_network = ()_game_network;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _hash = util.GetParamValue(_context, "@hash");
            if(!String.IsNoneOrEmpty(_hash))
                obj.hash = ()_hash;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _extension = util.GetParamValue(_context, "@extension");
            if(!String.IsNoneOrEmpty(_extension))
                obj.extension = ()_extension;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            
            // get data
            wrapper.data = api.SetGameProfileContentUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileContentGameIdProfileId()  {
        
            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/set/game-id/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileContent obj = new GameProfileContent();
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _increment = util.GetParamValue(_context, "@increment");
            if(!String.IsNoneOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _path = util.GetParamValue(_context, "@path");
            if(!String.IsNoneOrEmpty(_path))
                obj.path = ()_path;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _platform = util.GetParamValue(_context, "@platform");
            if(!String.IsNoneOrEmpty(_platform))
                obj.platform = ()_platform;
            
            string _filename = util.GetParamValue(_context, "@filename");
            if(!String.IsNoneOrEmpty(_filename))
                obj.filename = ()_filename;
            
            string _source = util.GetParamValue(_context, "@source");
            if(!String.IsNoneOrEmpty(_source))
                obj.source = ()_source;
            
            string _version = util.GetParamValue(_context, "@version");
            if(!String.IsNoneOrEmpty(_version))
                obj.version = ()_version;
            
            string _game_network = util.GetParamValue(_context, "@game_network");
            if(!String.IsNoneOrEmpty(_game_network))
                obj.game_network = ()_game_network;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _hash = util.GetParamValue(_context, "@hash");
            if(!String.IsNoneOrEmpty(_hash))
                obj.hash = ()_hash;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _extension = util.GetParamValue(_context, "@extension");
            if(!String.IsNoneOrEmpty(_extension))
                obj.extension = ()_extension;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            
            // get data
            wrapper.data = api.SetGameProfileContentGameIdProfileId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileContentGameIdUsername()  {
        
            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/set/game-id/username";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileContent obj = new GameProfileContent();
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _increment = util.GetParamValue(_context, "@increment");
            if(!String.IsNoneOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _path = util.GetParamValue(_context, "@path");
            if(!String.IsNoneOrEmpty(_path))
                obj.path = ()_path;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _platform = util.GetParamValue(_context, "@platform");
            if(!String.IsNoneOrEmpty(_platform))
                obj.platform = ()_platform;
            
            string _filename = util.GetParamValue(_context, "@filename");
            if(!String.IsNoneOrEmpty(_filename))
                obj.filename = ()_filename;
            
            string _source = util.GetParamValue(_context, "@source");
            if(!String.IsNoneOrEmpty(_source))
                obj.source = ()_source;
            
            string _version = util.GetParamValue(_context, "@version");
            if(!String.IsNoneOrEmpty(_version))
                obj.version = ()_version;
            
            string _game_network = util.GetParamValue(_context, "@game_network");
            if(!String.IsNoneOrEmpty(_game_network))
                obj.game_network = ()_game_network;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _hash = util.GetParamValue(_context, "@hash");
            if(!String.IsNoneOrEmpty(_hash))
                obj.hash = ()_hash;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _extension = util.GetParamValue(_context, "@extension");
            if(!String.IsNoneOrEmpty(_extension))
                obj.extension = ()_extension;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            
            // get data
            wrapper.data = api.SetGameProfileContentGameIdUsername(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileContentUsername()  {
        
            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/set/username";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileContent obj = new GameProfileContent();
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _increment = util.GetParamValue(_context, "@increment");
            if(!String.IsNoneOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _path = util.GetParamValue(_context, "@path");
            if(!String.IsNoneOrEmpty(_path))
                obj.path = ()_path;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _platform = util.GetParamValue(_context, "@platform");
            if(!String.IsNoneOrEmpty(_platform))
                obj.platform = ()_platform;
            
            string _filename = util.GetParamValue(_context, "@filename");
            if(!String.IsNoneOrEmpty(_filename))
                obj.filename = ()_filename;
            
            string _source = util.GetParamValue(_context, "@source");
            if(!String.IsNoneOrEmpty(_source))
                obj.source = ()_source;
            
            string _version = util.GetParamValue(_context, "@version");
            if(!String.IsNoneOrEmpty(_version))
                obj.version = ()_version;
            
            string _game_network = util.GetParamValue(_context, "@game_network");
            if(!String.IsNoneOrEmpty(_game_network))
                obj.game_network = ()_game_network;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _hash = util.GetParamValue(_context, "@hash");
            if(!String.IsNoneOrEmpty(_hash))
                obj.hash = ()_hash;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _extension = util.GetParamValue(_context, "@extension");
            if(!String.IsNoneOrEmpty(_extension))
                obj.extension = ()_extension;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            
            // get data
            wrapper.data = api.SetGameProfileContentUsername(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileContentGameIdProfileIdPath()  {
        
            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/set/game-id/profile-id/path";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileContent obj = new GameProfileContent();
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _increment = util.GetParamValue(_context, "@increment");
            if(!String.IsNoneOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _path = util.GetParamValue(_context, "@path");
            if(!String.IsNoneOrEmpty(_path))
                obj.path = ()_path;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _platform = util.GetParamValue(_context, "@platform");
            if(!String.IsNoneOrEmpty(_platform))
                obj.platform = ()_platform;
            
            string _filename = util.GetParamValue(_context, "@filename");
            if(!String.IsNoneOrEmpty(_filename))
                obj.filename = ()_filename;
            
            string _source = util.GetParamValue(_context, "@source");
            if(!String.IsNoneOrEmpty(_source))
                obj.source = ()_source;
            
            string _version = util.GetParamValue(_context, "@version");
            if(!String.IsNoneOrEmpty(_version))
                obj.version = ()_version;
            
            string _game_network = util.GetParamValue(_context, "@game_network");
            if(!String.IsNoneOrEmpty(_game_network))
                obj.game_network = ()_game_network;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _hash = util.GetParamValue(_context, "@hash");
            if(!String.IsNoneOrEmpty(_hash))
                obj.hash = ()_hash;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _extension = util.GetParamValue(_context, "@extension");
            if(!String.IsNoneOrEmpty(_extension))
                obj.extension = ()_extension;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            
            // get data
            wrapper.data = api.SetGameProfileContentGameIdProfileIdPath(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileContentGameIdProfileIdPathVersion()  {
        
            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/set/game-id/profile-id/path/version";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileContent obj = new GameProfileContent();
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _increment = util.GetParamValue(_context, "@increment");
            if(!String.IsNoneOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _path = util.GetParamValue(_context, "@path");
            if(!String.IsNoneOrEmpty(_path))
                obj.path = ()_path;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _platform = util.GetParamValue(_context, "@platform");
            if(!String.IsNoneOrEmpty(_platform))
                obj.platform = ()_platform;
            
            string _filename = util.GetParamValue(_context, "@filename");
            if(!String.IsNoneOrEmpty(_filename))
                obj.filename = ()_filename;
            
            string _source = util.GetParamValue(_context, "@source");
            if(!String.IsNoneOrEmpty(_source))
                obj.source = ()_source;
            
            string _version = util.GetParamValue(_context, "@version");
            if(!String.IsNoneOrEmpty(_version))
                obj.version = ()_version;
            
            string _game_network = util.GetParamValue(_context, "@game_network");
            if(!String.IsNoneOrEmpty(_game_network))
                obj.game_network = ()_game_network;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _hash = util.GetParamValue(_context, "@hash");
            if(!String.IsNoneOrEmpty(_hash))
                obj.hash = ()_hash;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _extension = util.GetParamValue(_context, "@extension");
            if(!String.IsNoneOrEmpty(_extension))
                obj.extension = ()_extension;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            
            // get data
            wrapper.data = api.SetGameProfileContentGameIdProfileIdPathVersion(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileContentGameIdProfileIdPathVersionPlatformIncrement()  {
        
            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/set/game-id/profile-id/path/version/platform/increment";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileContent obj = new GameProfileContent();
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _increment = util.GetParamValue(_context, "@increment");
            if(!String.IsNoneOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _path = util.GetParamValue(_context, "@path");
            if(!String.IsNoneOrEmpty(_path))
                obj.path = ()_path;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _platform = util.GetParamValue(_context, "@platform");
            if(!String.IsNoneOrEmpty(_platform))
                obj.platform = ()_platform;
            
            string _filename = util.GetParamValue(_context, "@filename");
            if(!String.IsNoneOrEmpty(_filename))
                obj.filename = ()_filename;
            
            string _source = util.GetParamValue(_context, "@source");
            if(!String.IsNoneOrEmpty(_source))
                obj.source = ()_source;
            
            string _version = util.GetParamValue(_context, "@version");
            if(!String.IsNoneOrEmpty(_version))
                obj.version = ()_version;
            
            string _game_network = util.GetParamValue(_context, "@game_network");
            if(!String.IsNoneOrEmpty(_game_network))
                obj.game_network = ()_game_network;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _hash = util.GetParamValue(_context, "@hash");
            if(!String.IsNoneOrEmpty(_hash))
                obj.hash = ()_hash;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _extension = util.GetParamValue(_context, "@extension");
            if(!String.IsNoneOrEmpty(_extension))
                obj.extension = ()_extension;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            
            // get data
            wrapper.data = api.SetGameProfileContentGameIdProfileIdPathVersionPlatformIncrement(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileContentGameIdUsernamePath()  {
        
            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/set/game-id/username/path";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileContent obj = new GameProfileContent();
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _increment = util.GetParamValue(_context, "@increment");
            if(!String.IsNoneOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _path = util.GetParamValue(_context, "@path");
            if(!String.IsNoneOrEmpty(_path))
                obj.path = ()_path;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _platform = util.GetParamValue(_context, "@platform");
            if(!String.IsNoneOrEmpty(_platform))
                obj.platform = ()_platform;
            
            string _filename = util.GetParamValue(_context, "@filename");
            if(!String.IsNoneOrEmpty(_filename))
                obj.filename = ()_filename;
            
            string _source = util.GetParamValue(_context, "@source");
            if(!String.IsNoneOrEmpty(_source))
                obj.source = ()_source;
            
            string _version = util.GetParamValue(_context, "@version");
            if(!String.IsNoneOrEmpty(_version))
                obj.version = ()_version;
            
            string _game_network = util.GetParamValue(_context, "@game_network");
            if(!String.IsNoneOrEmpty(_game_network))
                obj.game_network = ()_game_network;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _hash = util.GetParamValue(_context, "@hash");
            if(!String.IsNoneOrEmpty(_hash))
                obj.hash = ()_hash;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _extension = util.GetParamValue(_context, "@extension");
            if(!String.IsNoneOrEmpty(_extension))
                obj.extension = ()_extension;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            
            // get data
            wrapper.data = api.SetGameProfileContentGameIdUsernamePath(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileContentGameIdUsernamePathVersion()  {
        
            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/set/game-id/username/path/version";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileContent obj = new GameProfileContent();
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _increment = util.GetParamValue(_context, "@increment");
            if(!String.IsNoneOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _path = util.GetParamValue(_context, "@path");
            if(!String.IsNoneOrEmpty(_path))
                obj.path = ()_path;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _platform = util.GetParamValue(_context, "@platform");
            if(!String.IsNoneOrEmpty(_platform))
                obj.platform = ()_platform;
            
            string _filename = util.GetParamValue(_context, "@filename");
            if(!String.IsNoneOrEmpty(_filename))
                obj.filename = ()_filename;
            
            string _source = util.GetParamValue(_context, "@source");
            if(!String.IsNoneOrEmpty(_source))
                obj.source = ()_source;
            
            string _version = util.GetParamValue(_context, "@version");
            if(!String.IsNoneOrEmpty(_version))
                obj.version = ()_version;
            
            string _game_network = util.GetParamValue(_context, "@game_network");
            if(!String.IsNoneOrEmpty(_game_network))
                obj.game_network = ()_game_network;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _hash = util.GetParamValue(_context, "@hash");
            if(!String.IsNoneOrEmpty(_hash))
                obj.hash = ()_hash;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _extension = util.GetParamValue(_context, "@extension");
            if(!String.IsNoneOrEmpty(_extension))
                obj.extension = ()_extension;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            
            // get data
            wrapper.data = api.SetGameProfileContentGameIdUsernamePathVersion(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileContentGameIdUsernamePathVersionPlatformIncrement()  {
        
            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/set/game-id/username/path/version/platform/increment";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileContent obj = new GameProfileContent();
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _increment = util.GetParamValue(_context, "@increment");
            if(!String.IsNoneOrEmpty(_increment))
                obj.increment = Convert.ToInt32(_increment);
            
            string _path = util.GetParamValue(_context, "@path");
            if(!String.IsNoneOrEmpty(_path))
                obj.path = ()_path;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _platform = util.GetParamValue(_context, "@platform");
            if(!String.IsNoneOrEmpty(_platform))
                obj.platform = ()_platform;
            
            string _filename = util.GetParamValue(_context, "@filename");
            if(!String.IsNoneOrEmpty(_filename))
                obj.filename = ()_filename;
            
            string _source = util.GetParamValue(_context, "@source");
            if(!String.IsNoneOrEmpty(_source))
                obj.source = ()_source;
            
            string _version = util.GetParamValue(_context, "@version");
            if(!String.IsNoneOrEmpty(_version))
                obj.version = ()_version;
            
            string _game_network = util.GetParamValue(_context, "@game_network");
            if(!String.IsNoneOrEmpty(_game_network))
                obj.game_network = ()_game_network;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _hash = util.GetParamValue(_context, "@hash");
            if(!String.IsNoneOrEmpty(_hash))
                obj.hash = ()_hash;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _extension = util.GetParamValue(_context, "@extension");
            if(!String.IsNoneOrEmpty(_extension))
                obj.extension = ()_extension;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            
            // get data
            wrapper.data = api.SetGameProfileContentGameIdUsernamePathVersionPlatformIncrement(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileContentUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProfileContentUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileContentGameIdProfileId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/del/game-id/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProfileContentGameIdProfileId(
                        
                _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileContentGameIdUsername() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _username = ()util.GetParamValue(_context, "@username");

            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/del/game-id/username";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProfileContentGameIdUsername(
                        
                _game_id
                , _username
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileContentUsername() {
        
             _username = ()util.GetParamValue(_context, "@username");

            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/del/username";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProfileContentUsername(
                        
                _username
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileContentGameIdProfileIdPath() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _path = ()util.GetParamValue(_context, "@path");

            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/del/game-id/profile-id/path";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProfileContentGameIdProfileIdPath(
                        
                _game_id
                , _profile_id
                , _path
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileContentGameIdProfileIdPathVersion() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _path = ()util.GetParamValue(_context, "@path");
             _version = ()util.GetParamValue(_context, "@version");

            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/del/game-id/profile-id/path/version";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProfileContentGameIdProfileIdPathVersion(
                        
                _game_id
                , _profile_id
                , _path
                , _version
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileContentGameIdProfileIdPathVersionPlatformIncrement() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _path = ()util.GetParamValue(_context, "@path");
             _version = ()util.GetParamValue(_context, "@version");
             _platform = ()util.GetParamValue(_context, "@platform");
             _increment = ()util.GetParamValue(_context, "@increment");

            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/del/game-id/profile-id/path/version/platform/increment";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProfileContentGameIdProfileIdPathVersionPlatformIncrement(
                        
                _game_id
                , _profile_id
                , _path
                , _version
                , _platform
                , _increment
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileContentGameIdUsernamePath() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _username = ()util.GetParamValue(_context, "@username");
             _path = ()util.GetParamValue(_context, "@path");

            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/del/game-id/username/path";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProfileContentGameIdUsernamePath(
                        
                _game_id
                , _username
                , _path
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileContentGameIdUsernamePathVersion() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _username = ()util.GetParamValue(_context, "@username");
             _path = ()util.GetParamValue(_context, "@path");
             _version = ()util.GetParamValue(_context, "@version");

            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/del/game-id/username/path/version";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProfileContentGameIdUsernamePathVersion(
                        
                _game_id
                , _username
                , _path
                , _version
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileContentGameIdUsernamePathVersionPlatformIncrement() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _username = ()util.GetParamValue(_context, "@username");
             _path = ()util.GetParamValue(_context, "@path");
             _version = ()util.GetParamValue(_context, "@version");
             _platform = ()util.GetParamValue(_context, "@platform");
             _increment = ()util.GetParamValue(_context, "@increment");

            ResponseGameProfileContentBool wrapper = new ResponseGameProfileContentBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/del/game-id/username/path/version/platform/increment";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProfileContentGameIdUsernamePathVersionPlatformIncrement(
                        
                _game_id
                , _username
                , _path
                , _version
                , _platform
                , _increment
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentList() {
        

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileContent> objs = api.GetGameProfileContentList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileContent> objs = api.GetGameProfileContentListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentListGameIdProfileId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/get/game-id/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileContent> objs = api.GetGameProfileContentListGameIdProfileId(
                _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentListGameIdUsername() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _username = ()util.GetParamValue(_context, "@username");

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/get/game-id/username";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileContent> objs = api.GetGameProfileContentListGameIdUsername(
                _game_id
                , _username
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentListUsername() {
        
             _username = ()util.GetParamValue(_context, "@username");

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/get/username";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileContent> objs = api.GetGameProfileContentListUsername(
                _username
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentListGameIdProfileIdPath() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _path = ()util.GetParamValue(_context, "@path");

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/get/game-id/profile-id/path";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileContent> objs = api.GetGameProfileContentListGameIdProfileIdPath(
                _game_id
                , _profile_id
                , _path
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentListGameIdProfileIdPathVersion() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _path = ()util.GetParamValue(_context, "@path");
             _version = ()util.GetParamValue(_context, "@version");

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/get/game-id/profile-id/path/version";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileContent> objs = api.GetGameProfileContentListGameIdProfileIdPathVersion(
                _game_id
                , _profile_id
                , _path
                , _version
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentListGameIdProfileIdPathVersionPlatformIncrement() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _path = ()util.GetParamValue(_context, "@path");
             _version = ()util.GetParamValue(_context, "@version");
             _platform = ()util.GetParamValue(_context, "@platform");
             _increment = ()util.GetParamValue(_context, "@increment");

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/get/game-id/profile-id/path/version/platform/increment";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileContent> objs = api.GetGameProfileContentListGameIdProfileIdPathVersionPlatformIncrement(
                _game_id
                , _profile_id
                , _path
                , _version
                , _platform
                , _increment
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentListGameIdUsernamePath() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _username = ()util.GetParamValue(_context, "@username");
             _path = ()util.GetParamValue(_context, "@path");

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/get/game-id/username/path";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileContent> objs = api.GetGameProfileContentListGameIdUsernamePath(
                _game_id
                , _username
                , _path
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentListGameIdUsernamePathVersion() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _username = ()util.GetParamValue(_context, "@username");
             _path = ()util.GetParamValue(_context, "@path");
             _version = ()util.GetParamValue(_context, "@version");

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/get/game-id/username/path/version";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileContent> objs = api.GetGameProfileContentListGameIdUsernamePathVersion(
                _game_id
                , _username
                , _path
                , _version
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileContentListGameIdUsernamePathVersionPlatformIncrement() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _username = ()util.GetParamValue(_context, "@username");
             _path = ()util.GetParamValue(_context, "@path");
             _version = ()util.GetParamValue(_context, "@version");
             _platform = ()util.GetParamValue(_context, "@platform");
             _increment = ()util.GetParamValue(_context, "@increment");

            ResponseGameProfileContentList wrapper = new ResponseGameProfileContentList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-content/get/game-id/username/path/version/platform/increment";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileContent> objs = api.GetGameProfileContentListGameIdUsernamePathVersionPlatformIncrement(
                _game_id
                , _username
                , _path
                , _version
                , _platform
                , _increment
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameApp() {
        

            ResponseGameAppInt wrapper = new ResponseGameAppInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-app/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameApp(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAppUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameAppInt wrapper = new ResponseGameAppInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-app/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameAppUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAppGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameAppInt wrapper = new ResponseGameAppInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-app/count/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameAppGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAppAppId() {
        
             _app_id = ()util.GetParamValue(_context, "@app_id");

            ResponseGameAppInt wrapper = new ResponseGameAppInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-app/count/app-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameAppAppId(
                _app_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAppGameIdAppId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _app_id = ()util.GetParamValue(_context, "@app_id");

            ResponseGameAppInt wrapper = new ResponseGameAppInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-app/count/game-id/app-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameAppGameIdAppId(
                _game_id
                , _app_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameAppListFilter()  {
        
            ResponseGameAppList wrapper = new ResponseGameAppList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-app/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameAppResult result = api.BrowseGameAppListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameAppUuid()  {
        
            ResponseGameAppBool wrapper = new ResponseGameAppBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-app/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameApp obj = new GameApp();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _app_id = util.GetParamValue(_context, "@app_id");
            if(!String.IsNoneOrEmpty(_app_id))
                obj.app_id = ()_app_id;
            
            
            // get data
            wrapper.data = api.SetGameAppUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameAppUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameAppBool wrapper = new ResponseGameAppBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-app/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameAppUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAppList() {
        

            ResponseGameAppList wrapper = new ResponseGameAppList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-app/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameApp> objs = api.GetGameAppList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAppListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameAppList wrapper = new ResponseGameAppList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-app/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameApp> objs = api.GetGameAppListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAppListGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameAppList wrapper = new ResponseGameAppList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-app/get/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameApp> objs = api.GetGameAppListGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAppListAppId() {
        
             _app_id = ()util.GetParamValue(_context, "@app_id");

            ResponseGameAppList wrapper = new ResponseGameAppList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-app/get/app-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameApp> objs = api.GetGameAppListAppId(
                _app_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAppListGameIdAppId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _app_id = ()util.GetParamValue(_context, "@app_id");

            ResponseGameAppList wrapper = new ResponseGameAppList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-app/get/game-id/app-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameApp> objs = api.GetGameAppListGameIdAppId(
                _game_id
                , _app_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameLocation() {
        

            ResponseProfileGameLocationInt wrapper = new ResponseProfileGameLocationInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-location/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGameLocation(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameLocationUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseProfileGameLocationInt wrapper = new ResponseProfileGameLocationInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-location/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGameLocationUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameLocationGameLocationId() {
        
             _game_location_id = ()util.GetParamValue(_context, "@game_location_id");

            ResponseProfileGameLocationInt wrapper = new ResponseProfileGameLocationInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-location/count/game-location-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGameLocationGameLocationId(
                _game_location_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameLocationProfileId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseProfileGameLocationInt wrapper = new ResponseProfileGameLocationInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-location/count/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGameLocationProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountProfileGameLocationProfileIdGameLocationId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_location_id = ()util.GetParamValue(_context, "@game_location_id");

            ResponseProfileGameLocationInt wrapper = new ResponseProfileGameLocationInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-location/count/profile-id/game-location-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountProfileGameLocationProfileIdGameLocationId(
                _profile_id
                , _game_location_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseProfileGameLocationListFilter()  {
        
            ResponseProfileGameLocationList wrapper = new ResponseProfileGameLocationList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-location/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            ProfileGameLocationResult result = api.BrowseProfileGameLocationListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetProfileGameLocationUuid()  {
        
            ResponseProfileGameLocationBool wrapper = new ResponseProfileGameLocationBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-location/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            ProfileGameLocation obj = new ProfileGameLocation();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _game_location_id = util.GetParamValue(_context, "@game_location_id");
            if(!String.IsNoneOrEmpty(_game_location_id))
                obj.game_location_id = ()_game_location_id;
            
            string _type_id = util.GetParamValue(_context, "@type_id");
            if(!String.IsNoneOrEmpty(_type_id))
                obj.type_id = ()_type_id;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetProfileGameLocationUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelProfileGameLocationUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseProfileGameLocationBool wrapper = new ResponseProfileGameLocationBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-location/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelProfileGameLocationUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameLocationList() {
        

            ResponseProfileGameLocationList wrapper = new ResponseProfileGameLocationList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-location/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<ProfileGameLocation> objs = api.GetProfileGameLocationList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameLocationListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseProfileGameLocationList wrapper = new ResponseProfileGameLocationList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-location/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<ProfileGameLocation> objs = api.GetProfileGameLocationListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameLocationListGameLocationId() {
        
             _game_location_id = ()util.GetParamValue(_context, "@game_location_id");

            ResponseProfileGameLocationList wrapper = new ResponseProfileGameLocationList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-location/get/game-location-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<ProfileGameLocation> objs = api.GetProfileGameLocationListGameLocationId(
                _game_location_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameLocationListProfileId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseProfileGameLocationList wrapper = new ResponseProfileGameLocationList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-location/get/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<ProfileGameLocation> objs = api.GetProfileGameLocationListProfileId(
                _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetProfileGameLocationListProfileIdGameLocationId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_location_id = ()util.GetParamValue(_context, "@game_location_id");

            ResponseProfileGameLocationList wrapper = new ResponseProfileGameLocationList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "profile-game-location/get/profile-id/game-location-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<ProfileGameLocation> objs = api.GetProfileGameLocationListProfileIdGameLocationId(
                _profile_id
                , _game_location_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGamePhoto() {
        

            ResponseGamePhotoInt wrapper = new ResponseGamePhotoInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGamePhoto(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGamePhotoUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGamePhotoInt wrapper = new ResponseGamePhotoInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGamePhotoUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGamePhotoExternalId() {
        
             _external_id = ()util.GetParamValue(_context, "@external_id");

            ResponseGamePhotoInt wrapper = new ResponseGamePhotoInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/count/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGamePhotoExternalId(
                _external_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGamePhotoUrl() {
        
             _url = ()util.GetParamValue(_context, "@url");

            ResponseGamePhotoInt wrapper = new ResponseGamePhotoInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/count/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGamePhotoUrl(
                _url
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGamePhotoUrlExternalId() {
        
             _url = ()util.GetParamValue(_context, "@url");
             _external_id = ()util.GetParamValue(_context, "@external_id");

            ResponseGamePhotoInt wrapper = new ResponseGamePhotoInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/count/url/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGamePhotoUrlExternalId(
                _url
                , _external_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGamePhotoUuidExternalId() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");
             _external_id = ()util.GetParamValue(_context, "@external_id");

            ResponseGamePhotoInt wrapper = new ResponseGamePhotoInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/count/uuid/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGamePhotoUuidExternalId(
                _uuid
                , _external_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGamePhotoListFilter()  {
        
            ResponseGamePhotoList wrapper = new ResponseGamePhotoList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GamePhotoResult result = api.BrowseGamePhotoListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGamePhotoUuid()  {
        
            ResponseGamePhotoBool wrapper = new ResponseGamePhotoBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GamePhoto obj = new GamePhoto();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _external_id = util.GetParamValue(_context, "@external_id");
            if(!String.IsNoneOrEmpty(_external_id))
                obj.external_id = ()_external_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGamePhotoUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGamePhotoExternalId()  {
        
            ResponseGamePhotoBool wrapper = new ResponseGamePhotoBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/set/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GamePhoto obj = new GamePhoto();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _external_id = util.GetParamValue(_context, "@external_id");
            if(!String.IsNoneOrEmpty(_external_id))
                obj.external_id = ()_external_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGamePhotoExternalId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGamePhotoUrl()  {
        
            ResponseGamePhotoBool wrapper = new ResponseGamePhotoBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/set/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GamePhoto obj = new GamePhoto();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _external_id = util.GetParamValue(_context, "@external_id");
            if(!String.IsNoneOrEmpty(_external_id))
                obj.external_id = ()_external_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGamePhotoUrl(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGamePhotoUrlExternalId()  {
        
            ResponseGamePhotoBool wrapper = new ResponseGamePhotoBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/set/url/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GamePhoto obj = new GamePhoto();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _external_id = util.GetParamValue(_context, "@external_id");
            if(!String.IsNoneOrEmpty(_external_id))
                obj.external_id = ()_external_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGamePhotoUrlExternalId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGamePhotoUuidExternalId()  {
        
            ResponseGamePhotoBool wrapper = new ResponseGamePhotoBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/set/uuid/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GamePhoto obj = new GamePhoto();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _external_id = util.GetParamValue(_context, "@external_id");
            if(!String.IsNoneOrEmpty(_external_id))
                obj.external_id = ()_external_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGamePhotoUuidExternalId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGamePhotoUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGamePhotoBool wrapper = new ResponseGamePhotoBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGamePhotoUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGamePhotoExternalId() {
        
             _external_id = ()util.GetParamValue(_context, "@external_id");

            ResponseGamePhotoBool wrapper = new ResponseGamePhotoBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/del/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGamePhotoExternalId(
                        
                _external_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGamePhotoUrl() {
        
             _url = ()util.GetParamValue(_context, "@url");

            ResponseGamePhotoBool wrapper = new ResponseGamePhotoBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/del/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGamePhotoUrl(
                        
                _url
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGamePhotoUrlExternalId() {
        
             _url = ()util.GetParamValue(_context, "@url");
             _external_id = ()util.GetParamValue(_context, "@external_id");

            ResponseGamePhotoBool wrapper = new ResponseGamePhotoBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/del/url/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGamePhotoUrlExternalId(
                        
                _url
                , _external_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGamePhotoUuidExternalId() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");
             _external_id = ()util.GetParamValue(_context, "@external_id");

            ResponseGamePhotoBool wrapper = new ResponseGamePhotoBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/del/uuid/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGamePhotoUuidExternalId(
                        
                _uuid
                , _external_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGamePhotoList() {
        

            ResponseGamePhotoList wrapper = new ResponseGamePhotoList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GamePhoto> objs = api.GetGamePhotoList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGamePhotoListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGamePhotoList wrapper = new ResponseGamePhotoList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GamePhoto> objs = api.GetGamePhotoListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGamePhotoListExternalId() {
        
             _external_id = ()util.GetParamValue(_context, "@external_id");

            ResponseGamePhotoList wrapper = new ResponseGamePhotoList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/get/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GamePhoto> objs = api.GetGamePhotoListExternalId(
                _external_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGamePhotoListUrl() {
        
             _url = ()util.GetParamValue(_context, "@url");

            ResponseGamePhotoList wrapper = new ResponseGamePhotoList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/get/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GamePhoto> objs = api.GetGamePhotoListUrl(
                _url
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGamePhotoListUrlExternalId() {
        
             _url = ()util.GetParamValue(_context, "@url");
             _external_id = ()util.GetParamValue(_context, "@external_id");

            ResponseGamePhotoList wrapper = new ResponseGamePhotoList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/get/url/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GamePhoto> objs = api.GetGamePhotoListUrlExternalId(
                _url
                , _external_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGamePhotoListUuidExternalId() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");
             _external_id = ()util.GetParamValue(_context, "@external_id");

            ResponseGamePhotoList wrapper = new ResponseGamePhotoList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-photo/get/uuid/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GamePhoto> objs = api.GetGamePhotoListUuidExternalId(
                _uuid
                , _external_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameVideo() {
        

            ResponseGameVideoInt wrapper = new ResponseGameVideoInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameVideo(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameVideoUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameVideoInt wrapper = new ResponseGameVideoInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameVideoUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameVideoExternalId() {
        
             _external_id = ()util.GetParamValue(_context, "@external_id");

            ResponseGameVideoInt wrapper = new ResponseGameVideoInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/count/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameVideoExternalId(
                _external_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameVideoUrl() {
        
             _url = ()util.GetParamValue(_context, "@url");

            ResponseGameVideoInt wrapper = new ResponseGameVideoInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/count/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameVideoUrl(
                _url
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameVideoUrlExternalId() {
        
             _url = ()util.GetParamValue(_context, "@url");
             _external_id = ()util.GetParamValue(_context, "@external_id");

            ResponseGameVideoInt wrapper = new ResponseGameVideoInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/count/url/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameVideoUrlExternalId(
                _url
                , _external_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameVideoUuidExternalId() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");
             _external_id = ()util.GetParamValue(_context, "@external_id");

            ResponseGameVideoInt wrapper = new ResponseGameVideoInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/count/uuid/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameVideoUuidExternalId(
                _uuid
                , _external_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameVideoListFilter()  {
        
            ResponseGameVideoList wrapper = new ResponseGameVideoList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameVideoResult result = api.BrowseGameVideoListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameVideoUuid()  {
        
            ResponseGameVideoBool wrapper = new ResponseGameVideoBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameVideo obj = new GameVideo();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _external_id = util.GetParamValue(_context, "@external_id");
            if(!String.IsNoneOrEmpty(_external_id))
                obj.external_id = ()_external_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameVideoUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameVideoExternalId()  {
        
            ResponseGameVideoBool wrapper = new ResponseGameVideoBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/set/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameVideo obj = new GameVideo();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _external_id = util.GetParamValue(_context, "@external_id");
            if(!String.IsNoneOrEmpty(_external_id))
                obj.external_id = ()_external_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameVideoExternalId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameVideoUrl()  {
        
            ResponseGameVideoBool wrapper = new ResponseGameVideoBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/set/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameVideo obj = new GameVideo();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _external_id = util.GetParamValue(_context, "@external_id");
            if(!String.IsNoneOrEmpty(_external_id))
                obj.external_id = ()_external_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameVideoUrl(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameVideoUrlExternalId()  {
        
            ResponseGameVideoBool wrapper = new ResponseGameVideoBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/set/url/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameVideo obj = new GameVideo();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _external_id = util.GetParamValue(_context, "@external_id");
            if(!String.IsNoneOrEmpty(_external_id))
                obj.external_id = ()_external_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameVideoUrlExternalId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameVideoUuidExternalId()  {
        
            ResponseGameVideoBool wrapper = new ResponseGameVideoBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/set/uuid/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameVideo obj = new GameVideo();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _external_id = util.GetParamValue(_context, "@external_id");
            if(!String.IsNoneOrEmpty(_external_id))
                obj.external_id = ()_external_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameVideoUuidExternalId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameVideoUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameVideoBool wrapper = new ResponseGameVideoBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameVideoUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameVideoExternalId() {
        
             _external_id = ()util.GetParamValue(_context, "@external_id");

            ResponseGameVideoBool wrapper = new ResponseGameVideoBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/del/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameVideoExternalId(
                        
                _external_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameVideoUrl() {
        
             _url = ()util.GetParamValue(_context, "@url");

            ResponseGameVideoBool wrapper = new ResponseGameVideoBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/del/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameVideoUrl(
                        
                _url
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameVideoUrlExternalId() {
        
             _url = ()util.GetParamValue(_context, "@url");
             _external_id = ()util.GetParamValue(_context, "@external_id");

            ResponseGameVideoBool wrapper = new ResponseGameVideoBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/del/url/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameVideoUrlExternalId(
                        
                _url
                , _external_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameVideoUuidExternalId() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");
             _external_id = ()util.GetParamValue(_context, "@external_id");

            ResponseGameVideoBool wrapper = new ResponseGameVideoBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/del/uuid/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameVideoUuidExternalId(
                        
                _uuid
                , _external_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameVideoList() {
        

            ResponseGameVideoList wrapper = new ResponseGameVideoList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameVideo> objs = api.GetGameVideoList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameVideoListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameVideoList wrapper = new ResponseGameVideoList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameVideo> objs = api.GetGameVideoListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameVideoListExternalId() {
        
             _external_id = ()util.GetParamValue(_context, "@external_id");

            ResponseGameVideoList wrapper = new ResponseGameVideoList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/get/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameVideo> objs = api.GetGameVideoListExternalId(
                _external_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameVideoListUrl() {
        
             _url = ()util.GetParamValue(_context, "@url");

            ResponseGameVideoList wrapper = new ResponseGameVideoList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/get/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameVideo> objs = api.GetGameVideoListUrl(
                _url
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameVideoListUrlExternalId() {
        
             _url = ()util.GetParamValue(_context, "@url");
             _external_id = ()util.GetParamValue(_context, "@external_id");

            ResponseGameVideoList wrapper = new ResponseGameVideoList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/get/url/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameVideo> objs = api.GetGameVideoListUrlExternalId(
                _url
                , _external_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameVideoListUuidExternalId() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");
             _external_id = ()util.GetParamValue(_context, "@external_id");

            ResponseGameVideoList wrapper = new ResponseGameVideoList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-video/get/uuid/external-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameVideo> objs = api.GetGameVideoListUuidExternalId(
                _uuid
                , _external_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItem() {
        

            ResponseGameRpgItemInt wrapper = new ResponseGameRpgItemInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameRpgItem(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameRpgItemInt wrapper = new ResponseGameRpgItemInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameRpgItemUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemInt wrapper = new ResponseGameRpgItemInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/count/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameRpgItemGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemUrl() {
        
             _url = ()util.GetParamValue(_context, "@url");

            ResponseGameRpgItemInt wrapper = new ResponseGameRpgItemInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/count/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameRpgItemUrl(
                _url
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemUrlGameId() {
        
             _url = ()util.GetParamValue(_context, "@url");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemInt wrapper = new ResponseGameRpgItemInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/count/url/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameRpgItemUrlGameId(
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemUuidGameId() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemInt wrapper = new ResponseGameRpgItemInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/count/uuid/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameRpgItemUuidGameId(
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameRpgItemListFilter()  {
        
            ResponseGameRpgItemList wrapper = new ResponseGameRpgItemList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameRpgItemResult result = api.BrowseGameRpgItemListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemUuid()  {
        
            ResponseGameRpgItemBool wrapper = new ResponseGameRpgItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameRpgItem obj = new GameRpgItem();
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _game_defense = util.GetParamValue(_context, "@game_defense");
            if(!String.IsNoneOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _game_attack = util.GetParamValue(_context, "@game_attack");
            if(!String.IsNoneOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _game_health = util.GetParamValue(_context, "@game_health");
            if(!String.IsNoneOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _game_energy = util.GetParamValue(_context, "@game_energy");
            if(!String.IsNoneOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "@game_price");
            if(!String.IsNoneOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "@game_type");
            if(!String.IsNoneOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "@game_skill");
            if(!String.IsNoneOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_data = util.GetParamValue(_context, "@game_data");
            if(!String.IsNoneOrEmpty(_game_data))
                obj.game_data = ()_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemGameId()  {
        
            ResponseGameRpgItemBool wrapper = new ResponseGameRpgItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/set/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameRpgItem obj = new GameRpgItem();
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _game_defense = util.GetParamValue(_context, "@game_defense");
            if(!String.IsNoneOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _game_attack = util.GetParamValue(_context, "@game_attack");
            if(!String.IsNoneOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _game_health = util.GetParamValue(_context, "@game_health");
            if(!String.IsNoneOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _game_energy = util.GetParamValue(_context, "@game_energy");
            if(!String.IsNoneOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "@game_price");
            if(!String.IsNoneOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "@game_type");
            if(!String.IsNoneOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "@game_skill");
            if(!String.IsNoneOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_data = util.GetParamValue(_context, "@game_data");
            if(!String.IsNoneOrEmpty(_game_data))
                obj.game_data = ()_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemUrl()  {
        
            ResponseGameRpgItemBool wrapper = new ResponseGameRpgItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/set/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameRpgItem obj = new GameRpgItem();
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _game_defense = util.GetParamValue(_context, "@game_defense");
            if(!String.IsNoneOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _game_attack = util.GetParamValue(_context, "@game_attack");
            if(!String.IsNoneOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _game_health = util.GetParamValue(_context, "@game_health");
            if(!String.IsNoneOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _game_energy = util.GetParamValue(_context, "@game_energy");
            if(!String.IsNoneOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "@game_price");
            if(!String.IsNoneOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "@game_type");
            if(!String.IsNoneOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "@game_skill");
            if(!String.IsNoneOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_data = util.GetParamValue(_context, "@game_data");
            if(!String.IsNoneOrEmpty(_game_data))
                obj.game_data = ()_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemUrl(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemUrlGameId()  {
        
            ResponseGameRpgItemBool wrapper = new ResponseGameRpgItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/set/url/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameRpgItem obj = new GameRpgItem();
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _game_defense = util.GetParamValue(_context, "@game_defense");
            if(!String.IsNoneOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _game_attack = util.GetParamValue(_context, "@game_attack");
            if(!String.IsNoneOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _game_health = util.GetParamValue(_context, "@game_health");
            if(!String.IsNoneOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _game_energy = util.GetParamValue(_context, "@game_energy");
            if(!String.IsNoneOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "@game_price");
            if(!String.IsNoneOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "@game_type");
            if(!String.IsNoneOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "@game_skill");
            if(!String.IsNoneOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_data = util.GetParamValue(_context, "@game_data");
            if(!String.IsNoneOrEmpty(_game_data))
                obj.game_data = ()_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemUrlGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemUuidGameId()  {
        
            ResponseGameRpgItemBool wrapper = new ResponseGameRpgItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/set/uuid/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameRpgItem obj = new GameRpgItem();
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _game_defense = util.GetParamValue(_context, "@game_defense");
            if(!String.IsNoneOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _game_attack = util.GetParamValue(_context, "@game_attack");
            if(!String.IsNoneOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _game_health = util.GetParamValue(_context, "@game_health");
            if(!String.IsNoneOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _game_energy = util.GetParamValue(_context, "@game_energy");
            if(!String.IsNoneOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "@game_price");
            if(!String.IsNoneOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "@game_type");
            if(!String.IsNoneOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "@game_skill");
            if(!String.IsNoneOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_data = util.GetParamValue(_context, "@game_data");
            if(!String.IsNoneOrEmpty(_game_data))
                obj.game_data = ()_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemUuidGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameRpgItemBool wrapper = new ResponseGameRpgItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameRpgItemUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemBool wrapper = new ResponseGameRpgItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/del/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameRpgItemGameId(
                        
                _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemUrl() {
        
             _url = ()util.GetParamValue(_context, "@url");

            ResponseGameRpgItemBool wrapper = new ResponseGameRpgItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/del/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameRpgItemUrl(
                        
                _url
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemUrlGameId() {
        
             _url = ()util.GetParamValue(_context, "@url");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemBool wrapper = new ResponseGameRpgItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/del/url/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameRpgItemUrlGameId(
                        
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemUuidGameId() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemBool wrapper = new ResponseGameRpgItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/del/uuid/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameRpgItemUuidGameId(
                        
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemList() {
        

            ResponseGameRpgItemList wrapper = new ResponseGameRpgItemList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameRpgItem> objs = api.GetGameRpgItemList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameRpgItemList wrapper = new ResponseGameRpgItemList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameRpgItem> objs = api.GetGameRpgItemListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemListGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemList wrapper = new ResponseGameRpgItemList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/get/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameRpgItem> objs = api.GetGameRpgItemListGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemListUrl() {
        
             _url = ()util.GetParamValue(_context, "@url");

            ResponseGameRpgItemList wrapper = new ResponseGameRpgItemList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/get/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameRpgItem> objs = api.GetGameRpgItemListUrl(
                _url
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemListUrlGameId() {
        
             _url = ()util.GetParamValue(_context, "@url");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemList wrapper = new ResponseGameRpgItemList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/get/url/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameRpgItem> objs = api.GetGameRpgItemListUrlGameId(
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemListUuidGameId() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemList wrapper = new ResponseGameRpgItemList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item/get/uuid/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameRpgItem> objs = api.GetGameRpgItemListUuidGameId(
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemWeapon() {
        

            ResponseGameRpgItemWeaponInt wrapper = new ResponseGameRpgItemWeaponInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameRpgItemWeapon(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemWeaponUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameRpgItemWeaponInt wrapper = new ResponseGameRpgItemWeaponInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameRpgItemWeaponUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemWeaponGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemWeaponInt wrapper = new ResponseGameRpgItemWeaponInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/count/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameRpgItemWeaponGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemWeaponUrl() {
        
             _url = ()util.GetParamValue(_context, "@url");

            ResponseGameRpgItemWeaponInt wrapper = new ResponseGameRpgItemWeaponInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/count/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameRpgItemWeaponUrl(
                _url
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemWeaponUrlGameId() {
        
             _url = ()util.GetParamValue(_context, "@url");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemWeaponInt wrapper = new ResponseGameRpgItemWeaponInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/count/url/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameRpgItemWeaponUrlGameId(
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemWeaponUuidGameId() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemWeaponInt wrapper = new ResponseGameRpgItemWeaponInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/count/uuid/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameRpgItemWeaponUuidGameId(
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameRpgItemWeaponListFilter()  {
        
            ResponseGameRpgItemWeaponList wrapper = new ResponseGameRpgItemWeaponList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameRpgItemWeaponResult result = api.BrowseGameRpgItemWeaponListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemWeaponUuid()  {
        
            ResponseGameRpgItemWeaponBool wrapper = new ResponseGameRpgItemWeaponBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameRpgItemWeapon obj = new GameRpgItemWeapon();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _game_defense = util.GetParamValue(_context, "@game_defense");
            if(!String.IsNoneOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _game_attack = util.GetParamValue(_context, "@game_attack");
            if(!String.IsNoneOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "@game_price");
            if(!String.IsNoneOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "@game_type");
            if(!String.IsNoneOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "@game_skill");
            if(!String.IsNoneOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _game_health = util.GetParamValue(_context, "@game_health");
            if(!String.IsNoneOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_energy = util.GetParamValue(_context, "@game_energy");
            if(!String.IsNoneOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _game_data = util.GetParamValue(_context, "@game_data");
            if(!String.IsNoneOrEmpty(_game_data))
                obj.game_data = ()_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemWeaponUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemWeaponGameId()  {
        
            ResponseGameRpgItemWeaponBool wrapper = new ResponseGameRpgItemWeaponBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/set/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameRpgItemWeapon obj = new GameRpgItemWeapon();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _game_defense = util.GetParamValue(_context, "@game_defense");
            if(!String.IsNoneOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _game_attack = util.GetParamValue(_context, "@game_attack");
            if(!String.IsNoneOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "@game_price");
            if(!String.IsNoneOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "@game_type");
            if(!String.IsNoneOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "@game_skill");
            if(!String.IsNoneOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _game_health = util.GetParamValue(_context, "@game_health");
            if(!String.IsNoneOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_energy = util.GetParamValue(_context, "@game_energy");
            if(!String.IsNoneOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _game_data = util.GetParamValue(_context, "@game_data");
            if(!String.IsNoneOrEmpty(_game_data))
                obj.game_data = ()_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemWeaponGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemWeaponUrl()  {
        
            ResponseGameRpgItemWeaponBool wrapper = new ResponseGameRpgItemWeaponBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/set/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameRpgItemWeapon obj = new GameRpgItemWeapon();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _game_defense = util.GetParamValue(_context, "@game_defense");
            if(!String.IsNoneOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _game_attack = util.GetParamValue(_context, "@game_attack");
            if(!String.IsNoneOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "@game_price");
            if(!String.IsNoneOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "@game_type");
            if(!String.IsNoneOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "@game_skill");
            if(!String.IsNoneOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _game_health = util.GetParamValue(_context, "@game_health");
            if(!String.IsNoneOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_energy = util.GetParamValue(_context, "@game_energy");
            if(!String.IsNoneOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _game_data = util.GetParamValue(_context, "@game_data");
            if(!String.IsNoneOrEmpty(_game_data))
                obj.game_data = ()_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemWeaponUrl(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemWeaponUrlGameId()  {
        
            ResponseGameRpgItemWeaponBool wrapper = new ResponseGameRpgItemWeaponBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/set/url/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameRpgItemWeapon obj = new GameRpgItemWeapon();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _game_defense = util.GetParamValue(_context, "@game_defense");
            if(!String.IsNoneOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _game_attack = util.GetParamValue(_context, "@game_attack");
            if(!String.IsNoneOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "@game_price");
            if(!String.IsNoneOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "@game_type");
            if(!String.IsNoneOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "@game_skill");
            if(!String.IsNoneOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _game_health = util.GetParamValue(_context, "@game_health");
            if(!String.IsNoneOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_energy = util.GetParamValue(_context, "@game_energy");
            if(!String.IsNoneOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _game_data = util.GetParamValue(_context, "@game_data");
            if(!String.IsNoneOrEmpty(_game_data))
                obj.game_data = ()_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemWeaponUrlGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemWeaponUuidGameId()  {
        
            ResponseGameRpgItemWeaponBool wrapper = new ResponseGameRpgItemWeaponBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/set/uuid/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameRpgItemWeapon obj = new GameRpgItemWeapon();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _game_defense = util.GetParamValue(_context, "@game_defense");
            if(!String.IsNoneOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _game_attack = util.GetParamValue(_context, "@game_attack");
            if(!String.IsNoneOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "@game_price");
            if(!String.IsNoneOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "@game_type");
            if(!String.IsNoneOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "@game_skill");
            if(!String.IsNoneOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _game_health = util.GetParamValue(_context, "@game_health");
            if(!String.IsNoneOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_energy = util.GetParamValue(_context, "@game_energy");
            if(!String.IsNoneOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _game_data = util.GetParamValue(_context, "@game_data");
            if(!String.IsNoneOrEmpty(_game_data))
                obj.game_data = ()_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemWeaponUuidGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemWeaponUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameRpgItemWeaponBool wrapper = new ResponseGameRpgItemWeaponBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameRpgItemWeaponUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemWeaponGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemWeaponBool wrapper = new ResponseGameRpgItemWeaponBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/del/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameRpgItemWeaponGameId(
                        
                _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemWeaponUrl() {
        
             _url = ()util.GetParamValue(_context, "@url");

            ResponseGameRpgItemWeaponBool wrapper = new ResponseGameRpgItemWeaponBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/del/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameRpgItemWeaponUrl(
                        
                _url
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemWeaponUrlGameId() {
        
             _url = ()util.GetParamValue(_context, "@url");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemWeaponBool wrapper = new ResponseGameRpgItemWeaponBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/del/url/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameRpgItemWeaponUrlGameId(
                        
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemWeaponUuidGameId() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemWeaponBool wrapper = new ResponseGameRpgItemWeaponBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/del/uuid/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameRpgItemWeaponUuidGameId(
                        
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemWeaponList() {
        

            ResponseGameRpgItemWeaponList wrapper = new ResponseGameRpgItemWeaponList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameRpgItemWeapon> objs = api.GetGameRpgItemWeaponList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemWeaponListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameRpgItemWeaponList wrapper = new ResponseGameRpgItemWeaponList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameRpgItemWeapon> objs = api.GetGameRpgItemWeaponListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemWeaponListGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemWeaponList wrapper = new ResponseGameRpgItemWeaponList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/get/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameRpgItemWeapon> objs = api.GetGameRpgItemWeaponListGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemWeaponListUrl() {
        
             _url = ()util.GetParamValue(_context, "@url");

            ResponseGameRpgItemWeaponList wrapper = new ResponseGameRpgItemWeaponList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/get/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameRpgItemWeapon> objs = api.GetGameRpgItemWeaponListUrl(
                _url
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemWeaponListUrlGameId() {
        
             _url = ()util.GetParamValue(_context, "@url");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemWeaponList wrapper = new ResponseGameRpgItemWeaponList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/get/url/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameRpgItemWeapon> objs = api.GetGameRpgItemWeaponListUrlGameId(
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemWeaponListUuidGameId() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemWeaponList wrapper = new ResponseGameRpgItemWeaponList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-weapon/get/uuid/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameRpgItemWeapon> objs = api.GetGameRpgItemWeaponListUuidGameId(
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemSkill() {
        

            ResponseGameRpgItemSkillInt wrapper = new ResponseGameRpgItemSkillInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameRpgItemSkill(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemSkillUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameRpgItemSkillInt wrapper = new ResponseGameRpgItemSkillInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameRpgItemSkillUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemSkillGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemSkillInt wrapper = new ResponseGameRpgItemSkillInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/count/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameRpgItemSkillGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemSkillUrl() {
        
             _url = ()util.GetParamValue(_context, "@url");

            ResponseGameRpgItemSkillInt wrapper = new ResponseGameRpgItemSkillInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/count/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameRpgItemSkillUrl(
                _url
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemSkillUrlGameId() {
        
             _url = ()util.GetParamValue(_context, "@url");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemSkillInt wrapper = new ResponseGameRpgItemSkillInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/count/url/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameRpgItemSkillUrlGameId(
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameRpgItemSkillUuidGameId() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemSkillInt wrapper = new ResponseGameRpgItemSkillInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/count/uuid/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameRpgItemSkillUuidGameId(
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameRpgItemSkillListFilter()  {
        
            ResponseGameRpgItemSkillList wrapper = new ResponseGameRpgItemSkillList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameRpgItemSkillResult result = api.BrowseGameRpgItemSkillListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemSkillUuid()  {
        
            ResponseGameRpgItemSkillBool wrapper = new ResponseGameRpgItemSkillBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameRpgItemSkill obj = new GameRpgItemSkill();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _game_defense = util.GetParamValue(_context, "@game_defense");
            if(!String.IsNoneOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _game_attack = util.GetParamValue(_context, "@game_attack");
            if(!String.IsNoneOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "@game_price");
            if(!String.IsNoneOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "@game_type");
            if(!String.IsNoneOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "@game_skill");
            if(!String.IsNoneOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _game_health = util.GetParamValue(_context, "@game_health");
            if(!String.IsNoneOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_energy = util.GetParamValue(_context, "@game_energy");
            if(!String.IsNoneOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _game_data = util.GetParamValue(_context, "@game_data");
            if(!String.IsNoneOrEmpty(_game_data))
                obj.game_data = ()_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemSkillUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemSkillGameId()  {
        
            ResponseGameRpgItemSkillBool wrapper = new ResponseGameRpgItemSkillBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/set/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameRpgItemSkill obj = new GameRpgItemSkill();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _game_defense = util.GetParamValue(_context, "@game_defense");
            if(!String.IsNoneOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _game_attack = util.GetParamValue(_context, "@game_attack");
            if(!String.IsNoneOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "@game_price");
            if(!String.IsNoneOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "@game_type");
            if(!String.IsNoneOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "@game_skill");
            if(!String.IsNoneOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _game_health = util.GetParamValue(_context, "@game_health");
            if(!String.IsNoneOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_energy = util.GetParamValue(_context, "@game_energy");
            if(!String.IsNoneOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _game_data = util.GetParamValue(_context, "@game_data");
            if(!String.IsNoneOrEmpty(_game_data))
                obj.game_data = ()_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemSkillGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemSkillUrl()  {
        
            ResponseGameRpgItemSkillBool wrapper = new ResponseGameRpgItemSkillBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/set/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameRpgItemSkill obj = new GameRpgItemSkill();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _game_defense = util.GetParamValue(_context, "@game_defense");
            if(!String.IsNoneOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _game_attack = util.GetParamValue(_context, "@game_attack");
            if(!String.IsNoneOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "@game_price");
            if(!String.IsNoneOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "@game_type");
            if(!String.IsNoneOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "@game_skill");
            if(!String.IsNoneOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _game_health = util.GetParamValue(_context, "@game_health");
            if(!String.IsNoneOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_energy = util.GetParamValue(_context, "@game_energy");
            if(!String.IsNoneOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _game_data = util.GetParamValue(_context, "@game_data");
            if(!String.IsNoneOrEmpty(_game_data))
                obj.game_data = ()_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemSkillUrl(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemSkillUrlGameId()  {
        
            ResponseGameRpgItemSkillBool wrapper = new ResponseGameRpgItemSkillBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/set/url/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameRpgItemSkill obj = new GameRpgItemSkill();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _game_defense = util.GetParamValue(_context, "@game_defense");
            if(!String.IsNoneOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _game_attack = util.GetParamValue(_context, "@game_attack");
            if(!String.IsNoneOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "@game_price");
            if(!String.IsNoneOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "@game_type");
            if(!String.IsNoneOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "@game_skill");
            if(!String.IsNoneOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _game_health = util.GetParamValue(_context, "@game_health");
            if(!String.IsNoneOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_energy = util.GetParamValue(_context, "@game_energy");
            if(!String.IsNoneOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _game_data = util.GetParamValue(_context, "@game_data");
            if(!String.IsNoneOrEmpty(_game_data))
                obj.game_data = ()_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemSkillUrlGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameRpgItemSkillUuidGameId()  {
        
            ResponseGameRpgItemSkillBool wrapper = new ResponseGameRpgItemSkillBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/set/uuid/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameRpgItemSkill obj = new GameRpgItemSkill();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _third_party_oembed = util.GetParamValue(_context, "@third_party_oembed");
            if(!String.IsNoneOrEmpty(_third_party_oembed))
                obj.third_party_oembed = ()_third_party_oembed;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            string _game_defense = util.GetParamValue(_context, "@game_defense");
            if(!String.IsNoneOrEmpty(_game_defense))
                obj.game_defense = float.Parse(_game_defense);
            
            string _third_party_url = util.GetParamValue(_context, "@third_party_url");
            if(!String.IsNoneOrEmpty(_third_party_url))
                obj.third_party_url = ()_third_party_url;
            
            string _third_party_id = util.GetParamValue(_context, "@third_party_id");
            if(!String.IsNoneOrEmpty(_third_party_id))
                obj.third_party_id = ()_third_party_id;
            
            string _content_type = util.GetParamValue(_context, "@content_type");
            if(!String.IsNoneOrEmpty(_content_type))
                obj.content_type = ()_content_type;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _game_attack = util.GetParamValue(_context, "@game_attack");
            if(!String.IsNoneOrEmpty(_game_attack))
                obj.game_attack = float.Parse(_game_attack);
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _third_party_data = util.GetParamValue(_context, "@third_party_data");
            if(!String.IsNoneOrEmpty(_third_party_data))
                obj.third_party_data = ()_third_party_data;
            
            string _game_price = util.GetParamValue(_context, "@game_price");
            if(!String.IsNoneOrEmpty(_game_price))
                obj.game_price = float.Parse(_game_price);
            
            string _game_type = util.GetParamValue(_context, "@game_type");
            if(!String.IsNoneOrEmpty(_game_type))
                obj.game_type = float.Parse(_game_type);
            
            string _game_skill = util.GetParamValue(_context, "@game_skill");
            if(!String.IsNoneOrEmpty(_game_skill))
                obj.game_skill = float.Parse(_game_skill);
            
            string _game_health = util.GetParamValue(_context, "@game_health");
            if(!String.IsNoneOrEmpty(_game_health))
                obj.game_health = float.Parse(_game_health);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_energy = util.GetParamValue(_context, "@game_energy");
            if(!String.IsNoneOrEmpty(_game_energy))
                obj.game_energy = float.Parse(_game_energy);
            
            string _game_data = util.GetParamValue(_context, "@game_data");
            if(!String.IsNoneOrEmpty(_game_data))
                obj.game_data = ()_game_data;
            
            
            // get data
            wrapper.data = api.SetGameRpgItemSkillUuidGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemSkillUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameRpgItemSkillBool wrapper = new ResponseGameRpgItemSkillBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameRpgItemSkillUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemSkillGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemSkillBool wrapper = new ResponseGameRpgItemSkillBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/del/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameRpgItemSkillGameId(
                        
                _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemSkillUrl() {
        
             _url = ()util.GetParamValue(_context, "@url");

            ResponseGameRpgItemSkillBool wrapper = new ResponseGameRpgItemSkillBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/del/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameRpgItemSkillUrl(
                        
                _url
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemSkillUrlGameId() {
        
             _url = ()util.GetParamValue(_context, "@url");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemSkillBool wrapper = new ResponseGameRpgItemSkillBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/del/url/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameRpgItemSkillUrlGameId(
                        
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameRpgItemSkillUuidGameId() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemSkillBool wrapper = new ResponseGameRpgItemSkillBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/del/uuid/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameRpgItemSkillUuidGameId(
                        
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemSkillList() {
        

            ResponseGameRpgItemSkillList wrapper = new ResponseGameRpgItemSkillList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameRpgItemSkill> objs = api.GetGameRpgItemSkillList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemSkillListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameRpgItemSkillList wrapper = new ResponseGameRpgItemSkillList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameRpgItemSkill> objs = api.GetGameRpgItemSkillListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemSkillListGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemSkillList wrapper = new ResponseGameRpgItemSkillList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/get/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameRpgItemSkill> objs = api.GetGameRpgItemSkillListGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemSkillListUrl() {
        
             _url = ()util.GetParamValue(_context, "@url");

            ResponseGameRpgItemSkillList wrapper = new ResponseGameRpgItemSkillList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/get/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameRpgItemSkill> objs = api.GetGameRpgItemSkillListUrl(
                _url
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemSkillListUrlGameId() {
        
             _url = ()util.GetParamValue(_context, "@url");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemSkillList wrapper = new ResponseGameRpgItemSkillList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/get/url/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameRpgItemSkill> objs = api.GetGameRpgItemSkillListUrlGameId(
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameRpgItemSkillListUuidGameId() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameRpgItemSkillList wrapper = new ResponseGameRpgItemSkillList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-rpg-item-skill/get/uuid/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameRpgItemSkill> objs = api.GetGameRpgItemSkillListUuidGameId(
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProduct() {
        

            ResponseGameProductInt wrapper = new ResponseGameProductInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProduct(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProductUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameProductInt wrapper = new ResponseGameProductInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProductUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProductGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProductInt wrapper = new ResponseGameProductInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/count/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProductGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProductUrl() {
        
             _url = ()util.GetParamValue(_context, "@url");

            ResponseGameProductInt wrapper = new ResponseGameProductInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/count/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProductUrl(
                _url
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProductUrlGameId() {
        
             _url = ()util.GetParamValue(_context, "@url");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProductInt wrapper = new ResponseGameProductInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/count/url/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProductUrlGameId(
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProductUuidGameId() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProductInt wrapper = new ResponseGameProductInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/count/uuid/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProductUuidGameId(
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameProductListFilter()  {
        
            ResponseGameProductList wrapper = new ResponseGameProductList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameProductResult result = api.BrowseGameProductListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProductUuid()  {
        
            ResponseGameProductBool wrapper = new ResponseGameProductBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProduct obj = new GameProduct();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameProductUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProductGameId()  {
        
            ResponseGameProductBool wrapper = new ResponseGameProductBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/set/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProduct obj = new GameProduct();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameProductGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProductUrl()  {
        
            ResponseGameProductBool wrapper = new ResponseGameProductBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/set/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProduct obj = new GameProduct();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameProductUrl(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProductUrlGameId()  {
        
            ResponseGameProductBool wrapper = new ResponseGameProductBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/set/url/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProduct obj = new GameProduct();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameProductUrlGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProductUuidGameId()  {
        
            ResponseGameProductBool wrapper = new ResponseGameProductBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/set/uuid/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProduct obj = new GameProduct();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _url = util.GetParamValue(_context, "@url");
            if(!String.IsNoneOrEmpty(_url))
                obj.url = ()_url;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameProductUuidGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProductUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameProductBool wrapper = new ResponseGameProductBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProductUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProductGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProductBool wrapper = new ResponseGameProductBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/del/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProductGameId(
                        
                _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProductUrl() {
        
             _url = ()util.GetParamValue(_context, "@url");

            ResponseGameProductBool wrapper = new ResponseGameProductBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/del/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProductUrl(
                        
                _url
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProductUrlGameId() {
        
             _url = ()util.GetParamValue(_context, "@url");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProductBool wrapper = new ResponseGameProductBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/del/url/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProductUrlGameId(
                        
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProductUuidGameId() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProductBool wrapper = new ResponseGameProductBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/del/uuid/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProductUuidGameId(
                        
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProductList() {
        

            ResponseGameProductList wrapper = new ResponseGameProductList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProduct> objs = api.GetGameProductList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProductListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameProductList wrapper = new ResponseGameProductList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProduct> objs = api.GetGameProductListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProductListGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProductList wrapper = new ResponseGameProductList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/get/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProduct> objs = api.GetGameProductListGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProductListUrl() {
        
             _url = ()util.GetParamValue(_context, "@url");

            ResponseGameProductList wrapper = new ResponseGameProductList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/get/url";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProduct> objs = api.GetGameProductListUrl(
                _url
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProductListUrlGameId() {
        
             _url = ()util.GetParamValue(_context, "@url");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProductList wrapper = new ResponseGameProductList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/get/url/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProduct> objs = api.GetGameProductListUrlGameId(
                _url
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProductListUuidGameId() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProductList wrapper = new ResponseGameProductList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-product/get/uuid/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProduct> objs = api.GetGameProductListUuidGameId(
                _uuid
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboard() {
        

            ResponseGameStatisticLeaderboardInt wrapper = new ResponseGameStatisticLeaderboardInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboard(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameStatisticLeaderboardInt wrapper = new ResponseGameStatisticLeaderboardInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardInt wrapper = new ResponseGameStatisticLeaderboardInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/count/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameStatisticLeaderboardInt wrapper = new ResponseGameStatisticLeaderboardInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/count/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardInt wrapper = new ResponseGameStatisticLeaderboardInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/count/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardCodeGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardCodeGameIdProfileId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseGameStatisticLeaderboardInt wrapper = new ResponseGameStatisticLeaderboardInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/count/code/game-id/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardCodeGameIdProfileId(
                _code
                , _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardCodeGameIdProfileIdTimestamp() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _timestamp = ()util.GetParamValue(_context, "@timestamp");

            ResponseGameStatisticLeaderboardInt wrapper = new ResponseGameStatisticLeaderboardInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/count/code/game-id/profile-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardCodeGameIdProfileIdTimestamp(
                _code
                , _game_id
                , _profile_id
                , _timestamp
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardInt wrapper = new ResponseGameStatisticLeaderboardInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/count/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardProfileIdGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameStatisticLeaderboardListFilter()  {
        
            ResponseGameStatisticLeaderboardList wrapper = new ResponseGameStatisticLeaderboardList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameStatisticLeaderboardResult result = api.BrowseGameStatisticLeaderboardListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticLeaderboardUuid()  {
        
            ResponseGameStatisticLeaderboardBool wrapper = new ResponseGameStatisticLeaderboardBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameStatisticLeaderboard obj = new GameStatisticLeaderboard();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _rank = util.GetParamValue(_context, "@rank");
            if(!String.IsNoneOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "@rank_change");
            if(!String.IsNoneOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "@rank_total_count");
            if(!String.IsNoneOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "@absolute_value");
            if(!String.IsNoneOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "@network");
            if(!String.IsNoneOrEmpty(_network))
                obj.network = ()_network;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameStatisticLeaderboardUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticLeaderboardUuidProfileIdGameIdTimestamp()  {
        
            ResponseGameStatisticLeaderboardBool wrapper = new ResponseGameStatisticLeaderboardBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/set/uuid/profile-id/game-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameStatisticLeaderboard obj = new GameStatisticLeaderboard();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _rank = util.GetParamValue(_context, "@rank");
            if(!String.IsNoneOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "@rank_change");
            if(!String.IsNoneOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "@rank_total_count");
            if(!String.IsNoneOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "@absolute_value");
            if(!String.IsNoneOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "@network");
            if(!String.IsNoneOrEmpty(_network))
                obj.network = ()_network;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameStatisticLeaderboardUuidProfileIdGameIdTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticLeaderboardCode()  {
        
            ResponseGameStatisticLeaderboardBool wrapper = new ResponseGameStatisticLeaderboardBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/set/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameStatisticLeaderboard obj = new GameStatisticLeaderboard();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _rank = util.GetParamValue(_context, "@rank");
            if(!String.IsNoneOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "@rank_change");
            if(!String.IsNoneOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "@rank_total_count");
            if(!String.IsNoneOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "@absolute_value");
            if(!String.IsNoneOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "@network");
            if(!String.IsNoneOrEmpty(_network))
                obj.network = ()_network;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameStatisticLeaderboardCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticLeaderboardCodeGameId()  {
        
            ResponseGameStatisticLeaderboardBool wrapper = new ResponseGameStatisticLeaderboardBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/set/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameStatisticLeaderboard obj = new GameStatisticLeaderboard();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _rank = util.GetParamValue(_context, "@rank");
            if(!String.IsNoneOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "@rank_change");
            if(!String.IsNoneOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "@rank_total_count");
            if(!String.IsNoneOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "@absolute_value");
            if(!String.IsNoneOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "@network");
            if(!String.IsNoneOrEmpty(_network))
                obj.network = ()_network;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameStatisticLeaderboardCodeGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticLeaderboardCodeGameIdProfileId()  {
        
            ResponseGameStatisticLeaderboardBool wrapper = new ResponseGameStatisticLeaderboardBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/set/code/game-id/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameStatisticLeaderboard obj = new GameStatisticLeaderboard();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _rank = util.GetParamValue(_context, "@rank");
            if(!String.IsNoneOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "@rank_change");
            if(!String.IsNoneOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "@rank_total_count");
            if(!String.IsNoneOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "@absolute_value");
            if(!String.IsNoneOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "@network");
            if(!String.IsNoneOrEmpty(_network))
                obj.network = ()_network;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameStatisticLeaderboardCodeGameIdProfileId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticLeaderboardCodeGameIdProfileIdTimestamp()  {
        
            ResponseGameStatisticLeaderboardBool wrapper = new ResponseGameStatisticLeaderboardBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/set/code/game-id/profile-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameStatisticLeaderboard obj = new GameStatisticLeaderboard();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _rank = util.GetParamValue(_context, "@rank");
            if(!String.IsNoneOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "@rank_change");
            if(!String.IsNoneOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "@rank_total_count");
            if(!String.IsNoneOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "@absolute_value");
            if(!String.IsNoneOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "@network");
            if(!String.IsNoneOrEmpty(_network))
                obj.network = ()_network;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameStatisticLeaderboardCodeGameIdProfileIdTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticLeaderboardUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameStatisticLeaderboardBool wrapper = new ResponseGameStatisticLeaderboardBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameStatisticLeaderboardUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticLeaderboardCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameStatisticLeaderboardBool wrapper = new ResponseGameStatisticLeaderboardBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/del/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameStatisticLeaderboardCode(
                        
                _code
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticLeaderboardCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardBool wrapper = new ResponseGameStatisticLeaderboardBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/del/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameStatisticLeaderboardCodeGameId(
                        
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticLeaderboardCodeGameIdProfileId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseGameStatisticLeaderboardBool wrapper = new ResponseGameStatisticLeaderboardBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/del/code/game-id/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameStatisticLeaderboardCodeGameIdProfileId(
                        
                _code
                , _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticLeaderboardCodeGameIdProfileIdTimestamp() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _timestamp = ()util.GetParamValue(_context, "@timestamp");

            ResponseGameStatisticLeaderboardBool wrapper = new ResponseGameStatisticLeaderboardBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/del/code/game-id/profile-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameStatisticLeaderboardCodeGameIdProfileIdTimestamp(
                        
                _code
                , _game_id
                , _profile_id
                , _timestamp
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticLeaderboardProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardBool wrapper = new ResponseGameStatisticLeaderboardBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/del/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameStatisticLeaderboardProfileIdGameId(
                        
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardList() {
        

            ResponseGameStatisticLeaderboardList wrapper = new ResponseGameStatisticLeaderboardList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboard> objs = api.GetGameStatisticLeaderboardList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameStatisticLeaderboardList wrapper = new ResponseGameStatisticLeaderboardList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboard> objs = api.GetGameStatisticLeaderboardListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardListGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardList wrapper = new ResponseGameStatisticLeaderboardList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/get/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboard> objs = api.GetGameStatisticLeaderboardListGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardListCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameStatisticLeaderboardList wrapper = new ResponseGameStatisticLeaderboardList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/get/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboard> objs = api.GetGameStatisticLeaderboardListCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardListCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardList wrapper = new ResponseGameStatisticLeaderboardList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/get/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboard> objs = api.GetGameStatisticLeaderboardListCodeGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardListCodeGameIdProfileId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseGameStatisticLeaderboardList wrapper = new ResponseGameStatisticLeaderboardList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/get/code/game-id/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboard> objs = api.GetGameStatisticLeaderboardListCodeGameIdProfileId(
                _code
                , _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardListCodeGameIdProfileIdTimestamp() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _timestamp = ()util.GetParamValue(_context, "@timestamp");

            ResponseGameStatisticLeaderboardList wrapper = new ResponseGameStatisticLeaderboardList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/get/code/game-id/profile-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboard> objs = api.GetGameStatisticLeaderboardListCodeGameIdProfileIdTimestamp(
                _code
                , _game_id
                , _profile_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardListProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardList wrapper = new ResponseGameStatisticLeaderboardList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/get/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboard> objs = api.GetGameStatisticLeaderboardListProfileIdGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardListProfileIdGameIdTimestamp() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _timestamp = ()util.GetParamValue(_context, "@timestamp");

            ResponseGameStatisticLeaderboardList wrapper = new ResponseGameStatisticLeaderboardList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard/get/profile-id/game-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboard> objs = api.GetGameStatisticLeaderboardListProfileIdGameIdTimestamp(
                _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardItem() {
        

            ResponseGameStatisticLeaderboardItemInt wrapper = new ResponseGameStatisticLeaderboardItemInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardItem(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardItemUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameStatisticLeaderboardItemInt wrapper = new ResponseGameStatisticLeaderboardItemInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardItemUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardItemGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardItemInt wrapper = new ResponseGameStatisticLeaderboardItemInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/count/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardItemGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardItemCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameStatisticLeaderboardItemInt wrapper = new ResponseGameStatisticLeaderboardItemInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/count/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardItemCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardItemCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardItemInt wrapper = new ResponseGameStatisticLeaderboardItemInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/count/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardItemCodeGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardItemCodeGameIdProfileId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseGameStatisticLeaderboardItemInt wrapper = new ResponseGameStatisticLeaderboardItemInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/count/code/game-id/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardItemCodeGameIdProfileId(
                _code
                , _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardItemCodeGameIdProfileIdTimestamp() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _timestamp = ()util.GetParamValue(_context, "@timestamp");

            ResponseGameStatisticLeaderboardItemInt wrapper = new ResponseGameStatisticLeaderboardItemInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/count/code/game-id/profile-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardItemCodeGameIdProfileIdTimestamp(
                _code
                , _game_id
                , _profile_id
                , _timestamp
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardItemProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardItemInt wrapper = new ResponseGameStatisticLeaderboardItemInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/count/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardItemProfileIdGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameStatisticLeaderboardItemListFilter()  {
        
            ResponseGameStatisticLeaderboardItemList wrapper = new ResponseGameStatisticLeaderboardItemList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameStatisticLeaderboardItemResult result = api.BrowseGameStatisticLeaderboardItemListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticLeaderboardItemUuid()  {
        
            ResponseGameStatisticLeaderboardItemBool wrapper = new ResponseGameStatisticLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameStatisticLeaderboardItem obj = new GameStatisticLeaderboardItem();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _rank = util.GetParamValue(_context, "@rank");
            if(!String.IsNoneOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "@rank_change");
            if(!String.IsNoneOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "@rank_total_count");
            if(!String.IsNoneOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "@absolute_value");
            if(!String.IsNoneOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "@network");
            if(!String.IsNoneOrEmpty(_network))
                obj.network = ()_network;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameStatisticLeaderboardItemUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticLeaderboardItemUuidProfileIdGameIdTimestamp()  {
        
            ResponseGameStatisticLeaderboardItemBool wrapper = new ResponseGameStatisticLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/set/uuid/profile-id/game-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameStatisticLeaderboardItem obj = new GameStatisticLeaderboardItem();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _rank = util.GetParamValue(_context, "@rank");
            if(!String.IsNoneOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "@rank_change");
            if(!String.IsNoneOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "@rank_total_count");
            if(!String.IsNoneOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "@absolute_value");
            if(!String.IsNoneOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "@network");
            if(!String.IsNoneOrEmpty(_network))
                obj.network = ()_network;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameStatisticLeaderboardItemUuidProfileIdGameIdTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticLeaderboardItemCode()  {
        
            ResponseGameStatisticLeaderboardItemBool wrapper = new ResponseGameStatisticLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/set/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameStatisticLeaderboardItem obj = new GameStatisticLeaderboardItem();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _rank = util.GetParamValue(_context, "@rank");
            if(!String.IsNoneOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "@rank_change");
            if(!String.IsNoneOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "@rank_total_count");
            if(!String.IsNoneOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "@absolute_value");
            if(!String.IsNoneOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "@network");
            if(!String.IsNoneOrEmpty(_network))
                obj.network = ()_network;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameStatisticLeaderboardItemCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticLeaderboardItemCodeGameId()  {
        
            ResponseGameStatisticLeaderboardItemBool wrapper = new ResponseGameStatisticLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/set/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameStatisticLeaderboardItem obj = new GameStatisticLeaderboardItem();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _rank = util.GetParamValue(_context, "@rank");
            if(!String.IsNoneOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "@rank_change");
            if(!String.IsNoneOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "@rank_total_count");
            if(!String.IsNoneOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "@absolute_value");
            if(!String.IsNoneOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "@network");
            if(!String.IsNoneOrEmpty(_network))
                obj.network = ()_network;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameStatisticLeaderboardItemCodeGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticLeaderboardItemCodeGameIdProfileId()  {
        
            ResponseGameStatisticLeaderboardItemBool wrapper = new ResponseGameStatisticLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/set/code/game-id/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameStatisticLeaderboardItem obj = new GameStatisticLeaderboardItem();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _rank = util.GetParamValue(_context, "@rank");
            if(!String.IsNoneOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "@rank_change");
            if(!String.IsNoneOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "@rank_total_count");
            if(!String.IsNoneOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "@absolute_value");
            if(!String.IsNoneOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "@network");
            if(!String.IsNoneOrEmpty(_network))
                obj.network = ()_network;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameStatisticLeaderboardItemCodeGameIdProfileId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticLeaderboardItemCodeGameIdProfileIdTimestamp()  {
        
            ResponseGameStatisticLeaderboardItemBool wrapper = new ResponseGameStatisticLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/set/code/game-id/profile-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameStatisticLeaderboardItem obj = new GameStatisticLeaderboardItem();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _rank = util.GetParamValue(_context, "@rank");
            if(!String.IsNoneOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "@rank_change");
            if(!String.IsNoneOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "@rank_total_count");
            if(!String.IsNoneOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "@absolute_value");
            if(!String.IsNoneOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "@network");
            if(!String.IsNoneOrEmpty(_network))
                obj.network = ()_network;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameStatisticLeaderboardItemCodeGameIdProfileIdTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticLeaderboardItemUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameStatisticLeaderboardItemBool wrapper = new ResponseGameStatisticLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameStatisticLeaderboardItemUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticLeaderboardItemCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameStatisticLeaderboardItemBool wrapper = new ResponseGameStatisticLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/del/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameStatisticLeaderboardItemCode(
                        
                _code
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticLeaderboardItemCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardItemBool wrapper = new ResponseGameStatisticLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/del/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameStatisticLeaderboardItemCodeGameId(
                        
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticLeaderboardItemCodeGameIdProfileId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseGameStatisticLeaderboardItemBool wrapper = new ResponseGameStatisticLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/del/code/game-id/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameStatisticLeaderboardItemCodeGameIdProfileId(
                        
                _code
                , _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticLeaderboardItemCodeGameIdProfileIdTimestamp() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _timestamp = ()util.GetParamValue(_context, "@timestamp");

            ResponseGameStatisticLeaderboardItemBool wrapper = new ResponseGameStatisticLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/del/code/game-id/profile-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameStatisticLeaderboardItemCodeGameIdProfileIdTimestamp(
                        
                _code
                , _game_id
                , _profile_id
                , _timestamp
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticLeaderboardItemProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardItemBool wrapper = new ResponseGameStatisticLeaderboardItemBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/del/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameStatisticLeaderboardItemProfileIdGameId(
                        
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardItemList() {
        

            ResponseGameStatisticLeaderboardItemList wrapper = new ResponseGameStatisticLeaderboardItemList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboardItem> objs = api.GetGameStatisticLeaderboardItemList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardItemListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameStatisticLeaderboardItemList wrapper = new ResponseGameStatisticLeaderboardItemList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboardItem> objs = api.GetGameStatisticLeaderboardItemListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardItemListGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardItemList wrapper = new ResponseGameStatisticLeaderboardItemList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/get/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboardItem> objs = api.GetGameStatisticLeaderboardItemListGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardItemListCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameStatisticLeaderboardItemList wrapper = new ResponseGameStatisticLeaderboardItemList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/get/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboardItem> objs = api.GetGameStatisticLeaderboardItemListCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardItemListCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardItemList wrapper = new ResponseGameStatisticLeaderboardItemList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/get/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboardItem> objs = api.GetGameStatisticLeaderboardItemListCodeGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardItemListCodeGameIdProfileId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseGameStatisticLeaderboardItemList wrapper = new ResponseGameStatisticLeaderboardItemList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/get/code/game-id/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboardItem> objs = api.GetGameStatisticLeaderboardItemListCodeGameIdProfileId(
                _code
                , _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardItemListCodeGameIdProfileIdTimestamp() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _timestamp = ()util.GetParamValue(_context, "@timestamp");

            ResponseGameStatisticLeaderboardItemList wrapper = new ResponseGameStatisticLeaderboardItemList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/get/code/game-id/profile-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboardItem> objs = api.GetGameStatisticLeaderboardItemListCodeGameIdProfileIdTimestamp(
                _code
                , _game_id
                , _profile_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardItemListProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardItemList wrapper = new ResponseGameStatisticLeaderboardItemList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/get/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboardItem> objs = api.GetGameStatisticLeaderboardItemListProfileIdGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardItemListProfileIdGameIdTimestamp() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _timestamp = ()util.GetParamValue(_context, "@timestamp");

            ResponseGameStatisticLeaderboardItemList wrapper = new ResponseGameStatisticLeaderboardItemList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-item/get/profile-id/game-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboardItem> objs = api.GetGameStatisticLeaderboardItemListProfileIdGameIdTimestamp(
                _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardRollup() {
        

            ResponseGameStatisticLeaderboardRollupInt wrapper = new ResponseGameStatisticLeaderboardRollupInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardRollup(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardRollupUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameStatisticLeaderboardRollupInt wrapper = new ResponseGameStatisticLeaderboardRollupInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardRollupUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardRollupGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardRollupInt wrapper = new ResponseGameStatisticLeaderboardRollupInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/count/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardRollupGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardRollupCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameStatisticLeaderboardRollupInt wrapper = new ResponseGameStatisticLeaderboardRollupInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/count/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardRollupCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardRollupCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardRollupInt wrapper = new ResponseGameStatisticLeaderboardRollupInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/count/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardRollupCodeGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardRollupCodeGameIdProfileId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseGameStatisticLeaderboardRollupInt wrapper = new ResponseGameStatisticLeaderboardRollupInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/count/code/game-id/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardRollupCodeGameIdProfileId(
                _code
                , _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardRollupCodeGameIdProfileIdTimestamp() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _timestamp = ()util.GetParamValue(_context, "@timestamp");

            ResponseGameStatisticLeaderboardRollupInt wrapper = new ResponseGameStatisticLeaderboardRollupInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/count/code/game-id/profile-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardRollupCodeGameIdProfileIdTimestamp(
                _code
                , _game_id
                , _profile_id
                , _timestamp
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticLeaderboardRollupProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardRollupInt wrapper = new ResponseGameStatisticLeaderboardRollupInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/count/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticLeaderboardRollupProfileIdGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameStatisticLeaderboardRollupListFilter()  {
        
            ResponseGameStatisticLeaderboardRollupList wrapper = new ResponseGameStatisticLeaderboardRollupList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameStatisticLeaderboardRollupResult result = api.BrowseGameStatisticLeaderboardRollupListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticLeaderboardRollupUuid()  {
        
            ResponseGameStatisticLeaderboardRollupBool wrapper = new ResponseGameStatisticLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameStatisticLeaderboardRollup obj = new GameStatisticLeaderboardRollup();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _rank = util.GetParamValue(_context, "@rank");
            if(!String.IsNoneOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "@rank_change");
            if(!String.IsNoneOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "@rank_total_count");
            if(!String.IsNoneOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "@absolute_value");
            if(!String.IsNoneOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "@network");
            if(!String.IsNoneOrEmpty(_network))
                obj.network = ()_network;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameStatisticLeaderboardRollupUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticLeaderboardRollupUuidProfileIdGameIdTimestamp()  {
        
            ResponseGameStatisticLeaderboardRollupBool wrapper = new ResponseGameStatisticLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/set/uuid/profile-id/game-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameStatisticLeaderboardRollup obj = new GameStatisticLeaderboardRollup();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _rank = util.GetParamValue(_context, "@rank");
            if(!String.IsNoneOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "@rank_change");
            if(!String.IsNoneOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "@rank_total_count");
            if(!String.IsNoneOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "@absolute_value");
            if(!String.IsNoneOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "@network");
            if(!String.IsNoneOrEmpty(_network))
                obj.network = ()_network;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameStatisticLeaderboardRollupUuidProfileIdGameIdTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticLeaderboardRollupCode()  {
        
            ResponseGameStatisticLeaderboardRollupBool wrapper = new ResponseGameStatisticLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/set/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameStatisticLeaderboardRollup obj = new GameStatisticLeaderboardRollup();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _rank = util.GetParamValue(_context, "@rank");
            if(!String.IsNoneOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "@rank_change");
            if(!String.IsNoneOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "@rank_total_count");
            if(!String.IsNoneOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "@absolute_value");
            if(!String.IsNoneOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "@network");
            if(!String.IsNoneOrEmpty(_network))
                obj.network = ()_network;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameStatisticLeaderboardRollupCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticLeaderboardRollupCodeGameId()  {
        
            ResponseGameStatisticLeaderboardRollupBool wrapper = new ResponseGameStatisticLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/set/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameStatisticLeaderboardRollup obj = new GameStatisticLeaderboardRollup();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _rank = util.GetParamValue(_context, "@rank");
            if(!String.IsNoneOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "@rank_change");
            if(!String.IsNoneOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "@rank_total_count");
            if(!String.IsNoneOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "@absolute_value");
            if(!String.IsNoneOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "@network");
            if(!String.IsNoneOrEmpty(_network))
                obj.network = ()_network;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameStatisticLeaderboardRollupCodeGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticLeaderboardRollupCodeGameIdProfileId()  {
        
            ResponseGameStatisticLeaderboardRollupBool wrapper = new ResponseGameStatisticLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/set/code/game-id/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameStatisticLeaderboardRollup obj = new GameStatisticLeaderboardRollup();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _rank = util.GetParamValue(_context, "@rank");
            if(!String.IsNoneOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "@rank_change");
            if(!String.IsNoneOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "@rank_total_count");
            if(!String.IsNoneOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "@absolute_value");
            if(!String.IsNoneOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "@network");
            if(!String.IsNoneOrEmpty(_network))
                obj.network = ()_network;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameStatisticLeaderboardRollupCodeGameIdProfileId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticLeaderboardRollupCodeGameIdProfileIdTimestamp()  {
        
            ResponseGameStatisticLeaderboardRollupBool wrapper = new ResponseGameStatisticLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/set/code/game-id/profile-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameStatisticLeaderboardRollup obj = new GameStatisticLeaderboardRollup();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _rank = util.GetParamValue(_context, "@rank");
            if(!String.IsNoneOrEmpty(_rank))
                obj.rank = Convert.ToInt32(_rank);
            
            string _rank_change = util.GetParamValue(_context, "@rank_change");
            if(!String.IsNoneOrEmpty(_rank_change))
                obj.rank_change = Convert.ToInt32(_rank_change);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _rank_total_count = util.GetParamValue(_context, "@rank_total_count");
            if(!String.IsNoneOrEmpty(_rank_total_count))
                obj.rank_total_count = Convert.ToInt32(_rank_total_count);
            
            string _absolute_value = util.GetParamValue(_context, "@absolute_value");
            if(!String.IsNoneOrEmpty(_absolute_value))
                obj.absolute_value = float.Parse(_absolute_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _network = util.GetParamValue(_context, "@network");
            if(!String.IsNoneOrEmpty(_network))
                obj.network = ()_network;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameStatisticLeaderboardRollupCodeGameIdProfileIdTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticLeaderboardRollupUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameStatisticLeaderboardRollupBool wrapper = new ResponseGameStatisticLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameStatisticLeaderboardRollupUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticLeaderboardRollupCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameStatisticLeaderboardRollupBool wrapper = new ResponseGameStatisticLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/del/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameStatisticLeaderboardRollupCode(
                        
                _code
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticLeaderboardRollupCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardRollupBool wrapper = new ResponseGameStatisticLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/del/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameStatisticLeaderboardRollupCodeGameId(
                        
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticLeaderboardRollupCodeGameIdProfileId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseGameStatisticLeaderboardRollupBool wrapper = new ResponseGameStatisticLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/del/code/game-id/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameStatisticLeaderboardRollupCodeGameIdProfileId(
                        
                _code
                , _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticLeaderboardRollupCodeGameIdProfileIdTimestamp() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _timestamp = ()util.GetParamValue(_context, "@timestamp");

            ResponseGameStatisticLeaderboardRollupBool wrapper = new ResponseGameStatisticLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/del/code/game-id/profile-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameStatisticLeaderboardRollupCodeGameIdProfileIdTimestamp(
                        
                _code
                , _game_id
                , _profile_id
                , _timestamp
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticLeaderboardRollupProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardRollupBool wrapper = new ResponseGameStatisticLeaderboardRollupBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/del/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameStatisticLeaderboardRollupProfileIdGameId(
                        
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardRollupList() {
        

            ResponseGameStatisticLeaderboardRollupList wrapper = new ResponseGameStatisticLeaderboardRollupList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboardRollup> objs = api.GetGameStatisticLeaderboardRollupList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardRollupListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameStatisticLeaderboardRollupList wrapper = new ResponseGameStatisticLeaderboardRollupList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboardRollup> objs = api.GetGameStatisticLeaderboardRollupListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardRollupListGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardRollupList wrapper = new ResponseGameStatisticLeaderboardRollupList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/get/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboardRollup> objs = api.GetGameStatisticLeaderboardRollupListGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardRollupListCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameStatisticLeaderboardRollupList wrapper = new ResponseGameStatisticLeaderboardRollupList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/get/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboardRollup> objs = api.GetGameStatisticLeaderboardRollupListCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardRollupListCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardRollupList wrapper = new ResponseGameStatisticLeaderboardRollupList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/get/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboardRollup> objs = api.GetGameStatisticLeaderboardRollupListCodeGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardRollupListCodeGameIdProfileId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");

            ResponseGameStatisticLeaderboardRollupList wrapper = new ResponseGameStatisticLeaderboardRollupList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/get/code/game-id/profile-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboardRollup> objs = api.GetGameStatisticLeaderboardRollupListCodeGameIdProfileId(
                _code
                , _game_id
                , _profile_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardRollupListCodeGameIdProfileIdTimestamp() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _timestamp = ()util.GetParamValue(_context, "@timestamp");

            ResponseGameStatisticLeaderboardRollupList wrapper = new ResponseGameStatisticLeaderboardRollupList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/get/code/game-id/profile-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboardRollup> objs = api.GetGameStatisticLeaderboardRollupListCodeGameIdProfileIdTimestamp(
                _code
                , _game_id
                , _profile_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardRollupListProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticLeaderboardRollupList wrapper = new ResponseGameStatisticLeaderboardRollupList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/get/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboardRollup> objs = api.GetGameStatisticLeaderboardRollupListProfileIdGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticLeaderboardRollupListProfileIdGameIdTimestamp() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _timestamp = ()util.GetParamValue(_context, "@timestamp");

            ResponseGameStatisticLeaderboardRollupList wrapper = new ResponseGameStatisticLeaderboardRollupList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-leaderboard-rollup/get/profile-id/game-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticLeaderboardRollup> objs = api.GetGameStatisticLeaderboardRollupListProfileIdGameIdTimestamp(
                _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLiveQueue() {
        

            ResponseGameLiveQueueInt wrapper = new ResponseGameLiveQueueInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-queue/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameLiveQueue(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLiveQueueUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameLiveQueueInt wrapper = new ResponseGameLiveQueueInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-queue/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameLiveQueueUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLiveQueueProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameLiveQueueInt wrapper = new ResponseGameLiveQueueInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-queue/count/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameLiveQueueProfileIdGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameLiveQueueListFilter()  {
        
            ResponseGameLiveQueueList wrapper = new ResponseGameLiveQueueList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-queue/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameLiveQueueResult result = api.BrowseGameLiveQueueListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLiveQueueUuid()  {
        
            ResponseGameLiveQueueBool wrapper = new ResponseGameLiveQueueBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-queue/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameLiveQueue obj = new GameLiveQueue();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _data_stat = util.GetParamValue(_context, "@data_stat");
            if(!String.IsNoneOrEmpty(_data_stat))
                obj.data_stat = ()_data_stat;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _data_ad = util.GetParamValue(_context, "@data_ad");
            if(!String.IsNoneOrEmpty(_data_ad))
                obj.data_ad = ()_data_ad;
            
            
            // get data
            wrapper.data = api.SetGameLiveQueueUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLiveQueueProfileIdGameId()  {
        
            ResponseGameLiveQueueBool wrapper = new ResponseGameLiveQueueBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-queue/set/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameLiveQueue obj = new GameLiveQueue();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _data_stat = util.GetParamValue(_context, "@data_stat");
            if(!String.IsNoneOrEmpty(_data_stat))
                obj.data_stat = ()_data_stat;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _data_ad = util.GetParamValue(_context, "@data_ad");
            if(!String.IsNoneOrEmpty(_data_ad))
                obj.data_ad = ()_data_ad;
            
            
            // get data
            wrapper.data = api.SetGameLiveQueueProfileIdGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLiveQueueUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameLiveQueueBool wrapper = new ResponseGameLiveQueueBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-queue/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameLiveQueueUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLiveQueueProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameLiveQueueBool wrapper = new ResponseGameLiveQueueBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-queue/del/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameLiveQueueProfileIdGameId(
                        
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLiveQueueList() {
        

            ResponseGameLiveQueueList wrapper = new ResponseGameLiveQueueList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-queue/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameLiveQueue> objs = api.GetGameLiveQueueList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLiveQueueListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameLiveQueueList wrapper = new ResponseGameLiveQueueList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-queue/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameLiveQueue> objs = api.GetGameLiveQueueListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLiveQueueListGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameLiveQueueList wrapper = new ResponseGameLiveQueueList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-queue/get/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameLiveQueue> objs = api.GetGameLiveQueueListGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLiveQueueListProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameLiveQueueList wrapper = new ResponseGameLiveQueueList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-queue/get/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameLiveQueue> objs = api.GetGameLiveQueueListProfileIdGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLiveRecentQueue() {
        

            ResponseGameLiveRecentQueueInt wrapper = new ResponseGameLiveRecentQueueInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-recent-queue/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameLiveRecentQueue(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLiveRecentQueueUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameLiveRecentQueueInt wrapper = new ResponseGameLiveRecentQueueInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-recent-queue/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameLiveRecentQueueUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLiveRecentQueueProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameLiveRecentQueueInt wrapper = new ResponseGameLiveRecentQueueInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-recent-queue/count/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameLiveRecentQueueProfileIdGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameLiveRecentQueueListFilter()  {
        
            ResponseGameLiveRecentQueueList wrapper = new ResponseGameLiveRecentQueueList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-recent-queue/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameLiveRecentQueueResult result = api.BrowseGameLiveRecentQueueListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLiveRecentQueueUuid()  {
        
            ResponseGameLiveRecentQueueBool wrapper = new ResponseGameLiveRecentQueueBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-recent-queue/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameLiveRecentQueue obj = new GameLiveRecentQueue();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _game = util.GetParamValue(_context, "@game");
            if(!String.IsNoneOrEmpty(_game))
                obj.game = ()_game;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameLiveRecentQueueUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLiveRecentQueueProfileIdGameId()  {
        
            ResponseGameLiveRecentQueueBool wrapper = new ResponseGameLiveRecentQueueBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-recent-queue/set/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameLiveRecentQueue obj = new GameLiveRecentQueue();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _game = util.GetParamValue(_context, "@game");
            if(!String.IsNoneOrEmpty(_game))
                obj.game = ()_game;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameLiveRecentQueueProfileIdGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLiveRecentQueueUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameLiveRecentQueueBool wrapper = new ResponseGameLiveRecentQueueBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-recent-queue/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameLiveRecentQueueUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLiveRecentQueueProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameLiveRecentQueueBool wrapper = new ResponseGameLiveRecentQueueBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-recent-queue/del/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameLiveRecentQueueProfileIdGameId(
                        
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLiveRecentQueueList() {
        

            ResponseGameLiveRecentQueueList wrapper = new ResponseGameLiveRecentQueueList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-recent-queue/get";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameLiveRecentQueue> objs = api.GetGameLiveRecentQueueList(
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLiveRecentQueueListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameLiveRecentQueueList wrapper = new ResponseGameLiveRecentQueueList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-recent-queue/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameLiveRecentQueue> objs = api.GetGameLiveRecentQueueListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLiveRecentQueueListGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameLiveRecentQueueList wrapper = new ResponseGameLiveRecentQueueList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-recent-queue/get/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameLiveRecentQueue> objs = api.GetGameLiveRecentQueueListGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLiveRecentQueueListProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameLiveRecentQueueList wrapper = new ResponseGameLiveRecentQueueList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-live-recent-queue/get/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameLiveRecentQueue> objs = api.GetGameLiveRecentQueueListProfileIdGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatistic() {
        

            ResponseGameProfileStatisticInt wrapper = new ResponseGameProfileStatisticInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileStatistic(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameProfileStatisticInt wrapper = new ResponseGameProfileStatisticInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileStatisticUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameProfileStatisticInt wrapper = new ResponseGameProfileStatisticInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/count/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileStatisticCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProfileStatisticInt wrapper = new ResponseGameProfileStatisticInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/count/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileStatisticGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProfileStatisticInt wrapper = new ResponseGameProfileStatisticInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/count/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileStatisticCodeGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProfileStatisticInt wrapper = new ResponseGameProfileStatisticInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/count/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileStatisticProfileIdGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticCodeProfileIdGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProfileStatisticInt wrapper = new ResponseGameProfileStatisticInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/count/code/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileStatisticCodeProfileIdGameId(
                _code
                , _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticCodeProfileIdGameIdTimestamp() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _timestamp = ()util.GetParamValue(_context, "@timestamp");

            ResponseGameProfileStatisticInt wrapper = new ResponseGameProfileStatisticInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/count/code/profile-id/game-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileStatisticCodeProfileIdGameIdTimestamp(
                _code
                , _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameProfileStatisticListFilter()  {
        
            ResponseGameProfileStatisticList wrapper = new ResponseGameProfileStatisticList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameProfileStatisticResult result = api.BrowseGameProfileStatisticListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileStatisticUuid()  {
        
            ResponseGameProfileStatisticBool wrapper = new ResponseGameProfileStatisticBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileStatistic obj = new GameProfileStatistic();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _points = util.GetParamValue(_context, "@points");
            if(!String.IsNoneOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileStatisticUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileStatisticUuidProfileIdGameIdTimestamp()  {
        
            ResponseGameProfileStatisticBool wrapper = new ResponseGameProfileStatisticBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/set/uuid/profile-id/game-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileStatistic obj = new GameProfileStatistic();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _points = util.GetParamValue(_context, "@points");
            if(!String.IsNoneOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileStatisticUuidProfileIdGameIdTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileStatisticProfileIdCode()  {
        
            ResponseGameProfileStatisticBool wrapper = new ResponseGameProfileStatisticBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/set/profile-id/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileStatistic obj = new GameProfileStatistic();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _points = util.GetParamValue(_context, "@points");
            if(!String.IsNoneOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileStatisticProfileIdCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileStatisticProfileIdCodeTimestamp()  {
        
            ResponseGameProfileStatisticBool wrapper = new ResponseGameProfileStatisticBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/set/profile-id/code/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileStatistic obj = new GameProfileStatistic();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _points = util.GetParamValue(_context, "@points");
            if(!String.IsNoneOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileStatisticProfileIdCodeTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileStatisticCodeProfileIdGameIdTimestamp()  {
        
            ResponseGameProfileStatisticBool wrapper = new ResponseGameProfileStatisticBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/set/code/profile-id/game-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileStatistic obj = new GameProfileStatistic();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _points = util.GetParamValue(_context, "@points");
            if(!String.IsNoneOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileStatisticCodeProfileIdGameIdTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileStatisticCodeProfileIdGameId()  {
        
            ResponseGameProfileStatisticBool wrapper = new ResponseGameProfileStatisticBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/set/code/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileStatistic obj = new GameProfileStatistic();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _stat_value_formatted = util.GetParamValue(_context, "@stat_value_formatted");
            if(!String.IsNoneOrEmpty(_stat_value_formatted))
                obj.stat_value_formatted = ()_stat_value_formatted;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _stat_value = util.GetParamValue(_context, "@stat_value");
            if(!String.IsNoneOrEmpty(_stat_value))
                obj.stat_value = float.Parse(_stat_value);
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _points = util.GetParamValue(_context, "@points");
            if(!String.IsNoneOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileStatisticCodeProfileIdGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileStatisticUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameProfileStatisticBool wrapper = new ResponseGameProfileStatisticBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProfileStatisticUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileStatisticCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProfileStatisticBool wrapper = new ResponseGameProfileStatisticBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/del/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProfileStatisticCodeGameId(
                        
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileStatisticProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProfileStatisticBool wrapper = new ResponseGameProfileStatisticBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/del/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProfileStatisticProfileIdGameId(
                        
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileStatisticCodeProfileIdGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProfileStatisticBool wrapper = new ResponseGameProfileStatisticBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/del/code/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProfileStatisticCodeProfileIdGameId(
                        
                _code
                , _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameProfileStatisticList wrapper = new ResponseGameProfileStatisticList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileStatistic> objs = api.GetGameProfileStatisticListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticListCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameProfileStatisticList wrapper = new ResponseGameProfileStatisticList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/get/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileStatistic> objs = api.GetGameProfileStatisticListCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticListGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProfileStatisticList wrapper = new ResponseGameProfileStatisticList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/get/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileStatistic> objs = api.GetGameProfileStatisticListGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticListCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProfileStatisticList wrapper = new ResponseGameProfileStatisticList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/get/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileStatistic> objs = api.GetGameProfileStatisticListCodeGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticListProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProfileStatisticList wrapper = new ResponseGameProfileStatisticList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/get/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileStatistic> objs = api.GetGameProfileStatisticListProfileIdGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticListProfileIdGameIdTimestamp() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _timestamp = ()util.GetParamValue(_context, "@timestamp");

            ResponseGameProfileStatisticList wrapper = new ResponseGameProfileStatisticList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/get/profile-id/game-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileStatistic> objs = api.GetGameProfileStatisticListProfileIdGameIdTimestamp(
                _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticListCodeProfileIdGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProfileStatisticList wrapper = new ResponseGameProfileStatisticList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/get/code/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileStatistic> objs = api.GetGameProfileStatisticListCodeProfileIdGameId(
                _code
                , _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticListCodeProfileIdGameIdTimestamp() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _timestamp = ()util.GetParamValue(_context, "@timestamp");

            ResponseGameProfileStatisticList wrapper = new ResponseGameProfileStatisticList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic/get/code/profile-id/game-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileStatistic> objs = api.GetGameProfileStatisticListCodeProfileIdGameIdTimestamp(
                _code
                , _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticMeta() {
        

            ResponseGameStatisticMetaInt wrapper = new ResponseGameStatisticMetaInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-meta/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticMeta(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticMetaUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameStatisticMetaInt wrapper = new ResponseGameStatisticMetaInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-meta/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticMetaUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticMetaCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameStatisticMetaInt wrapper = new ResponseGameStatisticMetaInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-meta/count/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticMetaCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticMetaCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticMetaInt wrapper = new ResponseGameStatisticMetaInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-meta/count/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticMetaCodeGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticMetaName() {
        
             _name = ()util.GetParamValue(_context, "@name");

            ResponseGameStatisticMetaInt wrapper = new ResponseGameStatisticMetaInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-meta/count/name";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticMetaName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameStatisticMetaGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticMetaInt wrapper = new ResponseGameStatisticMetaInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-meta/count/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameStatisticMetaGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameStatisticMetaListFilter()  {
        
            ResponseGameStatisticMetaList wrapper = new ResponseGameStatisticMetaList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-meta/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameStatisticMetaResult result = api.BrowseGameStatisticMetaListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticMetaUuid()  {
        
            ResponseGameStatisticMetaBool wrapper = new ResponseGameStatisticMetaBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-meta/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameStatisticMeta obj = new GameStatisticMeta();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _sort = util.GetParamValue(_context, "@sort");
            if(!String.IsNoneOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _points = util.GetParamValue(_context, "@points");
            if(!String.IsNoneOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _store_count = util.GetParamValue(_context, "@store_count");
            if(!String.IsNoneOrEmpty(_store_count))
                obj.store_count = Convert.ToInt32(_store_count);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _order = util.GetParamValue(_context, "@order");
            if(!String.IsNoneOrEmpty(_order))
                obj.order = ()_order;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameStatisticMetaUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameStatisticMetaCodeGameId()  {
        
            ResponseGameStatisticMetaBool wrapper = new ResponseGameStatisticMetaBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-meta/set/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameStatisticMeta obj = new GameStatisticMeta();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _sort = util.GetParamValue(_context, "@sort");
            if(!String.IsNoneOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _points = util.GetParamValue(_context, "@points");
            if(!String.IsNoneOrEmpty(_points))
                obj.points = float.Parse(_points);
            
            string _store_count = util.GetParamValue(_context, "@store_count");
            if(!String.IsNoneOrEmpty(_store_count))
                obj.store_count = Convert.ToInt32(_store_count);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _order = util.GetParamValue(_context, "@order");
            if(!String.IsNoneOrEmpty(_order))
                obj.order = ()_order;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameStatisticMetaCodeGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticMetaUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameStatisticMetaBool wrapper = new ResponseGameStatisticMetaBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-meta/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameStatisticMetaUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameStatisticMetaCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticMetaBool wrapper = new ResponseGameStatisticMetaBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-meta/del/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameStatisticMetaCodeGameId(
                        
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticMetaListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameStatisticMetaList wrapper = new ResponseGameStatisticMetaList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-meta/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticMeta> objs = api.GetGameStatisticMetaListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticMetaListCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameStatisticMetaList wrapper = new ResponseGameStatisticMetaList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-meta/get/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticMeta> objs = api.GetGameStatisticMetaListCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticMetaListName() {
        
             _name = ()util.GetParamValue(_context, "@name");

            ResponseGameStatisticMetaList wrapper = new ResponseGameStatisticMetaList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-meta/get/name";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticMeta> objs = api.GetGameStatisticMetaListName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticMetaListGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticMetaList wrapper = new ResponseGameStatisticMetaList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-meta/get/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticMeta> objs = api.GetGameStatisticMetaListGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameStatisticMetaListCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameStatisticMetaList wrapper = new ResponseGameStatisticMetaList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-statistic-meta/get/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameStatisticMeta> objs = api.GetGameStatisticMetaListCodeGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticTimestamp() {
        

            ResponseGameProfileStatisticTimestampInt wrapper = new ResponseGameProfileStatisticTimestampInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic-timestamp/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileStatisticTimestamp(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticTimestampUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameProfileStatisticTimestampInt wrapper = new ResponseGameProfileStatisticTimestampInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic-timestamp/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileStatisticTimestampUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticTimestampCodeProfileIdGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProfileStatisticTimestampInt wrapper = new ResponseGameProfileStatisticTimestampInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic-timestamp/count/code/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileStatisticTimestampCodeProfileIdGameId(
                _code
                , _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileStatisticTimestampCodeProfileIdGameIdTimestamp() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _timestamp = Convert.To(util.GetParamValue(_context, "@timestamp"));

            ResponseGameProfileStatisticTimestampInt wrapper = new ResponseGameProfileStatisticTimestampInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic-timestamp/count/code/profile-id/game-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileStatisticTimestampCodeProfileIdGameIdTimestamp(
                _code
                , _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameProfileStatisticTimestampListFilter()  {
        
            ResponseGameProfileStatisticTimestampList wrapper = new ResponseGameProfileStatisticTimestampList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic-timestamp/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameProfileStatisticTimestampResult result = api.BrowseGameProfileStatisticTimestampListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileStatisticTimestampUuid()  {
        
            ResponseGameProfileStatisticTimestampBool wrapper = new ResponseGameProfileStatisticTimestampBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic-timestamp/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileStatisticTimestamp obj = new GameProfileStatisticTimestamp();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = Convert.ToDateTime(_timestamp);
            else 
                obj.timestamp = DateTime.Now;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileStatisticTimestampUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileStatisticTimestampCodeProfileIdGameId()  {
        
            ResponseGameProfileStatisticTimestampBool wrapper = new ResponseGameProfileStatisticTimestampBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic-timestamp/set/code/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileStatisticTimestamp obj = new GameProfileStatisticTimestamp();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = Convert.ToDateTime(_timestamp);
            else 
                obj.timestamp = DateTime.Now;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileStatisticTimestampCodeProfileIdGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileStatisticTimestampCodeProfileIdGameIdTimestamp()  {
        
            ResponseGameProfileStatisticTimestampBool wrapper = new ResponseGameProfileStatisticTimestampBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic-timestamp/set/code/profile-id/game-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileStatisticTimestamp obj = new GameProfileStatisticTimestamp();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = Convert.ToDateTime(_timestamp);
            else 
                obj.timestamp = DateTime.Now;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileStatisticTimestampCodeProfileIdGameIdTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileStatisticTimestampUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameProfileStatisticTimestampBool wrapper = new ResponseGameProfileStatisticTimestampBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic-timestamp/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProfileStatisticTimestampUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileStatisticTimestampCodeProfileIdGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProfileStatisticTimestampBool wrapper = new ResponseGameProfileStatisticTimestampBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic-timestamp/del/code/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProfileStatisticTimestampCodeProfileIdGameId(
                        
                _code
                , _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileStatisticTimestampCodeProfileIdGameIdTimestamp() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _timestamp = Convert.To(util.GetParamValue(_context, "@timestamp"));

            ResponseGameProfileStatisticTimestampBool wrapper = new ResponseGameProfileStatisticTimestampBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic-timestamp/del/code/profile-id/game-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProfileStatisticTimestampCodeProfileIdGameIdTimestamp(
                        
                _code
                , _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticTimestampListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameProfileStatisticTimestampList wrapper = new ResponseGameProfileStatisticTimestampList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic-timestamp/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileStatisticTimestamp> objs = api.GetGameProfileStatisticTimestampListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticTimestampListCodeProfileIdGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProfileStatisticTimestampList wrapper = new ResponseGameProfileStatisticTimestampList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic-timestamp/get/code/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileStatisticTimestamp> objs = api.GetGameProfileStatisticTimestampListCodeProfileIdGameId(
                _code
                , _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileStatisticTimestampListCodeProfileIdGameIdTimestamp() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _timestamp = Convert.To(util.GetParamValue(_context, "@timestamp"));

            ResponseGameProfileStatisticTimestampList wrapper = new ResponseGameProfileStatisticTimestampList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-statistic-timestamp/get/code/profile-id/game-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileStatisticTimestamp> objs = api.GetGameProfileStatisticTimestampListCodeProfileIdGameIdTimestamp(
                _code
                , _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameKeyMeta() {
        

            ResponseGameKeyMetaInt wrapper = new ResponseGameKeyMetaInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameKeyMeta(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameKeyMetaUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameKeyMetaInt wrapper = new ResponseGameKeyMetaInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameKeyMetaUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameKeyMetaCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameKeyMetaInt wrapper = new ResponseGameKeyMetaInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/count/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameKeyMetaCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameKeyMetaCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameKeyMetaInt wrapper = new ResponseGameKeyMetaInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/count/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameKeyMetaCodeGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameKeyMetaName() {
        
             _name = ()util.GetParamValue(_context, "@name");

            ResponseGameKeyMetaInt wrapper = new ResponseGameKeyMetaInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/count/name";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameKeyMetaName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameKeyMetaKey() {
        
             _key = ()util.GetParamValue(_context, "@key");

            ResponseGameKeyMetaInt wrapper = new ResponseGameKeyMetaInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/count/key";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameKeyMetaKey(
                _key
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameKeyMetaGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameKeyMetaInt wrapper = new ResponseGameKeyMetaInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/count/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameKeyMetaGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameKeyMetaKeyGameId() {
        
             _key = ()util.GetParamValue(_context, "@key");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameKeyMetaInt wrapper = new ResponseGameKeyMetaInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/count/key/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameKeyMetaKeyGameId(
                _key
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameKeyMetaListFilter()  {
        
            ResponseGameKeyMetaList wrapper = new ResponseGameKeyMetaList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameKeyMetaResult result = api.BrowseGameKeyMetaListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameKeyMetaUuid()  {
        
            ResponseGameKeyMetaBool wrapper = new ResponseGameKeyMetaBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameKeyMeta obj = new GameKeyMeta();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _sort = util.GetParamValue(_context, "@sort");
            if(!String.IsNoneOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _key_level = util.GetParamValue(_context, "@key_level");
            if(!String.IsNoneOrEmpty(_key_level))
                obj.key_level = ()_key_level;
            
            string _store_count = util.GetParamValue(_context, "@store_count");
            if(!String.IsNoneOrEmpty(_store_count))
                obj.store_count = Convert.ToInt32(_store_count);
            
            string _key = util.GetParamValue(_context, "@key");
            if(!String.IsNoneOrEmpty(_key))
                obj.key = ()_key;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _order = util.GetParamValue(_context, "@order");
            if(!String.IsNoneOrEmpty(_order))
                obj.order = ()_order;
            
            string _key_stat = util.GetParamValue(_context, "@key_stat");
            if(!String.IsNoneOrEmpty(_key_stat))
                obj.key_stat = ()_key_stat;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameKeyMetaUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameKeyMetaCodeGameId()  {
        
            ResponseGameKeyMetaBool wrapper = new ResponseGameKeyMetaBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/set/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameKeyMeta obj = new GameKeyMeta();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _sort = util.GetParamValue(_context, "@sort");
            if(!String.IsNoneOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _key_level = util.GetParamValue(_context, "@key_level");
            if(!String.IsNoneOrEmpty(_key_level))
                obj.key_level = ()_key_level;
            
            string _store_count = util.GetParamValue(_context, "@store_count");
            if(!String.IsNoneOrEmpty(_store_count))
                obj.store_count = Convert.ToInt32(_store_count);
            
            string _key = util.GetParamValue(_context, "@key");
            if(!String.IsNoneOrEmpty(_key))
                obj.key = ()_key;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _order = util.GetParamValue(_context, "@order");
            if(!String.IsNoneOrEmpty(_order))
                obj.order = ()_order;
            
            string _key_stat = util.GetParamValue(_context, "@key_stat");
            if(!String.IsNoneOrEmpty(_key_stat))
                obj.key_stat = ()_key_stat;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameKeyMetaCodeGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameKeyMetaKeyGameId()  {
        
            ResponseGameKeyMetaBool wrapper = new ResponseGameKeyMetaBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/set/key/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameKeyMeta obj = new GameKeyMeta();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _sort = util.GetParamValue(_context, "@sort");
            if(!String.IsNoneOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _key_level = util.GetParamValue(_context, "@key_level");
            if(!String.IsNoneOrEmpty(_key_level))
                obj.key_level = ()_key_level;
            
            string _store_count = util.GetParamValue(_context, "@store_count");
            if(!String.IsNoneOrEmpty(_store_count))
                obj.store_count = Convert.ToInt32(_store_count);
            
            string _key = util.GetParamValue(_context, "@key");
            if(!String.IsNoneOrEmpty(_key))
                obj.key = ()_key;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _order = util.GetParamValue(_context, "@order");
            if(!String.IsNoneOrEmpty(_order))
                obj.order = ()_order;
            
            string _key_stat = util.GetParamValue(_context, "@key_stat");
            if(!String.IsNoneOrEmpty(_key_stat))
                obj.key_stat = ()_key_stat;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameKeyMetaKeyGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameKeyMetaKeyGameIdLevel()  {
        
            ResponseGameKeyMetaBool wrapper = new ResponseGameKeyMetaBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/set/key/game-id/level";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameKeyMeta obj = new GameKeyMeta();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _sort = util.GetParamValue(_context, "@sort");
            if(!String.IsNoneOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _key_level = util.GetParamValue(_context, "@key_level");
            if(!String.IsNoneOrEmpty(_key_level))
                obj.key_level = ()_key_level;
            
            string _store_count = util.GetParamValue(_context, "@store_count");
            if(!String.IsNoneOrEmpty(_store_count))
                obj.store_count = Convert.ToInt32(_store_count);
            
            string _key = util.GetParamValue(_context, "@key");
            if(!String.IsNoneOrEmpty(_key))
                obj.key = ()_key;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _order = util.GetParamValue(_context, "@order");
            if(!String.IsNoneOrEmpty(_order))
                obj.order = ()_order;
            
            string _key_stat = util.GetParamValue(_context, "@key_stat");
            if(!String.IsNoneOrEmpty(_key_stat))
                obj.key_stat = ()_key_stat;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameKeyMetaKeyGameIdLevel(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameKeyMetaUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameKeyMetaBool wrapper = new ResponseGameKeyMetaBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameKeyMetaUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameKeyMetaCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameKeyMetaBool wrapper = new ResponseGameKeyMetaBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/del/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameKeyMetaCodeGameId(
                        
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameKeyMetaKeyGameId() {
        
             _key = ()util.GetParamValue(_context, "@key");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameKeyMetaBool wrapper = new ResponseGameKeyMetaBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/del/key/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameKeyMetaKeyGameId(
                        
                _key
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameKeyMetaListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameKeyMetaList wrapper = new ResponseGameKeyMetaList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameKeyMeta> objs = api.GetGameKeyMetaListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameKeyMetaListCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameKeyMetaList wrapper = new ResponseGameKeyMetaList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/get/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameKeyMeta> objs = api.GetGameKeyMetaListCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameKeyMetaListCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameKeyMetaList wrapper = new ResponseGameKeyMetaList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/get/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameKeyMeta> objs = api.GetGameKeyMetaListCodeGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameKeyMetaListName() {
        
             _name = ()util.GetParamValue(_context, "@name");

            ResponseGameKeyMetaList wrapper = new ResponseGameKeyMetaList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/get/name";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameKeyMeta> objs = api.GetGameKeyMetaListName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameKeyMetaListKey() {
        
             _key = ()util.GetParamValue(_context, "@key");

            ResponseGameKeyMetaList wrapper = new ResponseGameKeyMetaList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/get/key";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameKeyMeta> objs = api.GetGameKeyMetaListKey(
                _key
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameKeyMetaListGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameKeyMetaList wrapper = new ResponseGameKeyMetaList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/get/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameKeyMeta> objs = api.GetGameKeyMetaListGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameKeyMetaListKeyGameId() {
        
             _key = ()util.GetParamValue(_context, "@key");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameKeyMetaList wrapper = new ResponseGameKeyMetaList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/get/key/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameKeyMeta> objs = api.GetGameKeyMetaListKeyGameId(
                _key
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameKeyMetaListCodeLevel() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _level = ()util.GetParamValue(_context, "@level");

            ResponseGameKeyMetaList wrapper = new ResponseGameKeyMetaList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-key-meta/get/code/level";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameKeyMeta> objs = api.GetGameKeyMetaListCodeLevel(
                _code
                , _level
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLevel() {
        

            ResponseGameLevelInt wrapper = new ResponseGameLevelInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-level/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameLevel(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLevelUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameLevelInt wrapper = new ResponseGameLevelInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-level/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameLevelUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLevelCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameLevelInt wrapper = new ResponseGameLevelInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-level/count/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameLevelCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLevelCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameLevelInt wrapper = new ResponseGameLevelInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-level/count/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameLevelCodeGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLevelName() {
        
             _name = ()util.GetParamValue(_context, "@name");

            ResponseGameLevelInt wrapper = new ResponseGameLevelInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-level/count/name";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameLevelName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameLevelGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameLevelInt wrapper = new ResponseGameLevelInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-level/count/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameLevelGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameLevelListFilter()  {
        
            ResponseGameLevelList wrapper = new ResponseGameLevelList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-level/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameLevelResult result = api.BrowseGameLevelListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLevelUuid()  {
        
            ResponseGameLevelBool wrapper = new ResponseGameLevelBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-level/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameLevel obj = new GameLevel();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _sort = util.GetParamValue(_context, "@sort");
            if(!String.IsNoneOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _order = util.GetParamValue(_context, "@order");
            if(!String.IsNoneOrEmpty(_order))
                obj.order = ()_order;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameLevelUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameLevelCodeGameId()  {
        
            ResponseGameLevelBool wrapper = new ResponseGameLevelBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-level/set/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameLevel obj = new GameLevel();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _sort = util.GetParamValue(_context, "@sort");
            if(!String.IsNoneOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _order = util.GetParamValue(_context, "@order");
            if(!String.IsNoneOrEmpty(_order))
                obj.order = ()_order;
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameLevelCodeGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLevelUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameLevelBool wrapper = new ResponseGameLevelBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-level/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameLevelUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameLevelCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameLevelBool wrapper = new ResponseGameLevelBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-level/del/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameLevelCodeGameId(
                        
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLevelListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameLevelList wrapper = new ResponseGameLevelList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-level/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameLevel> objs = api.GetGameLevelListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLevelListCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameLevelList wrapper = new ResponseGameLevelList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-level/get/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameLevel> objs = api.GetGameLevelListCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLevelListCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameLevelList wrapper = new ResponseGameLevelList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-level/get/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameLevel> objs = api.GetGameLevelListCodeGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLevelListName() {
        
             _name = ()util.GetParamValue(_context, "@name");

            ResponseGameLevelList wrapper = new ResponseGameLevelList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-level/get/name";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameLevel> objs = api.GetGameLevelListName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameLevelListGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameLevelList wrapper = new ResponseGameLevelList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-level/get/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameLevel> objs = api.GetGameLevelListGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAchievement() {
        

            ResponseGameProfileAchievementInt wrapper = new ResponseGameProfileAchievementInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileAchievement(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAchievementUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameProfileAchievementInt wrapper = new ResponseGameProfileAchievementInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileAchievementUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAchievementProfileIdCode() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameProfileAchievementInt wrapper = new ResponseGameProfileAchievementInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/count/profile-id/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileAchievementProfileIdCode(
                _profile_id
                , _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAchievementUsername() {
        
             _username = ()util.GetParamValue(_context, "@username");

            ResponseGameProfileAchievementInt wrapper = new ResponseGameProfileAchievementInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/count/username";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileAchievementUsername(
                _username
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAchievementCodeProfileIdGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProfileAchievementInt wrapper = new ResponseGameProfileAchievementInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/count/code/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileAchievementCodeProfileIdGameId(
                _code
                , _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameProfileAchievementCodeProfileIdGameIdTimestamp() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _timestamp = ()util.GetParamValue(_context, "@timestamp");

            ResponseGameProfileAchievementInt wrapper = new ResponseGameProfileAchievementInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/count/code/profile-id/game-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameProfileAchievementCodeProfileIdGameIdTimestamp(
                _code
                , _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameProfileAchievementListFilter()  {
        
            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameProfileAchievementResult result = api.BrowseGameProfileAchievementListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAchievementUuid()  {
        
            ResponseGameProfileAchievementBool wrapper = new ResponseGameProfileAchievementBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileAchievement obj = new GameProfileAchievement();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _completed = util.GetParamValue(_context, "@completed");
            if(!String.IsNoneOrEmpty(_completed))
                obj.completed = Convert.ToBoolean(_completed);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _achievement_value = util.GetParamValue(_context, "@achievement_value");
            if(!String.IsNoneOrEmpty(_achievement_value))
                obj.achievement_value = float.Parse(_achievement_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileAchievementUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAchievementUuidCode()  {
        
            ResponseGameProfileAchievementBool wrapper = new ResponseGameProfileAchievementBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/set/uuid/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileAchievement obj = new GameProfileAchievement();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _completed = util.GetParamValue(_context, "@completed");
            if(!String.IsNoneOrEmpty(_completed))
                obj.completed = Convert.ToBoolean(_completed);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _achievement_value = util.GetParamValue(_context, "@achievement_value");
            if(!String.IsNoneOrEmpty(_achievement_value))
                obj.achievement_value = float.Parse(_achievement_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileAchievementUuidCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAchievementProfileIdCode()  {
        
            ResponseGameProfileAchievementBool wrapper = new ResponseGameProfileAchievementBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/set/profile-id/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileAchievement obj = new GameProfileAchievement();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _completed = util.GetParamValue(_context, "@completed");
            if(!String.IsNoneOrEmpty(_completed))
                obj.completed = Convert.ToBoolean(_completed);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _achievement_value = util.GetParamValue(_context, "@achievement_value");
            if(!String.IsNoneOrEmpty(_achievement_value))
                obj.achievement_value = float.Parse(_achievement_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileAchievementProfileIdCode(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAchievementCodeProfileIdGameId()  {
        
            ResponseGameProfileAchievementBool wrapper = new ResponseGameProfileAchievementBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/set/code/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileAchievement obj = new GameProfileAchievement();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _completed = util.GetParamValue(_context, "@completed");
            if(!String.IsNoneOrEmpty(_completed))
                obj.completed = Convert.ToBoolean(_completed);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _achievement_value = util.GetParamValue(_context, "@achievement_value");
            if(!String.IsNoneOrEmpty(_achievement_value))
                obj.achievement_value = float.Parse(_achievement_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileAchievementCodeProfileIdGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameProfileAchievementCodeProfileIdGameIdTimestamp()  {
        
            ResponseGameProfileAchievementBool wrapper = new ResponseGameProfileAchievementBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/set/code/profile-id/game-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameProfileAchievement obj = new GameProfileAchievement();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _username = util.GetParamValue(_context, "@username");
            if(!String.IsNoneOrEmpty(_username))
                obj.username = ()_username;
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _timestamp = util.GetParamValue(_context, "@timestamp");
            if(!String.IsNoneOrEmpty(_timestamp))
                obj.timestamp = float.Parse(_timestamp);
            
            string _completed = util.GetParamValue(_context, "@completed");
            if(!String.IsNoneOrEmpty(_completed))
                obj.completed = Convert.ToBoolean(_completed);
            
            string _profile_id = util.GetParamValue(_context, "@profile_id");
            if(!String.IsNoneOrEmpty(_profile_id))
                obj.profile_id = ()_profile_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _achievement_value = util.GetParamValue(_context, "@achievement_value");
            if(!String.IsNoneOrEmpty(_achievement_value))
                obj.achievement_value = float.Parse(_achievement_value);
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            
            // get data
            wrapper.data = api.SetGameProfileAchievementCodeProfileIdGameIdTimestamp(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileAchievementUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameProfileAchievementBool wrapper = new ResponseGameProfileAchievementBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProfileAchievementUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileAchievementProfileIdCode() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameProfileAchievementBool wrapper = new ResponseGameProfileAchievementBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/del/profile-id/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProfileAchievementProfileIdCode(
                        
                _profile_id
                , _code
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameProfileAchievementUuidCode() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameProfileAchievementBool wrapper = new ResponseGameProfileAchievementBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/del/uuid/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameProfileAchievementUuidCode(
                        
                _uuid
                , _code
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAchievementListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileAchievement> objs = api.GetGameProfileAchievementListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAchievementListProfileIdCode() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/get/profile-id/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileAchievement> objs = api.GetGameProfileAchievementListProfileIdCode(
                _profile_id
                , _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAchievementListUsername() {
        
             _username = ()util.GetParamValue(_context, "@username");

            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/get/username";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileAchievement> objs = api.GetGameProfileAchievementListUsername(
                _username
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAchievementListCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/get/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileAchievement> objs = api.GetGameProfileAchievementListCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAchievementListGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/get/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileAchievement> objs = api.GetGameProfileAchievementListGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAchievementListCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/get/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileAchievement> objs = api.GetGameProfileAchievementListCodeGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAchievementListProfileIdGameId() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/get/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileAchievement> objs = api.GetGameProfileAchievementListProfileIdGameId(
                _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAchievementListProfileIdGameIdTimestamp() {
        
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _timestamp = ()util.GetParamValue(_context, "@timestamp");

            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/get/profile-id/game-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileAchievement> objs = api.GetGameProfileAchievementListProfileIdGameIdTimestamp(
                _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAchievementListCodeProfileIdGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/get/code/profile-id/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileAchievement> objs = api.GetGameProfileAchievementListCodeProfileIdGameId(
                _code
                , _profile_id
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameProfileAchievementListCodeProfileIdGameIdTimestamp() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _profile_id = ()util.GetParamValue(_context, "@profile_id");
             _game_id = ()util.GetParamValue(_context, "@game_id");
             _timestamp = ()util.GetParamValue(_context, "@timestamp");

            ResponseGameProfileAchievementList wrapper = new ResponseGameProfileAchievementList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-profile-achievement/get/code/profile-id/game-id/timestamp";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameProfileAchievement> objs = api.GetGameProfileAchievementListCodeProfileIdGameIdTimestamp(
                _code
                , _profile_id
                , _game_id
                , _timestamp
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAchievementMeta() {
        

            ResponseGameAchievementMetaInt wrapper = new ResponseGameAchievementMetaInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-achievement-meta/count";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameAchievementMeta(
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAchievementMetaUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameAchievementMetaInt wrapper = new ResponseGameAchievementMetaInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-achievement-meta/count/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameAchievementMetaUuid(
                _uuid
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAchievementMetaCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameAchievementMetaInt wrapper = new ResponseGameAchievementMetaInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-achievement-meta/count/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameAchievementMetaCode(
                _code
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAchievementMetaCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameAchievementMetaInt wrapper = new ResponseGameAchievementMetaInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-achievement-meta/count/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameAchievementMetaCodeGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAchievementMetaName() {
        
             _name = ()util.GetParamValue(_context, "@name");

            ResponseGameAchievementMetaInt wrapper = new ResponseGameAchievementMetaInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-achievement-meta/count/name";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameAchievementMetaName(
                _name
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void CountGameAchievementMetaGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameAchievementMetaInt wrapper = new ResponseGameAchievementMetaInt();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-achievement-meta/count/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            int i = api.CountGameAchievementMetaGameId(
                _game_id
            );
            
            // get data
            wrapper.data = i;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void BrowseGameAchievementMetaListFilter()  {
        
            ResponseGameAchievementMetaList wrapper = new ResponseGameAchievementMetaList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-achievement-meta/browse/filter";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
            
            SearchFilter obj = new SearchFilter();
            obj.page = Convert.ToInt32(util.GetParamValue(_context, "@page"));
            obj.page_size = Convert.ToInt32(util.GetParamValue(_context, "@page-size"));
            obj.filter = util.GetParamValue(_context, "@filter");
            
            GameAchievementMetaResult result = api.BrowseGameAchievementMetaListFilter(obj);
            wrapper.info.Add("total_rows", result.total_rows);
            wrapper.info.Add("total_pages", result.total_pages);
            wrapper.info.Add("page", result.page);
            wrapper.info.Add("page_size", result.page_size);
            
            // get data
            wrapper.data = result.data;
                        
	    util.SerializeTypeToResponse(_format, _context, wrapper);          
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameAchievementMetaUuid()  {
        
            ResponseGameAchievementMetaBool wrapper = new ResponseGameAchievementMetaBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-achievement-meta/set/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameAchievementMeta obj = new GameAchievementMeta();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _sort = util.GetParamValue(_context, "@sort");
            if(!String.IsNoneOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _game_stat = util.GetParamValue(_context, "@game_stat");
            if(!String.IsNoneOrEmpty(_game_stat))
                obj.game_stat = Convert.ToBoolean(_game_stat);
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _points = util.GetParamValue(_context, "@points");
            if(!String.IsNoneOrEmpty(_points))
                obj.points = Convert.ToInt32(_points);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _modifier = util.GetParamValue(_context, "@modifier");
            if(!String.IsNoneOrEmpty(_modifier))
                obj.modifier = float.Parse(_modifier);
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _leaderboard = util.GetParamValue(_context, "@leaderboard");
            if(!String.IsNoneOrEmpty(_leaderboard))
                obj.leaderboard = Convert.ToBoolean(_leaderboard);
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameAchievementMetaUuid(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void SetGameAchievementMetaCodeGameId()  {
        
            ResponseGameAchievementMetaBool wrapper = new ResponseGameAchievementMetaBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-achievement-meta/set/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);
                        
            GameAchievementMeta obj = new GameAchievementMeta();
            
            string _status = util.GetParamValue(_context, "@status");
            if(!String.IsNoneOrEmpty(_status))
                obj.status = ()_status;
            
            string _sort = util.GetParamValue(_context, "@sort");
            if(!String.IsNoneOrEmpty(_sort))
                obj.sort = Convert.ToInt32(_sort);
            
            string _code = util.GetParamValue(_context, "@code");
            if(!String.IsNoneOrEmpty(_code))
                obj.code = ()_code;
            
            string _display_name = util.GetParamValue(_context, "@display_name");
            if(!String.IsNoneOrEmpty(_display_name))
                obj.display_name = ()_display_name;
            
            string _name = util.GetParamValue(_context, "@name");
            if(!String.IsNoneOrEmpty(_name))
                obj.name = ()_name;
            
            string _game_stat = util.GetParamValue(_context, "@game_stat");
            if(!String.IsNoneOrEmpty(_game_stat))
                obj.game_stat = Convert.ToBoolean(_game_stat);
            
            string _date_modified = util.GetParamValue(_context, "@date_modified");
            if(!String.IsNoneOrEmpty(_date_modified))
                obj.date_modified = Convert.ToDateTime(_date_modified);
            else 
                obj.date_modified = DateTime.Now;
            
            string _data = util.GetParamValue(_context, "@data");
            if(!String.IsNoneOrEmpty(_data))
                obj.data = ()_data;
            
            string _level = util.GetParamValue(_context, "@level");
            if(!String.IsNoneOrEmpty(_level))
                obj.level = ()_level;
            
            string _uuid = util.GetParamValue(_context, "@uuid");
            if(!String.IsNoneOrEmpty(_uuid))
                obj.uuid = ()_uuid;
            
            string _points = util.GetParamValue(_context, "@points");
            if(!String.IsNoneOrEmpty(_points))
                obj.points = Convert.ToInt32(_points);
            
            string _game_id = util.GetParamValue(_context, "@game_id");
            if(!String.IsNoneOrEmpty(_game_id))
                obj.game_id = ()_game_id;
            
            string _active = util.GetParamValue(_context, "@active");
            if(!String.IsNoneOrEmpty(_active))
                obj.active = Convert.ToBoolean(_active);
            
            string _date_created = util.GetParamValue(_context, "@date_created");
            if(!String.IsNoneOrEmpty(_date_created))
                obj.date_created = Convert.ToDateTime(_date_created);
            else 
                obj.date_created = DateTime.Now;
            
            string _modifier = util.GetParamValue(_context, "@modifier");
            if(!String.IsNoneOrEmpty(_modifier))
                obj.modifier = float.Parse(_modifier);
            
            string _type = util.GetParamValue(_context, "@type");
            if(!String.IsNoneOrEmpty(_type))
                obj.type = ()_type;
            
            string _leaderboard = util.GetParamValue(_context, "@leaderboard");
            if(!String.IsNoneOrEmpty(_leaderboard))
                obj.leaderboard = Convert.ToBoolean(_leaderboard);
            
            string _description = util.GetParamValue(_context, "@description");
            if(!String.IsNoneOrEmpty(_description))
                obj.description = ()_description;
            
            
            // get data
            wrapper.data = api.SetGameAchievementMetaCodeGameId(obj);
                        
            util.SerializeTypeJSONToResponse(_context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameAchievementMetaUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameAchievementMetaBool wrapper = new ResponseGameAchievementMetaBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-achievement-meta/del/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameAchievementMetaUuid(
                        
                _uuid
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
        public virtual void DelGameAchievementMetaCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameAchievementMetaBool wrapper = new ResponseGameAchievementMetaBool();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-achievement-meta/del/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            bool completed = api.DelGameAchievementMetaCodeGameId(
                        
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = completed;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAchievementMetaListUuid() {
        
             _uuid = ()util.GetParamValue(_context, "@uuid");

            ResponseGameAchievementMetaList wrapper = new ResponseGameAchievementMetaList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-achievement-meta/get/uuid";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameAchievementMeta> objs = api.GetGameAchievementMetaListUuid(
                _uuid
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAchievementMetaListCode() {
        
             _code = ()util.GetParamValue(_context, "@code");

            ResponseGameAchievementMetaList wrapper = new ResponseGameAchievementMetaList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-achievement-meta/get/code";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameAchievementMeta> objs = api.GetGameAchievementMetaListCode(
                _code
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAchievementMetaListCodeGameId() {
        
             _code = ()util.GetParamValue(_context, "@code");
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameAchievementMetaList wrapper = new ResponseGameAchievementMetaList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-achievement-meta/get/code/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameAchievementMeta> objs = api.GetGameAchievementMetaListCodeGameId(
                _code
                , _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAchievementMetaListName() {
        
             _name = ()util.GetParamValue(_context, "@name");

            ResponseGameAchievementMetaList wrapper = new ResponseGameAchievementMetaList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-achievement-meta/get/name";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameAchievementMeta> objs = api.GetGameAchievementMetaListName(
                _name
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
//------------------------------------------------------------------------------                    
                    
        public virtual void GetGameAchievementMetaListGameId() {
        
             _game_id = ()util.GetParamValue(_context, "@game_id");

            ResponseGameAchievementMetaList wrapper = new ResponseGameAchievementMetaList();
            wrapper.message = "Success";
            wrapper.error = 0;
            wrapper.action = "game-achievement-meta/get/game-id";
            wrapper.info.Add("path", path);
            wrapper.info.Add("path_info", path_info);
            wrapper.info.Add("qstring", qstring);
            wrapper.info.Add("action", action);
            wrapper.info.Add("action_params", action_params);

            List<GameAchievementMeta> objs = api.GetGameAchievementMetaListGameId(
                _game_id
            );
            
            // get data
            wrapper.data = objs;
            
	    util.SerializeTypeToResponse(_format, _context, wrapper);
        }     
    }
}

"""
*/
?>




