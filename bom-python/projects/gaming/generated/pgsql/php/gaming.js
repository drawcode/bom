var return_gaming_obj = None;

//-------------------------------------------------
if (!window.gaming)
    window.gaming = {};
    
if (!window.gaming)
    window.gaming = {};
    
if (!window.gaming.base_entity)
    window.gaming.base_entity = {};
   
if (!window.gaming.base_meta)
    window.gaming.base_meta = {};
   
if (!window.gaming.base_location)
    window.gaming.base_location = {};
   
if (!window.gaming.game)
    window.gaming.game = {};
   
if (!window.gaming.game_category)
    window.gaming.game_category = {};
   
if (!window.gaming.game_category_tree)
    window.gaming.game_category_tree = {};
   
if (!window.gaming.game_category_assoc)
    window.gaming.game_category_assoc = {};
   
if (!window.gaming.game_type)
    window.gaming.game_type = {};
   
if (!window.gaming.profile_game)
    window.gaming.profile_game = {};
   
if (!window.gaming.game_network)
    window.gaming.game_network = {};
   
if (!window.gaming.game_network_auth)
    window.gaming.game_network_auth = {};
   
if (!window.gaming.profile_game_network)
    window.gaming.profile_game_network = {};
   
if (!window.gaming.profile_game_data_attribute)
    window.gaming.profile_game_data_attribute = {};
   
if (!window.gaming.game_session)
    window.gaming.game_session = {};
   
if (!window.gaming.game_session_data)
    window.gaming.game_session_data = {};
   
if (!window.gaming.game_content)
    window.gaming.game_content = {};
   
if (!window.gaming.game_profile_content)
    window.gaming.game_profile_content = {};
   
if (!window.gaming.game_app)
    window.gaming.game_app = {};
   
if (!window.gaming.profile_game_location)
    window.gaming.profile_game_location = {};
   
if (!window.gaming.game_photo)
    window.gaming.game_photo = {};
   
if (!window.gaming.game_video)
    window.gaming.game_video = {};
   
if (!window.gaming.game_rpg_item)
    window.gaming.game_rpg_item = {};
   
if (!window.gaming.game_rpg_item_weapon)
    window.gaming.game_rpg_item_weapon = {};
   
if (!window.gaming.game_rpg_item_skill)
    window.gaming.game_rpg_item_skill = {};
   
if (!window.gaming.game_product)
    window.gaming.game_product = {};
   
if (!window.gaming.game_statistic_leaderboard)
    window.gaming.game_statistic_leaderboard = {};
   
if (!window.gaming.game_statistic_leaderboard_rollup)
    window.gaming.game_statistic_leaderboard_rollup = {};
   
if (!window.gaming.game_live_queue)
    window.gaming.game_live_queue = {};
   
if (!window.gaming.game_live_recent_queue)
    window.gaming.game_live_recent_queue = {};
   
if (!window.gaming.game_profile_statistic)
    window.gaming.game_profile_statistic = {};
   
if (!window.gaming.game_statistic_meta)
    window.gaming.game_statistic_meta = {};
   
if (!window.gaming.game_profile_statistic_timestamp)
    window.gaming.game_profile_statistic_timestamp = {};
   
if (!window.gaming.game_key_meta)
    window.gaming.game_key_meta = {};
   
if (!window.gaming.game_level)
    window.gaming.game_level = {};
   
if (!window.gaming.game_profile_achievement)
    window.gaming.game_profile_achievement = {};
   
if (!window.gaming.game_achievement_meta)
    window.gaming.game_achievement_meta = {};
   

//-------------------------------------------------
gaming.gaming.global = function() {

    this.url = document.location;
    this.service_base = '/api/v1/';
    this.base_entity_service = this.service_base + 'base_entity/';
    this.base_meta_service = this.service_base + 'base_meta/';
    this.base_location_service = this.service_base + 'base_location/';
    this.game_service = this.service_base + 'game/';
    this.game_category_service = this.service_base + 'game_category/';
    this.game_category_tree_service = this.service_base + 'game_category_tree/';
    this.game_category_assoc_service = this.service_base + 'game_category_assoc/';
    this.game_type_service = this.service_base + 'game_type/';
    this.profile_game_service = this.service_base + 'profile_game/';
    this.game_network_service = this.service_base + 'game_network/';
    this.game_network_auth_service = this.service_base + 'game_network_auth/';
    this.profile_game_network_service = this.service_base + 'profile_game_network/';
    this.profile_game_data_attribute_service = this.service_base + 'profile_game_data_attribute/';
    this.game_session_service = this.service_base + 'game_session/';
    this.game_session_data_service = this.service_base + 'game_session_data/';
    this.game_content_service = this.service_base + 'game_content/';
    this.game_profile_content_service = this.service_base + 'game_profile_content/';
    this.game_app_service = this.service_base + 'game_app/';
    this.profile_game_location_service = this.service_base + 'profile_game_location/';
    this.game_photo_service = this.service_base + 'game_photo/';
    this.game_video_service = this.service_base + 'game_video/';
    this.game_rpg_item_service = this.service_base + 'game_rpg_item/';
    this.game_rpg_item_weapon_service = this.service_base + 'game_rpg_item_weapon/';
    this.game_rpg_item_skill_service = this.service_base + 'game_rpg_item_skill/';
    this.game_product_service = this.service_base + 'game_product/';
    this.game_statistic_leaderboard_service = this.service_base + 'game_statistic_leaderboard/';
    this.game_statistic_leaderboard_rollup_service = this.service_base + 'game_statistic_leaderboard_rollup/';
    this.game_live_queue_service = this.service_base + 'game_live_queue/';
    this.game_live_recent_queue_service = this.service_base + 'game_live_recent_queue/';
    this.game_profile_statistic_service = this.service_base + 'game_profile_statistic/';
    this.game_statistic_meta_service = this.service_base + 'game_statistic_meta/';
    this.game_profile_statistic_timestamp_service = this.service_base + 'game_profile_statistic_timestamp/';
    this.game_key_meta_service = this.service_base + 'game_key_meta/';
    this.game_level_service = this.service_base + 'game_level/';
    this.game_profile_achievement_service = this.service_base + 'game_profile_achievement/';
    this.game_achievement_meta_service = this.service_base + 'game_achievement_meta/';
}

var gaming_gaming_global = new gaming.gaming.global();
       
//-------------------------------------------------
gaming.base_entity = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.base_entity.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
}
//-------------------------------------------------
gaming.base_meta = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.base_meta.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
}
//-------------------------------------------------
gaming.base_location = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.base_location.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
}
//-------------------------------------------------
gaming.game = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_count_game_callback", true);
            // call a method that can be inline callback
            try {error_count_game(data);} catch(e) { _log("Error calling: error_count_game: " + e);}
        }
        else {
            _log("SUCCESS::game_count_game_callback", false);
            // call a method that can be inline callback
            try {handle_count_game(data);} catch(e) { _log("Error calling: handle_count_game: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_count_game_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_uuid(data);} catch(e) { _log("Error calling: error_count_game_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_count_game_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_uuid(data);} catch(e) { _log("Error calling: handle_count_game_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'count'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_count_game_code_callback", true);
            // call a method that can be inline callback
            try {error_count_game_code(data);} catch(e) { _log("Error calling: error_count_game_code: " + e);}
        }
        else {
            _log("SUCCESS::game_count_game_code_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_code(data);} catch(e) { _log("Error calling: handle_count_game_code: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_name: function
    (
        name,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'count'
                + "/by-name"
                + "/@name/" + name            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_name_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_count_game_name_callback", true);
            // call a method that can be inline callback
            try {error_count_game_name(data);} catch(e) { _log("Error calling: error_count_game_name: " + e);}
        }
        else {
            _log("SUCCESS::game_count_game_name_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_name(data);} catch(e) { _log("Error calling: handle_count_game_name: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_org_id: function
    (
        org_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'count'
                + "/by-org-id"
                + "/@org_id/" + org_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_org_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_count_game_org_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_org_id(data);} catch(e) { _log("Error calling: error_count_game_org_id: " + e);}
        }
        else {
            _log("SUCCESS::game_count_game_org_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_org_id(data);} catch(e) { _log("Error calling: handle_count_game_org_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_app_id: function
    (
        app_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'count'
                + "/by-app-id"
                + "/@app_id/" + app_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_app_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_count_game_app_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_app_id(data);} catch(e) { _log("Error calling: error_count_game_app_id: " + e);}
        }
        else {
            _log("SUCCESS::game_count_game_app_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_app_id(data);} catch(e) { _log("Error calling: handle_count_game_app_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_org_id_app_id: function
    (
        org_id,
        app_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'count'
                + "/by-org-id/by-app-id"
                + "/@org_id/" + org_id            
                + "/@app_id/" + app_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_org_id_app_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_count_game_org_id_app_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_org_id_app_id(data);} catch(e) { _log("Error calling: error_count_game_org_id_app_id: " + e);}
        }
        else {
            _log("SUCCESS::game_count_game_org_id_app_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_org_id_app_id(data);} catch(e) { _log("Error calling: handle_count_game_org_id_app_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_browse_game_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_filter(data);} catch(e) { _log("Error calling: error_browse_game_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_browse_game_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_filter(data);} catch(e) { _log("Error calling: handle_browse_game_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_uuid: function
    (
        status,
        code,
        display_name,
        name,
        date_modified,
        org_id,
        uuid,
        app_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@org_id": org_id
            , "@uuid": uuid
            , "@app_id": app_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_set_game_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_uuid(data);} catch(e) { _log("Error calling: error_set_game_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_set_game_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_uuid(data);} catch(e) { _log("Error calling: handle_set_game_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_code: function
    (
        status,
        code,
        display_name,
        name,
        date_modified,
        org_id,
        uuid,
        app_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'set'
                + "/by-code"
                + "/@code/" + code            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@org_id": org_id
            , "@uuid": uuid
            , "@app_id": app_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_set_game_code_callback", true);
            // call a method that can be inline callback
            try {error_set_game_code(data);} catch(e) { _log("Error calling: error_set_game_code: " + e);}
        }
        else {
            _log("SUCCESS::game_set_game_code_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_code(data);} catch(e) { _log("Error calling: handle_set_game_code: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_name: function
    (
        status,
        code,
        display_name,
        name,
        date_modified,
        org_id,
        uuid,
        app_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'set'
                + "/by-name"
                + "/@name/" + name            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@org_id": org_id
            , "@uuid": uuid
            , "@app_id": app_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_name_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_set_game_name_callback", true);
            // call a method that can be inline callback
            try {error_set_game_name(data);} catch(e) { _log("Error calling: error_set_game_name: " + e);}
        }
        else {
            _log("SUCCESS::game_set_game_name_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_name(data);} catch(e) { _log("Error calling: handle_set_game_name: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_org_id: function
    (
        status,
        code,
        display_name,
        name,
        date_modified,
        org_id,
        uuid,
        app_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'set'
                + "/by-org-id"
                + "/@org_id/" + org_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@org_id": org_id
            , "@uuid": uuid
            , "@app_id": app_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_org_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_set_game_org_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_org_id(data);} catch(e) { _log("Error calling: error_set_game_org_id: " + e);}
        }
        else {
            _log("SUCCESS::game_set_game_org_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_org_id(data);} catch(e) { _log("Error calling: handle_set_game_org_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_app_id: function
    (
        status,
        code,
        display_name,
        name,
        date_modified,
        org_id,
        uuid,
        app_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'set'
                + "/by-app-id"
                + "/@app_id/" + app_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@org_id": org_id
            , "@uuid": uuid
            , "@app_id": app_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_app_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_set_game_app_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_app_id(data);} catch(e) { _log("Error calling: error_set_game_app_id: " + e);}
        }
        else {
            _log("SUCCESS::game_set_game_app_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_app_id(data);} catch(e) { _log("Error calling: handle_set_game_app_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_org_id_app_id: function
    (
        status,
        code,
        display_name,
        name,
        date_modified,
        org_id,
        uuid,
        app_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'set'
                + "/by-org-id/by-app-id"
                + "/@org_id/" + org_id            
                + "/@app_id/" + app_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@org_id": org_id
            , "@uuid": uuid
            , "@app_id": app_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_org_id_app_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_set_game_org_id_app_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_org_id_app_id(data);} catch(e) { _log("Error calling: error_set_game_org_id_app_id: " + e);}
        }
        else {
            _log("SUCCESS::game_set_game_org_id_app_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_org_id_app_id(data);} catch(e) { _log("Error calling: handle_set_game_org_id_app_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_del_game_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_uuid(data);} catch(e) { _log("Error calling: error_del_game_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_del_game_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_uuid(data);} catch(e) { _log("Error calling: handle_del_game_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'del'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_del_game_code_callback", true);
            // call a method that can be inline callback
            try {error_del_game_code(data);} catch(e) { _log("Error calling: error_del_game_code: " + e);}
        }
        else {
            _log("SUCCESS::game_del_game_code_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_code(data);} catch(e) { _log("Error calling: handle_del_game_code: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_name: function
    (
        name,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'del'
                + "/by-name"
                + "/@name/" + name            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_name_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_del_game_name_callback", true);
            // call a method that can be inline callback
            try {error_del_game_name(data);} catch(e) { _log("Error calling: error_del_game_name: " + e);}
        }
        else {
            _log("SUCCESS::game_del_game_name_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_name(data);} catch(e) { _log("Error calling: handle_del_game_name: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_org_id: function
    (
        org_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'del'
                + "/by-org-id"
                + "/@org_id/" + org_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_org_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_del_game_org_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_org_id(data);} catch(e) { _log("Error calling: error_del_game_org_id: " + e);}
        }
        else {
            _log("SUCCESS::game_del_game_org_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_org_id(data);} catch(e) { _log("Error calling: handle_del_game_org_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_app_id: function
    (
        app_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'del'
                + "/by-app-id"
                + "/@app_id/" + app_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_app_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_del_game_app_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_app_id(data);} catch(e) { _log("Error calling: error_del_game_app_id: " + e);}
        }
        else {
            _log("SUCCESS::game_del_game_app_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_app_id(data);} catch(e) { _log("Error calling: handle_del_game_app_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_org_id_app_id: function
    (
        org_id,
        app_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'del'
                + "/by-org-id/by-app-id"
                + "/@org_id/" + org_id            
                + "/@app_id/" + app_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_org_id_app_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_del_game_org_id_app_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_org_id_app_id(data);} catch(e) { _log("Error calling: error_del_game_org_id_app_id: " + e);}
        }
        else {
            _log("SUCCESS::game_del_game_org_id_app_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_org_id_app_id(data);} catch(e) { _log("Error calling: handle_del_game_org_id_app_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_get_game_callback", true);
            // call a method that can be inline callback
            try {error_get_game(data);} catch(e) { _log("Error calling: error_get_game: " + e);}
        }
        else {
            _log("SUCCESS::game_get_game_callback", false);
            // call a method that can be inline callback
            try {handle_get_game(data);} catch(e) { _log("Error calling: handle_get_game: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_get_game_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_uuid(data);} catch(e) { _log("Error calling: error_get_game_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_get_game_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_uuid(data);} catch(e) { _log("Error calling: handle_get_game_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'get'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_get_game_code_callback", true);
            // call a method that can be inline callback
            try {error_get_game_code(data);} catch(e) { _log("Error calling: error_get_game_code: " + e);}
        }
        else {
            _log("SUCCESS::game_get_game_code_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_code(data);} catch(e) { _log("Error calling: handle_get_game_code: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_name: function
    (
        name,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'get'
                + "/by-name"
                + "/@name/" + name            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_name_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_get_game_name_callback", true);
            // call a method that can be inline callback
            try {error_get_game_name(data);} catch(e) { _log("Error calling: error_get_game_name: " + e);}
        }
        else {
            _log("SUCCESS::game_get_game_name_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_name(data);} catch(e) { _log("Error calling: handle_get_game_name: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_org_id: function
    (
        org_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'get'
                + "/by-org-id"
                + "/@org_id/" + org_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_org_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_get_game_org_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_org_id(data);} catch(e) { _log("Error calling: error_get_game_org_id: " + e);}
        }
        else {
            _log("SUCCESS::game_get_game_org_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_org_id(data);} catch(e) { _log("Error calling: handle_get_game_org_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_app_id: function
    (
        app_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'get'
                + "/by-app-id"
                + "/@app_id/" + app_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_app_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_get_game_app_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_app_id(data);} catch(e) { _log("Error calling: error_get_game_app_id: " + e);}
        }
        else {
            _log("SUCCESS::game_get_game_app_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_app_id(data);} catch(e) { _log("Error calling: handle_get_game_app_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_org_id_app_id: function
    (
        org_id,
        app_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_service + 'get'
                + "/by-org-id/by-app-id"
                + "/@org_id/" + org_id            
                + "/@app_id/" + app_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_org_id_app_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_get_game_org_id_app_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_org_id_app_id(data);} catch(e) { _log("Error calling: error_get_game_org_id_app_id: " + e);}
        }
        else {
            _log("SUCCESS::game_get_game_org_id_app_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_org_id_app_id(data);} catch(e) { _log("Error calling: handle_get_game_org_id_app_id: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_category = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_category.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_category: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_category_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_count_game_category_callback", true);
            // call a method that can be inline callback
            try {error_count_game_category(data);} catch(e) { _log("Error calling: error_count_game_category: " + e);}
        }
        else {
            _log("SUCCESS::game_category_count_game_category_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_category(data);} catch(e) { _log("Error calling: handle_count_game_category: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_category_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_category_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_count_game_category_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_category_uuid(data);} catch(e) { _log("Error calling: error_count_game_category_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_category_count_game_category_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_category_uuid(data);} catch(e) { _log("Error calling: handle_count_game_category_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_category_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_service + 'count'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_category_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_count_game_category_code_callback", true);
            // call a method that can be inline callback
            try {error_count_game_category_code(data);} catch(e) { _log("Error calling: error_count_game_category_code: " + e);}
        }
        else {
            _log("SUCCESS::game_category_count_game_category_code_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_category_code(data);} catch(e) { _log("Error calling: handle_count_game_category_code: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_category_name: function
    (
        name,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_service + 'count'
                + "/by-name"
                + "/@name/" + name            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_category_name_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_count_game_category_name_callback", true);
            // call a method that can be inline callback
            try {error_count_game_category_name(data);} catch(e) { _log("Error calling: error_count_game_category_name: " + e);}
        }
        else {
            _log("SUCCESS::game_category_count_game_category_name_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_category_name(data);} catch(e) { _log("Error calling: handle_count_game_category_name: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_category_org_id: function
    (
        org_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_service + 'count'
                + "/by-org-id"
                + "/@org_id/" + org_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_category_org_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_count_game_category_org_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_category_org_id(data);} catch(e) { _log("Error calling: error_count_game_category_org_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_count_game_category_org_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_category_org_id(data);} catch(e) { _log("Error calling: handle_count_game_category_org_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_category_type_id: function
    (
        type_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_service + 'count'
                + "/by-type-id"
                + "/@type_id/" + type_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_category_type_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_count_game_category_type_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_category_type_id(data);} catch(e) { _log("Error calling: error_count_game_category_type_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_count_game_category_type_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_category_type_id(data);} catch(e) { _log("Error calling: handle_count_game_category_type_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_category_org_id_type_id: function
    (
        org_id,
        type_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_service + 'count'
                + "/by-org-id/by-type-id"
                + "/@org_id/" + org_id            
                + "/@type_id/" + type_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_category_org_id_type_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_count_game_category_org_id_type_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_category_org_id_type_id(data);} catch(e) { _log("Error calling: error_count_game_category_org_id_type_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_count_game_category_org_id_type_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_category_org_id_type_id(data);} catch(e) { _log("Error calling: handle_count_game_category_org_id_type_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_category_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_category_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_browse_game_category_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_category_filter(data);} catch(e) { _log("Error calling: error_browse_game_category_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_category_browse_game_category_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_category_filter(data);} catch(e) { _log("Error calling: handle_browse_game_category_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_category_uuid: function
    (
        status,
        code,
        display_name,
        name,
        date_modified,
        type_id,
        org_id,
        uuid,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@type_id": type_id
            , "@org_id": org_id
            , "@uuid": uuid
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_category_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_set_game_category_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_category_uuid(data);} catch(e) { _log("Error calling: error_set_game_category_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_category_set_game_category_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_category_uuid(data);} catch(e) { _log("Error calling: handle_set_game_category_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_category_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_category_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_del_game_category_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_category_uuid(data);} catch(e) { _log("Error calling: error_del_game_category_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_category_del_game_category_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_category_uuid(data);} catch(e) { _log("Error calling: handle_del_game_category_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_category_code_org_id: function
    (
        code,
        org_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_service + 'del'
                + "/by-code/by-org-id"
                + "/@code/" + code            
                + "/@org_id/" + org_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_category_code_org_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_del_game_category_code_org_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_category_code_org_id(data);} catch(e) { _log("Error calling: error_del_game_category_code_org_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_del_game_category_code_org_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_category_code_org_id(data);} catch(e) { _log("Error calling: handle_del_game_category_code_org_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_category_code_org_id_type_id: function
    (
        code,
        org_id,
        type_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_service + 'del'
                + "/by-code/by-org-id/by-type-id"
                + "/@code/" + code            
                + "/@org_id/" + org_id            
                + "/@type_id/" + type_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_category_code_org_id_type_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_del_game_category_code_org_id_type_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_category_code_org_id_type_id(data);} catch(e) { _log("Error calling: error_del_game_category_code_org_id_type_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_del_game_category_code_org_id_type_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_category_code_org_id_type_id(data);} catch(e) { _log("Error calling: handle_del_game_category_code_org_id_type_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_category: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_category_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_get_game_category_callback", true);
            // call a method that can be inline callback
            try {error_get_game_category(data);} catch(e) { _log("Error calling: error_get_game_category: " + e);}
        }
        else {
            _log("SUCCESS::game_category_get_game_category_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_category(data);} catch(e) { _log("Error calling: handle_get_game_category: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_category_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_category_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_get_game_category_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_category_uuid(data);} catch(e) { _log("Error calling: error_get_game_category_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_category_get_game_category_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_category_uuid(data);} catch(e) { _log("Error calling: handle_get_game_category_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_category_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_service + 'get'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_category_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_get_game_category_code_callback", true);
            // call a method that can be inline callback
            try {error_get_game_category_code(data);} catch(e) { _log("Error calling: error_get_game_category_code: " + e);}
        }
        else {
            _log("SUCCESS::game_category_get_game_category_code_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_category_code(data);} catch(e) { _log("Error calling: handle_get_game_category_code: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_category_name: function
    (
        name,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_service + 'get'
                + "/by-name"
                + "/@name/" + name            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_category_name_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_get_game_category_name_callback", true);
            // call a method that can be inline callback
            try {error_get_game_category_name(data);} catch(e) { _log("Error calling: error_get_game_category_name: " + e);}
        }
        else {
            _log("SUCCESS::game_category_get_game_category_name_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_category_name(data);} catch(e) { _log("Error calling: handle_get_game_category_name: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_category_org_id: function
    (
        org_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_service + 'get'
                + "/by-org-id"
                + "/@org_id/" + org_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_category_org_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_get_game_category_org_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_category_org_id(data);} catch(e) { _log("Error calling: error_get_game_category_org_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_get_game_category_org_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_category_org_id(data);} catch(e) { _log("Error calling: handle_get_game_category_org_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_category_type_id: function
    (
        type_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_service + 'get'
                + "/by-type-id"
                + "/@type_id/" + type_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_category_type_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_get_game_category_type_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_category_type_id(data);} catch(e) { _log("Error calling: error_get_game_category_type_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_get_game_category_type_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_category_type_id(data);} catch(e) { _log("Error calling: handle_get_game_category_type_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_category_org_id_type_id: function
    (
        org_id,
        type_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_service + 'get'
                + "/by-org-id/by-type-id"
                + "/@org_id/" + org_id            
                + "/@type_id/" + type_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_category_org_id_type_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_get_game_category_org_id_type_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_category_org_id_type_id(data);} catch(e) { _log("Error calling: error_get_game_category_org_id_type_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_get_game_category_org_id_type_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_category_org_id_type_id(data);} catch(e) { _log("Error calling: handle_get_game_category_org_id_type_id: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_category_tree = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_category_tree.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_category_tree: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_tree_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_category_tree_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_tree_count_game_category_tree_callback", true);
            // call a method that can be inline callback
            try {error_count_game_category_tree(data);} catch(e) { _log("Error calling: error_count_game_category_tree: " + e);}
        }
        else {
            _log("SUCCESS::game_category_tree_count_game_category_tree_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_category_tree(data);} catch(e) { _log("Error calling: handle_count_game_category_tree: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_category_tree_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_tree_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_category_tree_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_tree_count_game_category_tree_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_category_tree_uuid(data);} catch(e) { _log("Error calling: error_count_game_category_tree_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_category_tree_count_game_category_tree_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_category_tree_uuid(data);} catch(e) { _log("Error calling: handle_count_game_category_tree_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_category_tree_parent_id: function
    (
        parent_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_tree_service + 'count'
                + "/by-parent-id"
                + "/@parent_id/" + parent_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_category_tree_parent_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_tree_count_game_category_tree_parent_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_category_tree_parent_id(data);} catch(e) { _log("Error calling: error_count_game_category_tree_parent_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_tree_count_game_category_tree_parent_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_category_tree_parent_id(data);} catch(e) { _log("Error calling: handle_count_game_category_tree_parent_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_category_tree_category_id: function
    (
        category_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_tree_service + 'count'
                + "/by-category-id"
                + "/@category_id/" + category_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_category_tree_category_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_tree_count_game_category_tree_category_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_category_tree_category_id(data);} catch(e) { _log("Error calling: error_count_game_category_tree_category_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_tree_count_game_category_tree_category_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_category_tree_category_id(data);} catch(e) { _log("Error calling: handle_count_game_category_tree_category_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_category_tree_parent_id_category_id: function
    (
        parent_id,
        category_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_tree_service + 'count'
                + "/by-parent-id/by-category-id"
                + "/@parent_id/" + parent_id            
                + "/@category_id/" + category_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_category_tree_parent_id_category_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_tree_count_game_category_tree_parent_id_category_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_category_tree_parent_id_category_id(data);} catch(e) { _log("Error calling: error_count_game_category_tree_parent_id_category_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_tree_count_game_category_tree_parent_id_category_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_category_tree_parent_id_category_id(data);} catch(e) { _log("Error calling: handle_count_game_category_tree_parent_id_category_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_category_tree_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_tree_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_category_tree_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_tree_browse_game_category_tree_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_category_tree_filter(data);} catch(e) { _log("Error calling: error_browse_game_category_tree_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_category_tree_browse_game_category_tree_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_category_tree_filter(data);} catch(e) { _log("Error calling: handle_browse_game_category_tree_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_category_tree_uuid: function
    (
        status,
        parent_id,
        uuid,
        date_modified,
        active,
        date_created,
        category_id,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_tree_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@parent_id": parent_id
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@active": active
            , "@date_created": date_created
            , "@category_id": category_id
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_category_tree_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_tree_set_game_category_tree_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_category_tree_uuid(data);} catch(e) { _log("Error calling: error_set_game_category_tree_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_category_tree_set_game_category_tree_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_category_tree_uuid(data);} catch(e) { _log("Error calling: handle_set_game_category_tree_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_category_tree_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_tree_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_category_tree_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_tree_del_game_category_tree_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_category_tree_uuid(data);} catch(e) { _log("Error calling: error_del_game_category_tree_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_category_tree_del_game_category_tree_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_category_tree_uuid(data);} catch(e) { _log("Error calling: handle_del_game_category_tree_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_category_tree_parent_id: function
    (
        parent_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_tree_service + 'del'
                + "/by-parent-id"
                + "/@parent_id/" + parent_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_category_tree_parent_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_tree_del_game_category_tree_parent_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_category_tree_parent_id(data);} catch(e) { _log("Error calling: error_del_game_category_tree_parent_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_tree_del_game_category_tree_parent_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_category_tree_parent_id(data);} catch(e) { _log("Error calling: handle_del_game_category_tree_parent_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_category_tree_category_id: function
    (
        category_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_tree_service + 'del'
                + "/by-category-id"
                + "/@category_id/" + category_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_category_tree_category_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_tree_del_game_category_tree_category_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_category_tree_category_id(data);} catch(e) { _log("Error calling: error_del_game_category_tree_category_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_tree_del_game_category_tree_category_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_category_tree_category_id(data);} catch(e) { _log("Error calling: handle_del_game_category_tree_category_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_category_tree_parent_id_category_id: function
    (
        parent_id,
        category_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_tree_service + 'del'
                + "/by-parent-id/by-category-id"
                + "/@parent_id/" + parent_id            
                + "/@category_id/" + category_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_category_tree_parent_id_category_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_tree_del_game_category_tree_parent_id_category_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_category_tree_parent_id_category_id(data);} catch(e) { _log("Error calling: error_del_game_category_tree_parent_id_category_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_tree_del_game_category_tree_parent_id_category_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_category_tree_parent_id_category_id(data);} catch(e) { _log("Error calling: handle_del_game_category_tree_parent_id_category_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_category_tree: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_tree_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_category_tree_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_tree_get_game_category_tree_callback", true);
            // call a method that can be inline callback
            try {error_get_game_category_tree(data);} catch(e) { _log("Error calling: error_get_game_category_tree: " + e);}
        }
        else {
            _log("SUCCESS::game_category_tree_get_game_category_tree_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_category_tree(data);} catch(e) { _log("Error calling: handle_get_game_category_tree: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_category_tree_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_tree_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_category_tree_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_tree_get_game_category_tree_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_category_tree_uuid(data);} catch(e) { _log("Error calling: error_get_game_category_tree_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_category_tree_get_game_category_tree_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_category_tree_uuid(data);} catch(e) { _log("Error calling: handle_get_game_category_tree_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_category_tree_parent_id: function
    (
        parent_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_tree_service + 'get'
                + "/by-parent-id"
                + "/@parent_id/" + parent_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_category_tree_parent_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_tree_get_game_category_tree_parent_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_category_tree_parent_id(data);} catch(e) { _log("Error calling: error_get_game_category_tree_parent_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_tree_get_game_category_tree_parent_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_category_tree_parent_id(data);} catch(e) { _log("Error calling: handle_get_game_category_tree_parent_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_category_tree_category_id: function
    (
        category_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_tree_service + 'get'
                + "/by-category-id"
                + "/@category_id/" + category_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_category_tree_category_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_tree_get_game_category_tree_category_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_category_tree_category_id(data);} catch(e) { _log("Error calling: error_get_game_category_tree_category_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_tree_get_game_category_tree_category_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_category_tree_category_id(data);} catch(e) { _log("Error calling: handle_get_game_category_tree_category_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_category_tree_parent_id_category_id: function
    (
        parent_id,
        category_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_tree_service + 'get'
                + "/by-parent-id/by-category-id"
                + "/@parent_id/" + parent_id            
                + "/@category_id/" + category_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_category_tree_parent_id_category_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_tree_get_game_category_tree_parent_id_category_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_category_tree_parent_id_category_id(data);} catch(e) { _log("Error calling: error_get_game_category_tree_parent_id_category_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_tree_get_game_category_tree_parent_id_category_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_category_tree_parent_id_category_id(data);} catch(e) { _log("Error calling: handle_get_game_category_tree_parent_id_category_id: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_category_assoc = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_category_assoc.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_category_assoc: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_assoc_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_category_assoc_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_assoc_count_game_category_assoc_callback", true);
            // call a method that can be inline callback
            try {error_count_game_category_assoc(data);} catch(e) { _log("Error calling: error_count_game_category_assoc: " + e);}
        }
        else {
            _log("SUCCESS::game_category_assoc_count_game_category_assoc_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_category_assoc(data);} catch(e) { _log("Error calling: handle_count_game_category_assoc: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_category_assoc_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_assoc_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_category_assoc_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_assoc_count_game_category_assoc_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_category_assoc_uuid(data);} catch(e) { _log("Error calling: error_count_game_category_assoc_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_category_assoc_count_game_category_assoc_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_category_assoc_uuid(data);} catch(e) { _log("Error calling: handle_count_game_category_assoc_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_category_assoc_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_assoc_service + 'count'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_category_assoc_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_assoc_count_game_category_assoc_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_category_assoc_game_id(data);} catch(e) { _log("Error calling: error_count_game_category_assoc_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_assoc_count_game_category_assoc_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_category_assoc_game_id(data);} catch(e) { _log("Error calling: handle_count_game_category_assoc_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_category_assoc_category_id: function
    (
        category_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_assoc_service + 'count'
                + "/by-category-id"
                + "/@category_id/" + category_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_category_assoc_category_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_assoc_count_game_category_assoc_category_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_category_assoc_category_id(data);} catch(e) { _log("Error calling: error_count_game_category_assoc_category_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_assoc_count_game_category_assoc_category_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_category_assoc_category_id(data);} catch(e) { _log("Error calling: handle_count_game_category_assoc_category_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_category_assoc_game_id_category_id: function
    (
        game_id,
        category_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_assoc_service + 'count'
                + "/by-game-id/by-category-id"
                + "/@game_id/" + game_id            
                + "/@category_id/" + category_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_category_assoc_game_id_category_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_assoc_count_game_category_assoc_game_id_category_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_category_assoc_game_id_category_id(data);} catch(e) { _log("Error calling: error_count_game_category_assoc_game_id_category_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_assoc_count_game_category_assoc_game_id_category_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_category_assoc_game_id_category_id(data);} catch(e) { _log("Error calling: handle_count_game_category_assoc_game_id_category_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_category_assoc_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_assoc_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_category_assoc_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_assoc_browse_game_category_assoc_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_category_assoc_filter(data);} catch(e) { _log("Error calling: error_browse_game_category_assoc_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_category_assoc_browse_game_category_assoc_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_category_assoc_filter(data);} catch(e) { _log("Error calling: handle_browse_game_category_assoc_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_category_assoc_uuid: function
    (
        status,
        uuid,
        date_modified,
        active,
        date_created,
        game_id,
        category_id,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_assoc_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@active": active
            , "@date_created": date_created
            , "@game_id": game_id
            , "@category_id": category_id
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_category_assoc_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_assoc_set_game_category_assoc_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_category_assoc_uuid(data);} catch(e) { _log("Error calling: error_set_game_category_assoc_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_category_assoc_set_game_category_assoc_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_category_assoc_uuid(data);} catch(e) { _log("Error calling: handle_set_game_category_assoc_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_category_assoc_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_assoc_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_category_assoc_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_assoc_del_game_category_assoc_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_category_assoc_uuid(data);} catch(e) { _log("Error calling: error_del_game_category_assoc_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_category_assoc_del_game_category_assoc_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_category_assoc_uuid(data);} catch(e) { _log("Error calling: handle_del_game_category_assoc_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_category_assoc: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_assoc_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_category_assoc_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_assoc_get_game_category_assoc_callback", true);
            // call a method that can be inline callback
            try {error_get_game_category_assoc(data);} catch(e) { _log("Error calling: error_get_game_category_assoc: " + e);}
        }
        else {
            _log("SUCCESS::game_category_assoc_get_game_category_assoc_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_category_assoc(data);} catch(e) { _log("Error calling: handle_get_game_category_assoc: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_category_assoc_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_assoc_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_category_assoc_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_assoc_get_game_category_assoc_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_category_assoc_uuid(data);} catch(e) { _log("Error calling: error_get_game_category_assoc_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_category_assoc_get_game_category_assoc_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_category_assoc_uuid(data);} catch(e) { _log("Error calling: handle_get_game_category_assoc_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_category_assoc_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_assoc_service + 'get'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_category_assoc_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_assoc_get_game_category_assoc_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_category_assoc_game_id(data);} catch(e) { _log("Error calling: error_get_game_category_assoc_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_assoc_get_game_category_assoc_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_category_assoc_game_id(data);} catch(e) { _log("Error calling: handle_get_game_category_assoc_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_category_assoc_category_id: function
    (
        category_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_assoc_service + 'get'
                + "/by-category-id"
                + "/@category_id/" + category_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_category_assoc_category_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_assoc_get_game_category_assoc_category_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_category_assoc_category_id(data);} catch(e) { _log("Error calling: error_get_game_category_assoc_category_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_assoc_get_game_category_assoc_category_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_category_assoc_category_id(data);} catch(e) { _log("Error calling: handle_get_game_category_assoc_category_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_category_assoc_game_id_category_id: function
    (
        game_id,
        category_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_category_assoc_service + 'get'
                + "/by-game-id/by-category-id"
                + "/@game_id/" + game_id            
                + "/@category_id/" + category_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_category_assoc_game_id_category_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_category_assoc_get_game_category_assoc_game_id_category_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_category_assoc_game_id_category_id(data);} catch(e) { _log("Error calling: error_get_game_category_assoc_game_id_category_id: " + e);}
        }
        else {
            _log("SUCCESS::game_category_assoc_get_game_category_assoc_game_id_category_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_category_assoc_game_id_category_id(data);} catch(e) { _log("Error calling: handle_get_game_category_assoc_game_id_category_id: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_type = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_type.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_type: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_type_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_type_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_type_count_game_type_callback", true);
            // call a method that can be inline callback
            try {error_count_game_type(data);} catch(e) { _log("Error calling: error_count_game_type: " + e);}
        }
        else {
            _log("SUCCESS::game_type_count_game_type_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_type(data);} catch(e) { _log("Error calling: handle_count_game_type: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_type_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_type_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_type_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_type_count_game_type_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_type_uuid(data);} catch(e) { _log("Error calling: error_count_game_type_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_type_count_game_type_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_type_uuid(data);} catch(e) { _log("Error calling: handle_count_game_type_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_type_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_type_service + 'count'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_type_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_type_count_game_type_code_callback", true);
            // call a method that can be inline callback
            try {error_count_game_type_code(data);} catch(e) { _log("Error calling: error_count_game_type_code: " + e);}
        }
        else {
            _log("SUCCESS::game_type_count_game_type_code_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_type_code(data);} catch(e) { _log("Error calling: handle_count_game_type_code: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_type_name: function
    (
        name,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_type_service + 'count'
                + "/by-name"
                + "/@name/" + name            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_type_name_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_type_count_game_type_name_callback", true);
            // call a method that can be inline callback
            try {error_count_game_type_name(data);} catch(e) { _log("Error calling: error_count_game_type_name: " + e);}
        }
        else {
            _log("SUCCESS::game_type_count_game_type_name_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_type_name(data);} catch(e) { _log("Error calling: handle_count_game_type_name: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_type_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_type_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_type_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_type_browse_game_type_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_type_filter(data);} catch(e) { _log("Error calling: error_browse_game_type_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_type_browse_game_type_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_type_filter(data);} catch(e) { _log("Error calling: handle_browse_game_type_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_type_uuid: function
    (
        status,
        code,
        display_name,
        name,
        date_modified,
        uuid,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_type_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@uuid": uuid
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_type_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_type_set_game_type_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_type_uuid(data);} catch(e) { _log("Error calling: error_set_game_type_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_type_set_game_type_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_type_uuid(data);} catch(e) { _log("Error calling: handle_set_game_type_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_type_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_type_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_type_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_type_del_game_type_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_type_uuid(data);} catch(e) { _log("Error calling: error_del_game_type_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_type_del_game_type_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_type_uuid(data);} catch(e) { _log("Error calling: handle_del_game_type_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_type: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_type_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_type_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_type_get_game_type_callback", true);
            // call a method that can be inline callback
            try {error_get_game_type(data);} catch(e) { _log("Error calling: error_get_game_type: " + e);}
        }
        else {
            _log("SUCCESS::game_type_get_game_type_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_type(data);} catch(e) { _log("Error calling: handle_get_game_type: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_type_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_type_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_type_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_type_get_game_type_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_type_uuid(data);} catch(e) { _log("Error calling: error_get_game_type_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_type_get_game_type_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_type_uuid(data);} catch(e) { _log("Error calling: handle_get_game_type_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_type_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_type_service + 'get'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_type_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_type_get_game_type_code_callback", true);
            // call a method that can be inline callback
            try {error_get_game_type_code(data);} catch(e) { _log("Error calling: error_get_game_type_code: " + e);}
        }
        else {
            _log("SUCCESS::game_type_get_game_type_code_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_type_code(data);} catch(e) { _log("Error calling: handle_get_game_type_code: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_type_name: function
    (
        name,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_type_service + 'get'
                + "/by-name"
                + "/@name/" + name            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_type_name_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_type_get_game_type_name_callback", true);
            // call a method that can be inline callback
            try {error_get_game_type_name(data);} catch(e) { _log("Error calling: error_get_game_type_name: " + e);}
        }
        else {
            _log("SUCCESS::game_type_get_game_type_name_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_type_name(data);} catch(e) { _log("Error calling: handle_get_game_type_name: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.profile_game = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.profile_game.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_profile_game: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_count_profile_game_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game(data);} catch(e) { _log("Error calling: error_count_profile_game: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_count_profile_game_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game(data);} catch(e) { _log("Error calling: handle_count_profile_game: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_profile_game_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_count_profile_game_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game_uuid(data);} catch(e) { _log("Error calling: error_count_profile_game_uuid: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_count_profile_game_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game_uuid(data);} catch(e) { _log("Error calling: handle_count_profile_game_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_profile_game_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_service + 'count'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_count_profile_game_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game_game_id(data);} catch(e) { _log("Error calling: error_count_profile_game_game_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_count_profile_game_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game_game_id(data);} catch(e) { _log("Error calling: handle_count_profile_game_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_profile_game_profile_id: function
    (
        profile_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_service + 'count'
                + "/by-profile-id"
                + "/@profile_id/" + profile_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_count_profile_game_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game_profile_id(data);} catch(e) { _log("Error calling: error_count_profile_game_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_count_profile_game_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game_profile_id(data);} catch(e) { _log("Error calling: handle_count_profile_game_profile_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_profile_game_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_service + 'count'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_count_profile_game_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game_profile_id_game_id(data);} catch(e) { _log("Error calling: error_count_profile_game_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_count_profile_game_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_count_profile_game_profile_id_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_profile_game_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_profile_game_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_browse_profile_game_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_profile_game_filter(data);} catch(e) { _log("Error calling: error_browse_profile_game_filter: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_browse_profile_game_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_profile_game_filter(data);} catch(e) { _log("Error calling: handle_browse_profile_game_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_profile_game_uuid: function
    (
        status,
        type_id,
        profile_id,
        game_profile,
        active,
        game_id,
        uuid,
        date_modified,
        profile_version,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@type_id": type_id
            , "@profile_id": profile_id
            , "@game_profile": game_profile
            , "@active": active
            , "@game_id": game_id
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@profile_version": profile_version
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_profile_game_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_set_profile_game_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_profile_game_uuid(data);} catch(e) { _log("Error calling: error_set_profile_game_uuid: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_set_profile_game_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_profile_game_uuid(data);} catch(e) { _log("Error calling: handle_set_profile_game_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_profile_game_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_profile_game_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_del_profile_game_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_profile_game_uuid(data);} catch(e) { _log("Error calling: error_del_profile_game_uuid: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_del_profile_game_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_profile_game_uuid(data);} catch(e) { _log("Error calling: handle_del_profile_game_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_profile_game: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_profile_game_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_get_profile_game_callback", true);
            // call a method that can be inline callback
            try {error_get_profile_game(data);} catch(e) { _log("Error calling: error_get_profile_game: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_get_profile_game_callback", false);
            // call a method that can be inline callback
            try {handle_get_profile_game(data);} catch(e) { _log("Error calling: handle_get_profile_game: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_profile_game_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_profile_game_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_get_profile_game_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_profile_game_uuid(data);} catch(e) { _log("Error calling: error_get_profile_game_uuid: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_get_profile_game_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_profile_game_uuid(data);} catch(e) { _log("Error calling: handle_get_profile_game_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_profile_game_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_service + 'get'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_profile_game_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_get_profile_game_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_profile_game_game_id(data);} catch(e) { _log("Error calling: error_get_profile_game_game_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_get_profile_game_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_profile_game_game_id(data);} catch(e) { _log("Error calling: handle_get_profile_game_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_profile_game_profile_id: function
    (
        profile_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_service + 'get'
                + "/by-profile-id"
                + "/@profile_id/" + profile_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_profile_game_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_get_profile_game_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_get_profile_game_profile_id(data);} catch(e) { _log("Error calling: error_get_profile_game_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_get_profile_game_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_profile_game_profile_id(data);} catch(e) { _log("Error calling: handle_get_profile_game_profile_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_profile_game_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_service + 'get'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_profile_game_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_get_profile_game_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_profile_game_profile_id_game_id(data);} catch(e) { _log("Error calling: error_get_profile_game_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_get_profile_game_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_profile_game_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_get_profile_game_profile_id_game_id: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_network = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_network.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_network: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_network_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_count_game_network_callback", true);
            // call a method that can be inline callback
            try {error_count_game_network(data);} catch(e) { _log("Error calling: error_count_game_network: " + e);}
        }
        else {
            _log("SUCCESS::game_network_count_game_network_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_network(data);} catch(e) { _log("Error calling: handle_count_game_network: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_network_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_network_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_count_game_network_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_network_uuid(data);} catch(e) { _log("Error calling: error_count_game_network_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_network_count_game_network_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_network_uuid(data);} catch(e) { _log("Error calling: handle_count_game_network_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_network_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_service + 'count'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_network_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_count_game_network_code_callback", true);
            // call a method that can be inline callback
            try {error_count_game_network_code(data);} catch(e) { _log("Error calling: error_count_game_network_code: " + e);}
        }
        else {
            _log("SUCCESS::game_network_count_game_network_code_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_network_code(data);} catch(e) { _log("Error calling: handle_count_game_network_code: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_network_uuid_type: function
    (
        uuid,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_service + 'count'
                + "/by-uuid/by-type"
                + "/@uuid/" + uuid            
                + "/@type/" + type            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_network_uuid_type_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_count_game_network_uuid_type_callback", true);
            // call a method that can be inline callback
            try {error_count_game_network_uuid_type(data);} catch(e) { _log("Error calling: error_count_game_network_uuid_type: " + e);}
        }
        else {
            _log("SUCCESS::game_network_count_game_network_uuid_type_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_network_uuid_type(data);} catch(e) { _log("Error calling: handle_count_game_network_uuid_type: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_network_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_network_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_browse_game_network_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_network_filter(data);} catch(e) { _log("Error calling: error_browse_game_network_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_network_browse_game_network_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_network_filter(data);} catch(e) { _log("Error calling: handle_browse_game_network_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_network_uuid: function
    (
        status,
        code,
        display_name,
        name,
        date_modified,
        url,
        data,
        uuid,
        secret,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@data": data
            , "@uuid": uuid
            , "@secret": secret
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_network_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_set_game_network_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_network_uuid(data);} catch(e) { _log("Error calling: error_set_game_network_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_network_set_game_network_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_network_uuid(data);} catch(e) { _log("Error calling: handle_set_game_network_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_network_code: function
    (
        status,
        code,
        display_name,
        name,
        date_modified,
        url,
        data,
        uuid,
        secret,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_service + 'set'
                + "/by-code"
                + "/@code/" + code            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@data": data
            , "@uuid": uuid
            , "@secret": secret
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_network_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_set_game_network_code_callback", true);
            // call a method that can be inline callback
            try {error_set_game_network_code(data);} catch(e) { _log("Error calling: error_set_game_network_code: " + e);}
        }
        else {
            _log("SUCCESS::game_network_set_game_network_code_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_network_code(data);} catch(e) { _log("Error calling: handle_set_game_network_code: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_network_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_network_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_del_game_network_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_network_uuid(data);} catch(e) { _log("Error calling: error_del_game_network_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_network_del_game_network_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_network_uuid(data);} catch(e) { _log("Error calling: handle_del_game_network_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_network: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_network_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_get_game_network_callback", true);
            // call a method that can be inline callback
            try {error_get_game_network(data);} catch(e) { _log("Error calling: error_get_game_network: " + e);}
        }
        else {
            _log("SUCCESS::game_network_get_game_network_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_network(data);} catch(e) { _log("Error calling: handle_get_game_network: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_network_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_network_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_get_game_network_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_network_uuid(data);} catch(e) { _log("Error calling: error_get_game_network_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_network_get_game_network_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_network_uuid(data);} catch(e) { _log("Error calling: handle_get_game_network_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_network_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_service + 'get'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_network_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_get_game_network_code_callback", true);
            // call a method that can be inline callback
            try {error_get_game_network_code(data);} catch(e) { _log("Error calling: error_get_game_network_code: " + e);}
        }
        else {
            _log("SUCCESS::game_network_get_game_network_code_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_network_code(data);} catch(e) { _log("Error calling: handle_get_game_network_code: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_network_uuid_type: function
    (
        uuid,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_service + 'get'
                + "/by-uuid/by-type"
                + "/@uuid/" + uuid            
                + "/@type/" + type            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_network_uuid_type_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_get_game_network_uuid_type_callback", true);
            // call a method that can be inline callback
            try {error_get_game_network_uuid_type(data);} catch(e) { _log("Error calling: error_get_game_network_uuid_type: " + e);}
        }
        else {
            _log("SUCCESS::game_network_get_game_network_uuid_type_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_network_uuid_type(data);} catch(e) { _log("Error calling: handle_get_game_network_uuid_type: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_network_auth = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_network_auth.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_network_auth: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_auth_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_network_auth_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_auth_count_game_network_auth_callback", true);
            // call a method that can be inline callback
            try {error_count_game_network_auth(data);} catch(e) { _log("Error calling: error_count_game_network_auth: " + e);}
        }
        else {
            _log("SUCCESS::game_network_auth_count_game_network_auth_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_network_auth(data);} catch(e) { _log("Error calling: handle_count_game_network_auth: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_network_auth_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_auth_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_network_auth_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_auth_count_game_network_auth_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_network_auth_uuid(data);} catch(e) { _log("Error calling: error_count_game_network_auth_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_network_auth_count_game_network_auth_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_network_auth_uuid(data);} catch(e) { _log("Error calling: handle_count_game_network_auth_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_network_auth_game_id_game_network_id: function
    (
        game_id,
        game_network_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_auth_service + 'count'
                + "/by-game-id/by-game-network-id"
                + "/@game_id/" + game_id            
                + "/@game_network_id/" + game_network_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_network_auth_game_id_game_network_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_auth_count_game_network_auth_game_id_game_network_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_network_auth_game_id_game_network_id(data);} catch(e) { _log("Error calling: error_count_game_network_auth_game_id_game_network_id: " + e);}
        }
        else {
            _log("SUCCESS::game_network_auth_count_game_network_auth_game_id_game_network_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_network_auth_game_id_game_network_id(data);} catch(e) { _log("Error calling: handle_count_game_network_auth_game_id_game_network_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_network_auth_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_auth_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_network_auth_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_auth_browse_game_network_auth_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_network_auth_filter(data);} catch(e) { _log("Error calling: error_browse_game_network_auth_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_network_auth_browse_game_network_auth_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_network_auth_filter(data);} catch(e) { _log("Error calling: handle_browse_game_network_auth_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_network_auth_uuid: function
    (
        status,
        code,
        display_name,
        name,
        date_modified,
        url,
        data,
        uuid,
        app_id,
        game_network_id,
        secret,
        game_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_auth_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@data": data
            , "@uuid": uuid
            , "@app_id": app_id
            , "@game_network_id": game_network_id
            , "@secret": secret
            , "@game_id": game_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_network_auth_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_auth_set_game_network_auth_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_network_auth_uuid(data);} catch(e) { _log("Error calling: error_set_game_network_auth_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_network_auth_set_game_network_auth_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_network_auth_uuid(data);} catch(e) { _log("Error calling: handle_set_game_network_auth_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_network_auth_game_id_game_network_id: function
    (
        status,
        code,
        display_name,
        name,
        date_modified,
        url,
        data,
        uuid,
        app_id,
        game_network_id,
        secret,
        game_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_auth_service + 'set'
                + "/by-game-id/by-game-network-id"
                + "/@game_id/" + game_id            
                + "/@game_network_id/" + game_network_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@data": data
            , "@uuid": uuid
            , "@app_id": app_id
            , "@game_network_id": game_network_id
            , "@secret": secret
            , "@game_id": game_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_network_auth_game_id_game_network_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_auth_set_game_network_auth_game_id_game_network_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_network_auth_game_id_game_network_id(data);} catch(e) { _log("Error calling: error_set_game_network_auth_game_id_game_network_id: " + e);}
        }
        else {
            _log("SUCCESS::game_network_auth_set_game_network_auth_game_id_game_network_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_network_auth_game_id_game_network_id(data);} catch(e) { _log("Error calling: handle_set_game_network_auth_game_id_game_network_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_network_auth_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_auth_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_network_auth_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_auth_del_game_network_auth_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_network_auth_uuid(data);} catch(e) { _log("Error calling: error_del_game_network_auth_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_network_auth_del_game_network_auth_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_network_auth_uuid(data);} catch(e) { _log("Error calling: handle_del_game_network_auth_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_network_auth: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_auth_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_network_auth_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_auth_get_game_network_auth_callback", true);
            // call a method that can be inline callback
            try {error_get_game_network_auth(data);} catch(e) { _log("Error calling: error_get_game_network_auth: " + e);}
        }
        else {
            _log("SUCCESS::game_network_auth_get_game_network_auth_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_network_auth(data);} catch(e) { _log("Error calling: handle_get_game_network_auth: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_network_auth_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_auth_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_network_auth_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_auth_get_game_network_auth_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_network_auth_uuid(data);} catch(e) { _log("Error calling: error_get_game_network_auth_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_network_auth_get_game_network_auth_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_network_auth_uuid(data);} catch(e) { _log("Error calling: handle_get_game_network_auth_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_network_auth_game_id_game_network_id: function
    (
        game_id,
        game_network_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_network_auth_service + 'get'
                + "/by-game-id/by-game-network-id"
                + "/@game_id/" + game_id            
                + "/@game_network_id/" + game_network_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_network_auth_game_id_game_network_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_network_auth_get_game_network_auth_game_id_game_network_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_network_auth_game_id_game_network_id(data);} catch(e) { _log("Error calling: error_get_game_network_auth_game_id_game_network_id: " + e);}
        }
        else {
            _log("SUCCESS::game_network_auth_get_game_network_auth_game_id_game_network_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_network_auth_game_id_game_network_id(data);} catch(e) { _log("Error calling: handle_get_game_network_auth_game_id_game_network_id: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.profile_game_network = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.profile_game_network.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_profile_game_network: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_network_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_count_profile_game_network_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game_network(data);} catch(e) { _log("Error calling: error_count_profile_game_network: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_count_profile_game_network_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game_network(data);} catch(e) { _log("Error calling: handle_count_profile_game_network: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_profile_game_network_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_network_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_count_profile_game_network_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game_network_uuid(data);} catch(e) { _log("Error calling: error_count_profile_game_network_uuid: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_count_profile_game_network_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game_network_uuid(data);} catch(e) { _log("Error calling: handle_count_profile_game_network_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_profile_game_network_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'count'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_network_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_count_profile_game_network_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game_network_game_id(data);} catch(e) { _log("Error calling: error_count_profile_game_network_game_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_count_profile_game_network_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game_network_game_id(data);} catch(e) { _log("Error calling: handle_count_profile_game_network_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_profile_game_network_profile_id: function
    (
        profile_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'count'
                + "/by-profile-id"
                + "/@profile_id/" + profile_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_network_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_count_profile_game_network_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game_network_profile_id(data);} catch(e) { _log("Error calling: error_count_profile_game_network_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_count_profile_game_network_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game_network_profile_id(data);} catch(e) { _log("Error calling: handle_count_profile_game_network_profile_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_profile_game_network_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'count'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_network_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_count_profile_game_network_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game_network_profile_id_game_id(data);} catch(e) { _log("Error calling: error_count_profile_game_network_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_count_profile_game_network_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game_network_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_count_profile_game_network_profile_id_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_profile_game_network_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'count'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_network_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_count_profile_game_network_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game_network_profile_id_game_id(data);} catch(e) { _log("Error calling: error_count_profile_game_network_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_count_profile_game_network_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game_network_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_count_profile_game_network_profile_id_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_profile_game_network_profile_id_game_id_game_network_id: function
    (
        profile_id,
        game_id,
        game_network_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'count'
                + "/by-profile-id/by-game-id/by-game-network-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@game_network_id/" + game_network_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_network_profile_id_game_id_game_network_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_count_profile_game_network_profile_id_game_id_game_network_id_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game_network_profile_id_game_id_game_network_id(data);} catch(e) { _log("Error calling: error_count_profile_game_network_profile_id_game_id_game_network_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_count_profile_game_network_profile_id_game_id_game_network_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game_network_profile_id_game_id_game_network_id(data);} catch(e) { _log("Error calling: handle_count_profile_game_network_profile_id_game_id_game_network_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_profile_game_network_network_username_game_id_game_network_id: function
    (
        network_username,
        game_id,
        game_network_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'count'
                + "/by-network-username/by-game-id/by-game-network-id"
                + "/@network_username/" + network_username            
                + "/@game_id/" + game_id            
                + "/@game_network_id/" + game_network_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_network_network_username_game_id_game_network_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_count_profile_game_network_network_username_game_id_game_network_id_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game_network_network_username_game_id_game_network_id(data);} catch(e) { _log("Error calling: error_count_profile_game_network_network_username_game_id_game_network_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_count_profile_game_network_network_username_game_id_game_network_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game_network_network_username_game_id_game_network_id(data);} catch(e) { _log("Error calling: handle_count_profile_game_network_network_username_game_id_game_network_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_profile_game_network_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_profile_game_network_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_browse_profile_game_network_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_profile_game_network_filter(data);} catch(e) { _log("Error calling: error_browse_profile_game_network_filter: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_browse_profile_game_network_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_profile_game_network_filter(data);} catch(e) { _log("Error calling: handle_browse_profile_game_network_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_profile_game_network_uuid: function
    (
        status,
        hash,
        profile_id,
        game_network_id,
        network_username,
        active,
        game_id,
        data,
        uuid,
        date_modified,
        network_fullname,
        secret,
        token,
        date_created,
        network_auth,
        type,
        network_user_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@hash": hash
            , "@profile_id": profile_id
            , "@game_network_id": game_network_id
            , "@network_username": network_username
            , "@active": active
            , "@game_id": game_id
            , "@data": data
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@network_fullname": network_fullname
            , "@secret": secret
            , "@token": token
            , "@date_created": date_created
            , "@network_auth": network_auth
            , "@type": type
            , "@network_user_id": network_user_id
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_profile_game_network_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_set_profile_game_network_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_profile_game_network_uuid(data);} catch(e) { _log("Error calling: error_set_profile_game_network_uuid: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_set_profile_game_network_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_profile_game_network_uuid(data);} catch(e) { _log("Error calling: handle_set_profile_game_network_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_profile_game_network_profile_id_game_id: function
    (
        status,
        hash,
        profile_id,
        game_network_id,
        network_username,
        active,
        game_id,
        data,
        uuid,
        date_modified,
        network_fullname,
        secret,
        token,
        date_created,
        network_auth,
        type,
        network_user_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'set'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@hash": hash
            , "@profile_id": profile_id
            , "@game_network_id": game_network_id
            , "@network_username": network_username
            , "@active": active
            , "@game_id": game_id
            , "@data": data
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@network_fullname": network_fullname
            , "@secret": secret
            , "@token": token
            , "@date_created": date_created
            , "@network_auth": network_auth
            , "@type": type
            , "@network_user_id": network_user_id
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_profile_game_network_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_set_profile_game_network_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_profile_game_network_profile_id_game_id(data);} catch(e) { _log("Error calling: error_set_profile_game_network_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_set_profile_game_network_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_profile_game_network_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_set_profile_game_network_profile_id_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_profile_game_network_profile_id_game_id_game_network_id: function
    (
        status,
        hash,
        profile_id,
        game_network_id,
        network_username,
        active,
        game_id,
        data,
        uuid,
        date_modified,
        network_fullname,
        secret,
        token,
        date_created,
        network_auth,
        type,
        network_user_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'set'
                + "/by-profile-id/by-game-id/by-game-network-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@game_network_id/" + game_network_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@hash": hash
            , "@profile_id": profile_id
            , "@game_network_id": game_network_id
            , "@network_username": network_username
            , "@active": active
            , "@game_id": game_id
            , "@data": data
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@network_fullname": network_fullname
            , "@secret": secret
            , "@token": token
            , "@date_created": date_created
            , "@network_auth": network_auth
            , "@type": type
            , "@network_user_id": network_user_id
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_profile_game_network_profile_id_game_id_game_network_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_set_profile_game_network_profile_id_game_id_game_network_id_callback", true);
            // call a method that can be inline callback
            try {error_set_profile_game_network_profile_id_game_id_game_network_id(data);} catch(e) { _log("Error calling: error_set_profile_game_network_profile_id_game_id_game_network_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_set_profile_game_network_profile_id_game_id_game_network_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_profile_game_network_profile_id_game_id_game_network_id(data);} catch(e) { _log("Error calling: handle_set_profile_game_network_profile_id_game_id_game_network_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_profile_game_network_network_username_game_id_game_network_id: function
    (
        status,
        hash,
        profile_id,
        game_network_id,
        network_username,
        active,
        game_id,
        data,
        uuid,
        date_modified,
        network_fullname,
        secret,
        token,
        date_created,
        network_auth,
        type,
        network_user_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'set'
                + "/by-network-username/by-game-id/by-game-network-id"
                + "/@network_username/" + network_username            
                + "/@game_id/" + game_id            
                + "/@game_network_id/" + game_network_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@hash": hash
            , "@profile_id": profile_id
            , "@game_network_id": game_network_id
            , "@network_username": network_username
            , "@active": active
            , "@game_id": game_id
            , "@data": data
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@network_fullname": network_fullname
            , "@secret": secret
            , "@token": token
            , "@date_created": date_created
            , "@network_auth": network_auth
            , "@type": type
            , "@network_user_id": network_user_id
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_profile_game_network_network_username_game_id_game_network_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_set_profile_game_network_network_username_game_id_game_network_id_callback", true);
            // call a method that can be inline callback
            try {error_set_profile_game_network_network_username_game_id_game_network_id(data);} catch(e) { _log("Error calling: error_set_profile_game_network_network_username_game_id_game_network_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_set_profile_game_network_network_username_game_id_game_network_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_profile_game_network_network_username_game_id_game_network_id(data);} catch(e) { _log("Error calling: handle_set_profile_game_network_network_username_game_id_game_network_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_profile_game_network_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_profile_game_network_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_del_profile_game_network_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_profile_game_network_uuid(data);} catch(e) { _log("Error calling: error_del_profile_game_network_uuid: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_del_profile_game_network_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_profile_game_network_uuid(data);} catch(e) { _log("Error calling: handle_del_profile_game_network_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_profile_game_network_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'del'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_profile_game_network_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_del_profile_game_network_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_profile_game_network_profile_id_game_id(data);} catch(e) { _log("Error calling: error_del_profile_game_network_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_del_profile_game_network_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_profile_game_network_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_del_profile_game_network_profile_id_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_profile_game_network_profile_id_game_id_game_network_id: function
    (
        profile_id,
        game_id,
        game_network_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'del'
                + "/by-profile-id/by-game-id/by-game-network-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@game_network_id/" + game_network_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_profile_game_network_profile_id_game_id_game_network_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_del_profile_game_network_profile_id_game_id_game_network_id_callback", true);
            // call a method that can be inline callback
            try {error_del_profile_game_network_profile_id_game_id_game_network_id(data);} catch(e) { _log("Error calling: error_del_profile_game_network_profile_id_game_id_game_network_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_del_profile_game_network_profile_id_game_id_game_network_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_profile_game_network_profile_id_game_id_game_network_id(data);} catch(e) { _log("Error calling: handle_del_profile_game_network_profile_id_game_id_game_network_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_profile_game_network_network_username_game_id_game_network_id: function
    (
        network_username,
        game_id,
        game_network_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'del'
                + "/by-network-username/by-game-id/by-game-network-id"
                + "/@network_username/" + network_username            
                + "/@game_id/" + game_id            
                + "/@game_network_id/" + game_network_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_profile_game_network_network_username_game_id_game_network_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_del_profile_game_network_network_username_game_id_game_network_id_callback", true);
            // call a method that can be inline callback
            try {error_del_profile_game_network_network_username_game_id_game_network_id(data);} catch(e) { _log("Error calling: error_del_profile_game_network_network_username_game_id_game_network_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_del_profile_game_network_network_username_game_id_game_network_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_profile_game_network_network_username_game_id_game_network_id(data);} catch(e) { _log("Error calling: handle_del_profile_game_network_network_username_game_id_game_network_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_profile_game_network: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_profile_game_network_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_get_profile_game_network_callback", true);
            // call a method that can be inline callback
            try {error_get_profile_game_network(data);} catch(e) { _log("Error calling: error_get_profile_game_network: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_get_profile_game_network_callback", false);
            // call a method that can be inline callback
            try {handle_get_profile_game_network(data);} catch(e) { _log("Error calling: handle_get_profile_game_network: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_profile_game_network_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_profile_game_network_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_get_profile_game_network_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_profile_game_network_uuid(data);} catch(e) { _log("Error calling: error_get_profile_game_network_uuid: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_get_profile_game_network_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_profile_game_network_uuid(data);} catch(e) { _log("Error calling: handle_get_profile_game_network_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_profile_game_network_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'get'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_profile_game_network_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_get_profile_game_network_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_profile_game_network_game_id(data);} catch(e) { _log("Error calling: error_get_profile_game_network_game_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_get_profile_game_network_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_profile_game_network_game_id(data);} catch(e) { _log("Error calling: handle_get_profile_game_network_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_profile_game_network_profile_id: function
    (
        profile_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'get'
                + "/by-profile-id"
                + "/@profile_id/" + profile_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_profile_game_network_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_get_profile_game_network_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_get_profile_game_network_profile_id(data);} catch(e) { _log("Error calling: error_get_profile_game_network_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_get_profile_game_network_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_profile_game_network_profile_id(data);} catch(e) { _log("Error calling: handle_get_profile_game_network_profile_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_profile_game_network_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'get'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_profile_game_network_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_get_profile_game_network_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_profile_game_network_profile_id_game_id(data);} catch(e) { _log("Error calling: error_get_profile_game_network_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_get_profile_game_network_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_profile_game_network_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_get_profile_game_network_profile_id_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_profile_game_network_profile_id_game_id_game_network_id: function
    (
        profile_id,
        game_id,
        game_network_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'get'
                + "/by-profile-id/by-game-id/by-game-network-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@game_network_id/" + game_network_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_profile_game_network_profile_id_game_id_game_network_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_get_profile_game_network_profile_id_game_id_game_network_id_callback", true);
            // call a method that can be inline callback
            try {error_get_profile_game_network_profile_id_game_id_game_network_id(data);} catch(e) { _log("Error calling: error_get_profile_game_network_profile_id_game_id_game_network_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_get_profile_game_network_profile_id_game_id_game_network_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_profile_game_network_profile_id_game_id_game_network_id(data);} catch(e) { _log("Error calling: handle_get_profile_game_network_profile_id_game_id_game_network_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_profile_game_network_network_username_game_id_game_network_id: function
    (
        network_username,
        game_id,
        game_network_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_network_service + 'get'
                + "/by-network-username/by-game-id/by-game-network-id"
                + "/@network_username/" + network_username            
                + "/@game_id/" + game_id            
                + "/@game_network_id/" + game_network_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_profile_game_network_network_username_game_id_game_network_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_network_get_profile_game_network_network_username_game_id_game_network_id_callback", true);
            // call a method that can be inline callback
            try {error_get_profile_game_network_network_username_game_id_game_network_id(data);} catch(e) { _log("Error calling: error_get_profile_game_network_network_username_game_id_game_network_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_network_get_profile_game_network_network_username_game_id_game_network_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_profile_game_network_network_username_game_id_game_network_id(data);} catch(e) { _log("Error calling: handle_get_profile_game_network_network_username_game_id_game_network_id: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.profile_game_data_attribute = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.profile_game_data_attribute.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_profile_game_data_attribute: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_data_attribute_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_data_attribute_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_data_attribute_count_profile_game_data_attribute_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game_data_attribute(data);} catch(e) { _log("Error calling: error_count_profile_game_data_attribute: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_data_attribute_count_profile_game_data_attribute_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game_data_attribute(data);} catch(e) { _log("Error calling: handle_count_profile_game_data_attribute: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_profile_game_data_attribute_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_data_attribute_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_data_attribute_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_data_attribute_count_profile_game_data_attribute_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game_data_attribute_uuid(data);} catch(e) { _log("Error calling: error_count_profile_game_data_attribute_uuid: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_data_attribute_count_profile_game_data_attribute_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game_data_attribute_uuid(data);} catch(e) { _log("Error calling: handle_count_profile_game_data_attribute_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_profile_game_data_attribute_profile_id: function
    (
        profile_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_data_attribute_service + 'count'
                + "/by-profile-id"
                + "/@profile_id/" + profile_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_data_attribute_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_data_attribute_count_profile_game_data_attribute_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game_data_attribute_profile_id(data);} catch(e) { _log("Error calling: error_count_profile_game_data_attribute_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_data_attribute_count_profile_game_data_attribute_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game_data_attribute_profile_id(data);} catch(e) { _log("Error calling: handle_count_profile_game_data_attribute_profile_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_profile_game_data_attribute_profile_id_game_id_code: function
    (
        profile_id,
        game_id,
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_data_attribute_service + 'count'
                + "/by-profile-id/by-game-id/by-code"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_data_attribute_profile_id_game_id_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_data_attribute_count_profile_game_data_attribute_profile_id_game_id_code_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game_data_attribute_profile_id_game_id_code(data);} catch(e) { _log("Error calling: error_count_profile_game_data_attribute_profile_id_game_id_code: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_data_attribute_count_profile_game_data_attribute_profile_id_game_id_code_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game_data_attribute_profile_id_game_id_code(data);} catch(e) { _log("Error calling: handle_count_profile_game_data_attribute_profile_id_game_id_code: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_profile_game_data_attribute_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_data_attribute_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_profile_game_data_attribute_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_data_attribute_browse_profile_game_data_attribute_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_profile_game_data_attribute_filter(data);} catch(e) { _log("Error calling: error_browse_profile_game_data_attribute_filter: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_data_attribute_browse_profile_game_data_attribute_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_profile_game_data_attribute_filter(data);} catch(e) { _log("Error calling: handle_browse_profile_game_data_attribute_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_profile_game_data_attribute_uuid: function
    (
        status,
        code,
        profile_id,
        active,
        game_id,
        name,
        uuid,
        val,
        date_modified,
        otype,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_data_attribute_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@profile_id": profile_id
            , "@active": active
            , "@game_id": game_id
            , "@name": name
            , "@uuid": uuid
            , "@val": val
            , "@date_modified": date_modified
            , "@otype": otype
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_profile_game_data_attribute_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_data_attribute_set_profile_game_data_attribute_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_profile_game_data_attribute_uuid(data);} catch(e) { _log("Error calling: error_set_profile_game_data_attribute_uuid: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_data_attribute_set_profile_game_data_attribute_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_profile_game_data_attribute_uuid(data);} catch(e) { _log("Error calling: handle_set_profile_game_data_attribute_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_profile_game_data_attribute_profile_id: function
    (
        status,
        code,
        profile_id,
        active,
        game_id,
        name,
        uuid,
        val,
        date_modified,
        otype,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_data_attribute_service + 'set'
                + "/by-profile-id"
                + "/@profile_id/" + profile_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@profile_id": profile_id
            , "@active": active
            , "@game_id": game_id
            , "@name": name
            , "@uuid": uuid
            , "@val": val
            , "@date_modified": date_modified
            , "@otype": otype
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_profile_game_data_attribute_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_data_attribute_set_profile_game_data_attribute_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_set_profile_game_data_attribute_profile_id(data);} catch(e) { _log("Error calling: error_set_profile_game_data_attribute_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_data_attribute_set_profile_game_data_attribute_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_profile_game_data_attribute_profile_id(data);} catch(e) { _log("Error calling: handle_set_profile_game_data_attribute_profile_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_profile_game_data_attribute_profile_id_game_id_code: function
    (
        status,
        code,
        profile_id,
        active,
        game_id,
        name,
        uuid,
        val,
        date_modified,
        otype,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_data_attribute_service + 'set'
                + "/by-profile-id/by-game-id/by-code"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@code/" + code            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@profile_id": profile_id
            , "@active": active
            , "@game_id": game_id
            , "@name": name
            , "@uuid": uuid
            , "@val": val
            , "@date_modified": date_modified
            , "@otype": otype
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_profile_game_data_attribute_profile_id_game_id_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_data_attribute_set_profile_game_data_attribute_profile_id_game_id_code_callback", true);
            // call a method that can be inline callback
            try {error_set_profile_game_data_attribute_profile_id_game_id_code(data);} catch(e) { _log("Error calling: error_set_profile_game_data_attribute_profile_id_game_id_code: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_data_attribute_set_profile_game_data_attribute_profile_id_game_id_code_callback", false);
            // call a method that can be inline callback
            try {handle_set_profile_game_data_attribute_profile_id_game_id_code(data);} catch(e) { _log("Error calling: handle_set_profile_game_data_attribute_profile_id_game_id_code: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_profile_game_data_attribute_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_data_attribute_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_profile_game_data_attribute_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_data_attribute_del_profile_game_data_attribute_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_profile_game_data_attribute_uuid(data);} catch(e) { _log("Error calling: error_del_profile_game_data_attribute_uuid: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_data_attribute_del_profile_game_data_attribute_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_profile_game_data_attribute_uuid(data);} catch(e) { _log("Error calling: handle_del_profile_game_data_attribute_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_profile_game_data_attribute_profile_id: function
    (
        profile_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_data_attribute_service + 'del'
                + "/by-profile-id"
                + "/@profile_id/" + profile_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_profile_game_data_attribute_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_data_attribute_del_profile_game_data_attribute_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_del_profile_game_data_attribute_profile_id(data);} catch(e) { _log("Error calling: error_del_profile_game_data_attribute_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_data_attribute_del_profile_game_data_attribute_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_profile_game_data_attribute_profile_id(data);} catch(e) { _log("Error calling: handle_del_profile_game_data_attribute_profile_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_profile_game_data_attribute_profile_id_game_id_code: function
    (
        profile_id,
        game_id,
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_data_attribute_service + 'del'
                + "/by-profile-id/by-game-id/by-code"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_profile_game_data_attribute_profile_id_game_id_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_data_attribute_del_profile_game_data_attribute_profile_id_game_id_code_callback", true);
            // call a method that can be inline callback
            try {error_del_profile_game_data_attribute_profile_id_game_id_code(data);} catch(e) { _log("Error calling: error_del_profile_game_data_attribute_profile_id_game_id_code: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_data_attribute_del_profile_game_data_attribute_profile_id_game_id_code_callback", false);
            // call a method that can be inline callback
            try {handle_del_profile_game_data_attribute_profile_id_game_id_code(data);} catch(e) { _log("Error calling: handle_del_profile_game_data_attribute_profile_id_game_id_code: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_profile_game_data_attribute_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_data_attribute_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_profile_game_data_attribute_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_data_attribute_get_profile_game_data_attribute_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_profile_game_data_attribute_uuid(data);} catch(e) { _log("Error calling: error_get_profile_game_data_attribute_uuid: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_data_attribute_get_profile_game_data_attribute_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_profile_game_data_attribute_uuid(data);} catch(e) { _log("Error calling: handle_get_profile_game_data_attribute_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_profile_game_data_attribute_profile_id: function
    (
        profile_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_data_attribute_service + 'get'
                + "/by-profile-id"
                + "/@profile_id/" + profile_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_profile_game_data_attribute_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_data_attribute_get_profile_game_data_attribute_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_get_profile_game_data_attribute_profile_id(data);} catch(e) { _log("Error calling: error_get_profile_game_data_attribute_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_data_attribute_get_profile_game_data_attribute_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_profile_game_data_attribute_profile_id(data);} catch(e) { _log("Error calling: handle_get_profile_game_data_attribute_profile_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_profile_game_data_attribute_profile_id_game_id_code: function
    (
        profile_id,
        game_id,
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_data_attribute_service + 'get'
                + "/by-profile-id/by-game-id/by-code"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_profile_game_data_attribute_profile_id_game_id_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_data_attribute_get_profile_game_data_attribute_profile_id_game_id_code_callback", true);
            // call a method that can be inline callback
            try {error_get_profile_game_data_attribute_profile_id_game_id_code(data);} catch(e) { _log("Error calling: error_get_profile_game_data_attribute_profile_id_game_id_code: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_data_attribute_get_profile_game_data_attribute_profile_id_game_id_code_callback", false);
            // call a method that can be inline callback
            try {handle_get_profile_game_data_attribute_profile_id_game_id_code(data);} catch(e) { _log("Error calling: handle_get_profile_game_data_attribute_profile_id_game_id_code: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_session = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_session.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_session: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_session_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_session_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_session_count_game_session_callback", true);
            // call a method that can be inline callback
            try {error_count_game_session(data);} catch(e) { _log("Error calling: error_count_game_session: " + e);}
        }
        else {
            _log("SUCCESS::game_session_count_game_session_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_session(data);} catch(e) { _log("Error calling: handle_count_game_session: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_session_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_session_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_session_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_session_count_game_session_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_session_uuid(data);} catch(e) { _log("Error calling: error_count_game_session_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_session_count_game_session_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_session_uuid(data);} catch(e) { _log("Error calling: handle_count_game_session_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_session_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_session_service + 'count'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_session_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_session_count_game_session_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_session_game_id(data);} catch(e) { _log("Error calling: error_count_game_session_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_session_count_game_session_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_session_game_id(data);} catch(e) { _log("Error calling: handle_count_game_session_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_session_profile_id: function
    (
        profile_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_session_service + 'count'
                + "/by-profile-id"
                + "/@profile_id/" + profile_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_session_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_session_count_game_session_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_session_profile_id(data);} catch(e) { _log("Error calling: error_count_game_session_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::game_session_count_game_session_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_session_profile_id(data);} catch(e) { _log("Error calling: handle_count_game_session_profile_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_session_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_session_service + 'count'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_session_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_session_count_game_session_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_session_profile_id_game_id(data);} catch(e) { _log("Error calling: error_count_game_session_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_session_count_game_session_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_session_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_count_game_session_profile_id_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_session_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_session_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_session_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_session_browse_game_session_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_session_filter(data);} catch(e) { _log("Error calling: error_browse_game_session_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_session_browse_game_session_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_session_filter(data);} catch(e) { _log("Error calling: handle_browse_game_session_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_session_uuid: function
    (
        game_area,
        code,
        network_uuid,
        profile_id,
        game_level,
        profile_network,
        profile_device,
        display_name,
        uuid,
        network_external_port,
        game_players_connected,
        type,
        status,
        game_state,
        hash,
        description,
        network_external_ip,
        profile_username,
        active,
        game_id,
        game_code,
        game_player_z,
        game_player_x,
        game_player_y,
        network_port,
        game_players_allowed,
        name,
        date_modified,
        game_type,
        date_created,
        network_ip,
        network_use_nat,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_session_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@game_area": game_area
            , "@code": code
            , "@network_uuid": network_uuid
            , "@profile_id": profile_id
            , "@game_level": game_level
            , "@profile_network": profile_network
            , "@profile_device": profile_device
            , "@display_name": display_name
            , "@uuid": uuid
            , "@network_external_port": network_external_port
            , "@game_players_connected": game_players_connected
            , "@type": type
            , "@status": status
            , "@game_state": game_state
            , "@hash": hash
            , "@description": description
            , "@network_external_ip": network_external_ip
            , "@profile_username": profile_username
            , "@active": active
            , "@game_id": game_id
            , "@game_code": game_code
            , "@game_player_z": game_player_z
            , "@game_player_x": game_player_x
            , "@game_player_y": game_player_y
            , "@network_port": network_port
            , "@game_players_allowed": game_players_allowed
            , "@name": name
            , "@date_modified": date_modified
            , "@game_type": game_type
            , "@date_created": date_created
            , "@network_ip": network_ip
            , "@network_use_nat": network_use_nat
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_session_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_session_set_game_session_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_session_uuid(data);} catch(e) { _log("Error calling: error_set_game_session_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_session_set_game_session_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_session_uuid(data);} catch(e) { _log("Error calling: handle_set_game_session_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_session_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_session_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_session_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_session_del_game_session_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_session_uuid(data);} catch(e) { _log("Error calling: error_del_game_session_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_session_del_game_session_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_session_uuid(data);} catch(e) { _log("Error calling: handle_del_game_session_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_session: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_session_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_session_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_session_get_game_session_callback", true);
            // call a method that can be inline callback
            try {error_get_game_session(data);} catch(e) { _log("Error calling: error_get_game_session: " + e);}
        }
        else {
            _log("SUCCESS::game_session_get_game_session_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_session(data);} catch(e) { _log("Error calling: handle_get_game_session: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_session_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_session_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_session_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_session_get_game_session_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_session_uuid(data);} catch(e) { _log("Error calling: error_get_game_session_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_session_get_game_session_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_session_uuid(data);} catch(e) { _log("Error calling: handle_get_game_session_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_session_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_session_service + 'get'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_session_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_session_get_game_session_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_session_game_id(data);} catch(e) { _log("Error calling: error_get_game_session_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_session_get_game_session_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_session_game_id(data);} catch(e) { _log("Error calling: handle_get_game_session_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_session_profile_id: function
    (
        profile_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_session_service + 'get'
                + "/by-profile-id"
                + "/@profile_id/" + profile_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_session_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_session_get_game_session_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_session_profile_id(data);} catch(e) { _log("Error calling: error_get_game_session_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::game_session_get_game_session_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_session_profile_id(data);} catch(e) { _log("Error calling: handle_get_game_session_profile_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_session_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_session_service + 'get'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_session_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_session_get_game_session_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_session_profile_id_game_id(data);} catch(e) { _log("Error calling: error_get_game_session_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_session_get_game_session_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_session_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_get_game_session_profile_id_game_id: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_session_data = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_session_data.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_session_data: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_session_data_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_session_data_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_session_data_count_game_session_data_callback", true);
            // call a method that can be inline callback
            try {error_count_game_session_data(data);} catch(e) { _log("Error calling: error_count_game_session_data: " + e);}
        }
        else {
            _log("SUCCESS::game_session_data_count_game_session_data_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_session_data(data);} catch(e) { _log("Error calling: handle_count_game_session_data: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_session_data_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_session_data_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_session_data_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_session_data_count_game_session_data_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_session_data_uuid(data);} catch(e) { _log("Error calling: error_count_game_session_data_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_session_data_count_game_session_data_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_session_data_uuid(data);} catch(e) { _log("Error calling: handle_count_game_session_data_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_session_data_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_session_data_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_session_data_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_session_data_browse_game_session_data_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_session_data_filter(data);} catch(e) { _log("Error calling: error_browse_game_session_data_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_session_data_browse_game_session_data_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_session_data_filter(data);} catch(e) { _log("Error calling: handle_browse_game_session_data_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_session_data_uuid: function
    (
        status,
        code,
        display_name,
        name,
        date_modified,
        data_results,
        data,
        uuid,
        data_layer_projectile,
        data_layer_actors,
        active,
        date_created,
        data_layer_enemy,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_session_data_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@data_results": data_results
            , "@data": data
            , "@uuid": uuid
            , "@data_layer_projectile": data_layer_projectile
            , "@data_layer_actors": data_layer_actors
            , "@active": active
            , "@date_created": date_created
            , "@data_layer_enemy": data_layer_enemy
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_session_data_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_session_data_set_game_session_data_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_session_data_uuid(data);} catch(e) { _log("Error calling: error_set_game_session_data_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_session_data_set_game_session_data_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_session_data_uuid(data);} catch(e) { _log("Error calling: handle_set_game_session_data_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_session_data_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_session_data_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_session_data_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_session_data_del_game_session_data_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_session_data_uuid(data);} catch(e) { _log("Error calling: error_del_game_session_data_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_session_data_del_game_session_data_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_session_data_uuid(data);} catch(e) { _log("Error calling: handle_del_game_session_data_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_session_data: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_session_data_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_session_data_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_session_data_get_game_session_data_callback", true);
            // call a method that can be inline callback
            try {error_get_game_session_data(data);} catch(e) { _log("Error calling: error_get_game_session_data: " + e);}
        }
        else {
            _log("SUCCESS::game_session_data_get_game_session_data_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_session_data(data);} catch(e) { _log("Error calling: handle_get_game_session_data: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_session_data_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_session_data_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_session_data_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_session_data_get_game_session_data_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_session_data_uuid(data);} catch(e) { _log("Error calling: error_get_game_session_data_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_session_data_get_game_session_data_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_session_data_uuid(data);} catch(e) { _log("Error calling: handle_get_game_session_data_uuid: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_content = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_content.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_content: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_content_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_count_game_content_callback", true);
            // call a method that can be inline callback
            try {error_count_game_content(data);} catch(e) { _log("Error calling: error_count_game_content: " + e);}
        }
        else {
            _log("SUCCESS::game_content_count_game_content_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_content(data);} catch(e) { _log("Error calling: handle_count_game_content: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_content_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_content_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_count_game_content_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_content_uuid(data);} catch(e) { _log("Error calling: error_count_game_content_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_content_count_game_content_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_content_uuid(data);} catch(e) { _log("Error calling: handle_count_game_content_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_content_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'count'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_content_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_count_game_content_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_content_game_id(data);} catch(e) { _log("Error calling: error_count_game_content_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_content_count_game_content_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_content_game_id(data);} catch(e) { _log("Error calling: handle_count_game_content_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_content_game_id_path: function
    (
        game_id,
        path,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'count'
                + "/by-game-id/by-path"
                + "/@game_id/" + game_id            
                + "/@path/" + path            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_content_game_id_path_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_count_game_content_game_id_path_callback", true);
            // call a method that can be inline callback
            try {error_count_game_content_game_id_path(data);} catch(e) { _log("Error calling: error_count_game_content_game_id_path: " + e);}
        }
        else {
            _log("SUCCESS::game_content_count_game_content_game_id_path_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_content_game_id_path(data);} catch(e) { _log("Error calling: handle_count_game_content_game_id_path: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_content_game_id_path_version: function
    (
        game_id,
        path,
        version,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'count'
                + "/by-game-id/by-path/by-version"
                + "/@game_id/" + game_id            
                + "/@path/" + path            
                + "/@version/" + version            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_content_game_id_path_version_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_count_game_content_game_id_path_version_callback", true);
            // call a method that can be inline callback
            try {error_count_game_content_game_id_path_version(data);} catch(e) { _log("Error calling: error_count_game_content_game_id_path_version: " + e);}
        }
        else {
            _log("SUCCESS::game_content_count_game_content_game_id_path_version_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_content_game_id_path_version(data);} catch(e) { _log("Error calling: handle_count_game_content_game_id_path_version: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_content_game_id_path_version_platform_increment: function
    (
        game_id,
        path,
        version,
        platform,
        increment,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'count'
                + "/by-game-id/by-path/by-version/by-platform/by-increment"
                + "/@game_id/" + game_id            
                + "/@path/" + path            
                + "/@version/" + version            
                + "/@platform/" + platform            
                + "/@increment/" + increment            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_content_game_id_path_version_platform_increment_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_count_game_content_game_id_path_version_platform_increment_callback", true);
            // call a method that can be inline callback
            try {error_count_game_content_game_id_path_version_platform_increment(data);} catch(e) { _log("Error calling: error_count_game_content_game_id_path_version_platform_increment: " + e);}
        }
        else {
            _log("SUCCESS::game_content_count_game_content_game_id_path_version_platform_increment_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_content_game_id_path_version_platform_increment(data);} catch(e) { _log("Error calling: handle_count_game_content_game_id_path_version_platform_increment: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_content_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_content_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_browse_game_content_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_content_filter(data);} catch(e) { _log("Error calling: error_browse_game_content_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_content_browse_game_content_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_content_filter(data);} catch(e) { _log("Error calling: handle_browse_game_content_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_content_uuid: function
    (
        status,
        code,
        display_name,
        name,
        extension,
        date_modified,
        data,
        game_id,
        uuid,
        filename,
        source,
        version,
        platform,
        content_type,
        path,
        active,
        date_created,
        increment,
        type,
        hash,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@extension": extension
            , "@date_modified": date_modified
            , "@data": data
            , "@game_id": game_id
            , "@uuid": uuid
            , "@filename": filename
            , "@source": source
            , "@version": version
            , "@platform": platform
            , "@content_type": content_type
            , "@path": path
            , "@active": active
            , "@date_created": date_created
            , "@increment": increment
            , "@type": type
            , "@hash": hash
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_content_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_set_game_content_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_content_uuid(data);} catch(e) { _log("Error calling: error_set_game_content_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_content_set_game_content_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_content_uuid(data);} catch(e) { _log("Error calling: handle_set_game_content_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_content_game_id: function
    (
        status,
        code,
        display_name,
        name,
        extension,
        date_modified,
        data,
        game_id,
        uuid,
        filename,
        source,
        version,
        platform,
        content_type,
        path,
        active,
        date_created,
        increment,
        type,
        hash,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'set'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@extension": extension
            , "@date_modified": date_modified
            , "@data": data
            , "@game_id": game_id
            , "@uuid": uuid
            , "@filename": filename
            , "@source": source
            , "@version": version
            , "@platform": platform
            , "@content_type": content_type
            , "@path": path
            , "@active": active
            , "@date_created": date_created
            , "@increment": increment
            , "@type": type
            , "@hash": hash
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_content_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_set_game_content_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_content_game_id(data);} catch(e) { _log("Error calling: error_set_game_content_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_content_set_game_content_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_content_game_id(data);} catch(e) { _log("Error calling: handle_set_game_content_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_content_game_id_path: function
    (
        status,
        code,
        display_name,
        name,
        extension,
        date_modified,
        data,
        game_id,
        uuid,
        filename,
        source,
        version,
        platform,
        content_type,
        path,
        active,
        date_created,
        increment,
        type,
        hash,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'set'
                + "/by-game-id/by-path"
                + "/@game_id/" + game_id            
                + "/@path/" + path            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@extension": extension
            , "@date_modified": date_modified
            , "@data": data
            , "@game_id": game_id
            , "@uuid": uuid
            , "@filename": filename
            , "@source": source
            , "@version": version
            , "@platform": platform
            , "@content_type": content_type
            , "@path": path
            , "@active": active
            , "@date_created": date_created
            , "@increment": increment
            , "@type": type
            , "@hash": hash
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_content_game_id_path_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_set_game_content_game_id_path_callback", true);
            // call a method that can be inline callback
            try {error_set_game_content_game_id_path(data);} catch(e) { _log("Error calling: error_set_game_content_game_id_path: " + e);}
        }
        else {
            _log("SUCCESS::game_content_set_game_content_game_id_path_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_content_game_id_path(data);} catch(e) { _log("Error calling: handle_set_game_content_game_id_path: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_content_game_id_path_version: function
    (
        status,
        code,
        display_name,
        name,
        extension,
        date_modified,
        data,
        game_id,
        uuid,
        filename,
        source,
        version,
        platform,
        content_type,
        path,
        active,
        date_created,
        increment,
        type,
        hash,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'set'
                + "/by-game-id/by-path/by-version"
                + "/@game_id/" + game_id            
                + "/@path/" + path            
                + "/@version/" + version            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@extension": extension
            , "@date_modified": date_modified
            , "@data": data
            , "@game_id": game_id
            , "@uuid": uuid
            , "@filename": filename
            , "@source": source
            , "@version": version
            , "@platform": platform
            , "@content_type": content_type
            , "@path": path
            , "@active": active
            , "@date_created": date_created
            , "@increment": increment
            , "@type": type
            , "@hash": hash
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_content_game_id_path_version_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_set_game_content_game_id_path_version_callback", true);
            // call a method that can be inline callback
            try {error_set_game_content_game_id_path_version(data);} catch(e) { _log("Error calling: error_set_game_content_game_id_path_version: " + e);}
        }
        else {
            _log("SUCCESS::game_content_set_game_content_game_id_path_version_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_content_game_id_path_version(data);} catch(e) { _log("Error calling: handle_set_game_content_game_id_path_version: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_content_game_id_path_version_platform_increment: function
    (
        status,
        code,
        display_name,
        name,
        extension,
        date_modified,
        data,
        game_id,
        uuid,
        filename,
        source,
        version,
        platform,
        content_type,
        path,
        active,
        date_created,
        increment,
        type,
        hash,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'set'
                + "/by-game-id/by-path/by-version/by-platform/by-increment"
                + "/@game_id/" + game_id            
                + "/@path/" + path            
                + "/@version/" + version            
                + "/@platform/" + platform            
                + "/@increment/" + increment            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@extension": extension
            , "@date_modified": date_modified
            , "@data": data
            , "@game_id": game_id
            , "@uuid": uuid
            , "@filename": filename
            , "@source": source
            , "@version": version
            , "@platform": platform
            , "@content_type": content_type
            , "@path": path
            , "@active": active
            , "@date_created": date_created
            , "@increment": increment
            , "@type": type
            , "@hash": hash
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_content_game_id_path_version_platform_increment_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_set_game_content_game_id_path_version_platform_increment_callback", true);
            // call a method that can be inline callback
            try {error_set_game_content_game_id_path_version_platform_increment(data);} catch(e) { _log("Error calling: error_set_game_content_game_id_path_version_platform_increment: " + e);}
        }
        else {
            _log("SUCCESS::game_content_set_game_content_game_id_path_version_platform_increment_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_content_game_id_path_version_platform_increment(data);} catch(e) { _log("Error calling: handle_set_game_content_game_id_path_version_platform_increment: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_content_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_content_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_del_game_content_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_content_uuid(data);} catch(e) { _log("Error calling: error_del_game_content_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_content_del_game_content_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_content_uuid(data);} catch(e) { _log("Error calling: handle_del_game_content_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_content_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'del'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_content_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_del_game_content_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_content_game_id(data);} catch(e) { _log("Error calling: error_del_game_content_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_content_del_game_content_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_content_game_id(data);} catch(e) { _log("Error calling: handle_del_game_content_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_content_game_id_path: function
    (
        game_id,
        path,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'del'
                + "/by-game-id/by-path"
                + "/@game_id/" + game_id            
                + "/@path/" + path            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_content_game_id_path_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_del_game_content_game_id_path_callback", true);
            // call a method that can be inline callback
            try {error_del_game_content_game_id_path(data);} catch(e) { _log("Error calling: error_del_game_content_game_id_path: " + e);}
        }
        else {
            _log("SUCCESS::game_content_del_game_content_game_id_path_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_content_game_id_path(data);} catch(e) { _log("Error calling: handle_del_game_content_game_id_path: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_content_game_id_path_version: function
    (
        game_id,
        path,
        version,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'del'
                + "/by-game-id/by-path/by-version"
                + "/@game_id/" + game_id            
                + "/@path/" + path            
                + "/@version/" + version            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_content_game_id_path_version_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_del_game_content_game_id_path_version_callback", true);
            // call a method that can be inline callback
            try {error_del_game_content_game_id_path_version(data);} catch(e) { _log("Error calling: error_del_game_content_game_id_path_version: " + e);}
        }
        else {
            _log("SUCCESS::game_content_del_game_content_game_id_path_version_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_content_game_id_path_version(data);} catch(e) { _log("Error calling: handle_del_game_content_game_id_path_version: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_content_game_id_path_version_platform_increment: function
    (
        game_id,
        path,
        version,
        platform,
        increment,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'del'
                + "/by-game-id/by-path/by-version/by-platform/by-increment"
                + "/@game_id/" + game_id            
                + "/@path/" + path            
                + "/@version/" + version            
                + "/@platform/" + platform            
                + "/@increment/" + increment            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_content_game_id_path_version_platform_increment_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_del_game_content_game_id_path_version_platform_increment_callback", true);
            // call a method that can be inline callback
            try {error_del_game_content_game_id_path_version_platform_increment(data);} catch(e) { _log("Error calling: error_del_game_content_game_id_path_version_platform_increment: " + e);}
        }
        else {
            _log("SUCCESS::game_content_del_game_content_game_id_path_version_platform_increment_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_content_game_id_path_version_platform_increment(data);} catch(e) { _log("Error calling: handle_del_game_content_game_id_path_version_platform_increment: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_content: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_content_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_get_game_content_callback", true);
            // call a method that can be inline callback
            try {error_get_game_content(data);} catch(e) { _log("Error calling: error_get_game_content: " + e);}
        }
        else {
            _log("SUCCESS::game_content_get_game_content_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_content(data);} catch(e) { _log("Error calling: handle_get_game_content: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_content_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_content_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_get_game_content_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_content_uuid(data);} catch(e) { _log("Error calling: error_get_game_content_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_content_get_game_content_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_content_uuid(data);} catch(e) { _log("Error calling: handle_get_game_content_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_content_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'get'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_content_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_get_game_content_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_content_game_id(data);} catch(e) { _log("Error calling: error_get_game_content_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_content_get_game_content_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_content_game_id(data);} catch(e) { _log("Error calling: handle_get_game_content_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_content_game_id_path: function
    (
        game_id,
        path,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'get'
                + "/by-game-id/by-path"
                + "/@game_id/" + game_id            
                + "/@path/" + path            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_content_game_id_path_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_get_game_content_game_id_path_callback", true);
            // call a method that can be inline callback
            try {error_get_game_content_game_id_path(data);} catch(e) { _log("Error calling: error_get_game_content_game_id_path: " + e);}
        }
        else {
            _log("SUCCESS::game_content_get_game_content_game_id_path_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_content_game_id_path(data);} catch(e) { _log("Error calling: handle_get_game_content_game_id_path: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_content_game_id_path_version: function
    (
        game_id,
        path,
        version,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'get'
                + "/by-game-id/by-path/by-version"
                + "/@game_id/" + game_id            
                + "/@path/" + path            
                + "/@version/" + version            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_content_game_id_path_version_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_get_game_content_game_id_path_version_callback", true);
            // call a method that can be inline callback
            try {error_get_game_content_game_id_path_version(data);} catch(e) { _log("Error calling: error_get_game_content_game_id_path_version: " + e);}
        }
        else {
            _log("SUCCESS::game_content_get_game_content_game_id_path_version_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_content_game_id_path_version(data);} catch(e) { _log("Error calling: handle_get_game_content_game_id_path_version: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_content_game_id_path_version_platform_increment: function
    (
        game_id,
        path,
        version,
        platform,
        increment,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_content_service + 'get'
                + "/by-game-id/by-path/by-version/by-platform/by-increment"
                + "/@game_id/" + game_id            
                + "/@path/" + path            
                + "/@version/" + version            
                + "/@platform/" + platform            
                + "/@increment/" + increment            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_content_game_id_path_version_platform_increment_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_content_get_game_content_game_id_path_version_platform_increment_callback", true);
            // call a method that can be inline callback
            try {error_get_game_content_game_id_path_version_platform_increment(data);} catch(e) { _log("Error calling: error_get_game_content_game_id_path_version_platform_increment: " + e);}
        }
        else {
            _log("SUCCESS::game_content_get_game_content_game_id_path_version_platform_increment_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_content_game_id_path_version_platform_increment(data);} catch(e) { _log("Error calling: handle_get_game_content_game_id_path_version_platform_increment: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_profile_content = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_profile_content.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_profile_content: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_content_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_count_game_profile_content_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_content(data);} catch(e) { _log("Error calling: error_count_game_profile_content: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_count_game_profile_content_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_content(data);} catch(e) { _log("Error calling: handle_count_game_profile_content: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_content_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_content_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_count_game_profile_content_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_content_uuid(data);} catch(e) { _log("Error calling: error_count_game_profile_content_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_count_game_profile_content_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_content_uuid(data);} catch(e) { _log("Error calling: handle_count_game_profile_content_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_content_game_id_profile_id: function
    (
        game_id,
        profile_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'count'
                + "/by-game-id/by-profile-id"
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_content_game_id_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_count_game_profile_content_game_id_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_content_game_id_profile_id(data);} catch(e) { _log("Error calling: error_count_game_profile_content_game_id_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_count_game_profile_content_game_id_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_content_game_id_profile_id(data);} catch(e) { _log("Error calling: handle_count_game_profile_content_game_id_profile_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_content_game_id_username: function
    (
        game_id,
        username,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'count'
                + "/by-game-id/by-username"
                + "/@game_id/" + game_id            
                + "/@username/" + username            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_content_game_id_username_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_count_game_profile_content_game_id_username_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_content_game_id_username(data);} catch(e) { _log("Error calling: error_count_game_profile_content_game_id_username: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_count_game_profile_content_game_id_username_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_content_game_id_username(data);} catch(e) { _log("Error calling: handle_count_game_profile_content_game_id_username: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_content_username: function
    (
        username,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'count'
                + "/by-username"
                + "/@username/" + username            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_content_username_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_count_game_profile_content_username_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_content_username(data);} catch(e) { _log("Error calling: error_count_game_profile_content_username: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_count_game_profile_content_username_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_content_username(data);} catch(e) { _log("Error calling: handle_count_game_profile_content_username: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_content_game_id_profile_id_path: function
    (
        game_id,
        profile_id,
        path,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'count'
                + "/by-game-id/by-profile-id/by-path"
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                + "/@path/" + path            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_content_game_id_profile_id_path_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_count_game_profile_content_game_id_profile_id_path_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_content_game_id_profile_id_path(data);} catch(e) { _log("Error calling: error_count_game_profile_content_game_id_profile_id_path: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_count_game_profile_content_game_id_profile_id_path_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_content_game_id_profile_id_path(data);} catch(e) { _log("Error calling: handle_count_game_profile_content_game_id_profile_id_path: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_content_game_id_profile_id_path_version: function
    (
        game_id,
        profile_id,
        path,
        version,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'count'
                + "/by-game-id/by-profile-id/by-path/by-version"
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                + "/@path/" + path            
                + "/@version/" + version            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_content_game_id_profile_id_path_version_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_count_game_profile_content_game_id_profile_id_path_version_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_content_game_id_profile_id_path_version(data);} catch(e) { _log("Error calling: error_count_game_profile_content_game_id_profile_id_path_version: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_count_game_profile_content_game_id_profile_id_path_version_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_content_game_id_profile_id_path_version(data);} catch(e) { _log("Error calling: handle_count_game_profile_content_game_id_profile_id_path_version: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_content_game_id_profile_id_path_version_platform_increment: function
    (
        game_id,
        profile_id,
        path,
        version,
        platform,
        increment,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'count'
                + "/by-game-id/by-profile-id/by-path/by-version/by-platform/by-increment"
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                + "/@path/" + path            
                + "/@version/" + version            
                + "/@platform/" + platform            
                + "/@increment/" + increment            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_content_game_id_profile_id_path_version_platform_increment_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_count_game_profile_content_game_id_profile_id_path_version_platform_increment_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_content_game_id_profile_id_path_version_platform_increment(data);} catch(e) { _log("Error calling: error_count_game_profile_content_game_id_profile_id_path_version_platform_increment: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_count_game_profile_content_game_id_profile_id_path_version_platform_increment_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_content_game_id_profile_id_path_version_platform_increment(data);} catch(e) { _log("Error calling: handle_count_game_profile_content_game_id_profile_id_path_version_platform_increment: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_content_game_id_username_path: function
    (
        game_id,
        username,
        path,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'count'
                + "/by-game-id/by-username/by-path"
                + "/@game_id/" + game_id            
                + "/@username/" + username            
                + "/@path/" + path            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_content_game_id_username_path_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_count_game_profile_content_game_id_username_path_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_content_game_id_username_path(data);} catch(e) { _log("Error calling: error_count_game_profile_content_game_id_username_path: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_count_game_profile_content_game_id_username_path_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_content_game_id_username_path(data);} catch(e) { _log("Error calling: handle_count_game_profile_content_game_id_username_path: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_content_game_id_username_path_version: function
    (
        game_id,
        username,
        path,
        version,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'count'
                + "/by-game-id/by-username/by-path/by-version"
                + "/@game_id/" + game_id            
                + "/@username/" + username            
                + "/@path/" + path            
                + "/@version/" + version            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_content_game_id_username_path_version_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_count_game_profile_content_game_id_username_path_version_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_content_game_id_username_path_version(data);} catch(e) { _log("Error calling: error_count_game_profile_content_game_id_username_path_version: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_count_game_profile_content_game_id_username_path_version_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_content_game_id_username_path_version(data);} catch(e) { _log("Error calling: handle_count_game_profile_content_game_id_username_path_version: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_content_game_id_username_path_version_platform_increment: function
    (
        game_id,
        username,
        path,
        version,
        platform,
        increment,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'count'
                + "/by-game-id/by-username/by-path/by-version/by-platform/by-increment"
                + "/@game_id/" + game_id            
                + "/@username/" + username            
                + "/@path/" + path            
                + "/@version/" + version            
                + "/@platform/" + platform            
                + "/@increment/" + increment            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_content_game_id_username_path_version_platform_increment_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_count_game_profile_content_game_id_username_path_version_platform_increment_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_content_game_id_username_path_version_platform_increment(data);} catch(e) { _log("Error calling: error_count_game_profile_content_game_id_username_path_version_platform_increment: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_count_game_profile_content_game_id_username_path_version_platform_increment_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_content_game_id_username_path_version_platform_increment(data);} catch(e) { _log("Error calling: handle_count_game_profile_content_game_id_username_path_version_platform_increment: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_profile_content_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_profile_content_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_browse_game_profile_content_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_profile_content_filter(data);} catch(e) { _log("Error calling: error_browse_game_profile_content_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_browse_game_profile_content_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_profile_content_filter(data);} catch(e) { _log("Error calling: handle_browse_game_profile_content_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_profile_content_uuid: function
    (
        username,
        code,
        profile_id,
        increment,
        path,
        display_name,
        uuid,
        platform,
        filename,
        source,
        version,
        game_network,
        type,
        status,
        hash,
        description,
        content_type,
        active,
        game_id,
        data,
        name,
        extension,
        date_modified,
        date_created,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@username": username
            , "@code": code
            , "@profile_id": profile_id
            , "@increment": increment
            , "@path": path
            , "@display_name": display_name
            , "@uuid": uuid
            , "@platform": platform
            , "@filename": filename
            , "@source": source
            , "@version": version
            , "@game_network": game_network
            , "@type": type
            , "@status": status
            , "@hash": hash
            , "@description": description
            , "@content_type": content_type
            , "@active": active
            , "@game_id": game_id
            , "@data": data
            , "@name": name
            , "@extension": extension
            , "@date_modified": date_modified
            , "@date_created": date_created
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_content_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_set_game_profile_content_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_content_uuid(data);} catch(e) { _log("Error calling: error_set_game_profile_content_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_set_game_profile_content_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_content_uuid(data);} catch(e) { _log("Error calling: handle_set_game_profile_content_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_profile_content_game_id_profile_id: function
    (
        username,
        code,
        profile_id,
        increment,
        path,
        display_name,
        uuid,
        platform,
        filename,
        source,
        version,
        game_network,
        type,
        status,
        hash,
        description,
        content_type,
        active,
        game_id,
        data,
        name,
        extension,
        date_modified,
        date_created,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'set'
                + "/by-game-id/by-profile-id"
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@username": username
            , "@code": code
            , "@profile_id": profile_id
            , "@increment": increment
            , "@path": path
            , "@display_name": display_name
            , "@uuid": uuid
            , "@platform": platform
            , "@filename": filename
            , "@source": source
            , "@version": version
            , "@game_network": game_network
            , "@type": type
            , "@status": status
            , "@hash": hash
            , "@description": description
            , "@content_type": content_type
            , "@active": active
            , "@game_id": game_id
            , "@data": data
            , "@name": name
            , "@extension": extension
            , "@date_modified": date_modified
            , "@date_created": date_created
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_content_game_id_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_set_game_profile_content_game_id_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_content_game_id_profile_id(data);} catch(e) { _log("Error calling: error_set_game_profile_content_game_id_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_set_game_profile_content_game_id_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_content_game_id_profile_id(data);} catch(e) { _log("Error calling: handle_set_game_profile_content_game_id_profile_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_profile_content_game_id_username: function
    (
        username,
        code,
        profile_id,
        increment,
        path,
        display_name,
        uuid,
        platform,
        filename,
        source,
        version,
        game_network,
        type,
        status,
        hash,
        description,
        content_type,
        active,
        game_id,
        data,
        name,
        extension,
        date_modified,
        date_created,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'set'
                + "/by-game-id/by-username"
                + "/@game_id/" + game_id            
                + "/@username/" + username            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@username": username
            , "@code": code
            , "@profile_id": profile_id
            , "@increment": increment
            , "@path": path
            , "@display_name": display_name
            , "@uuid": uuid
            , "@platform": platform
            , "@filename": filename
            , "@source": source
            , "@version": version
            , "@game_network": game_network
            , "@type": type
            , "@status": status
            , "@hash": hash
            , "@description": description
            , "@content_type": content_type
            , "@active": active
            , "@game_id": game_id
            , "@data": data
            , "@name": name
            , "@extension": extension
            , "@date_modified": date_modified
            , "@date_created": date_created
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_content_game_id_username_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_set_game_profile_content_game_id_username_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_content_game_id_username(data);} catch(e) { _log("Error calling: error_set_game_profile_content_game_id_username: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_set_game_profile_content_game_id_username_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_content_game_id_username(data);} catch(e) { _log("Error calling: handle_set_game_profile_content_game_id_username: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_profile_content_username: function
    (
        username,
        code,
        profile_id,
        increment,
        path,
        display_name,
        uuid,
        platform,
        filename,
        source,
        version,
        game_network,
        type,
        status,
        hash,
        description,
        content_type,
        active,
        game_id,
        data,
        name,
        extension,
        date_modified,
        date_created,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'set'
                + "/by-username"
                + "/@username/" + username            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@username": username
            , "@code": code
            , "@profile_id": profile_id
            , "@increment": increment
            , "@path": path
            , "@display_name": display_name
            , "@uuid": uuid
            , "@platform": platform
            , "@filename": filename
            , "@source": source
            , "@version": version
            , "@game_network": game_network
            , "@type": type
            , "@status": status
            , "@hash": hash
            , "@description": description
            , "@content_type": content_type
            , "@active": active
            , "@game_id": game_id
            , "@data": data
            , "@name": name
            , "@extension": extension
            , "@date_modified": date_modified
            , "@date_created": date_created
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_content_username_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_set_game_profile_content_username_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_content_username(data);} catch(e) { _log("Error calling: error_set_game_profile_content_username: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_set_game_profile_content_username_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_content_username(data);} catch(e) { _log("Error calling: handle_set_game_profile_content_username: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_profile_content_game_id_profile_id_path: function
    (
        username,
        code,
        profile_id,
        increment,
        path,
        display_name,
        uuid,
        platform,
        filename,
        source,
        version,
        game_network,
        type,
        status,
        hash,
        description,
        content_type,
        active,
        game_id,
        data,
        name,
        extension,
        date_modified,
        date_created,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'set'
                + "/by-game-id/by-profile-id/by-path"
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                + "/@path/" + path            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@username": username
            , "@code": code
            , "@profile_id": profile_id
            , "@increment": increment
            , "@path": path
            , "@display_name": display_name
            , "@uuid": uuid
            , "@platform": platform
            , "@filename": filename
            , "@source": source
            , "@version": version
            , "@game_network": game_network
            , "@type": type
            , "@status": status
            , "@hash": hash
            , "@description": description
            , "@content_type": content_type
            , "@active": active
            , "@game_id": game_id
            , "@data": data
            , "@name": name
            , "@extension": extension
            , "@date_modified": date_modified
            , "@date_created": date_created
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_content_game_id_profile_id_path_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_set_game_profile_content_game_id_profile_id_path_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_content_game_id_profile_id_path(data);} catch(e) { _log("Error calling: error_set_game_profile_content_game_id_profile_id_path: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_set_game_profile_content_game_id_profile_id_path_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_content_game_id_profile_id_path(data);} catch(e) { _log("Error calling: handle_set_game_profile_content_game_id_profile_id_path: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_profile_content_game_id_profile_id_path_version: function
    (
        username,
        code,
        profile_id,
        increment,
        path,
        display_name,
        uuid,
        platform,
        filename,
        source,
        version,
        game_network,
        type,
        status,
        hash,
        description,
        content_type,
        active,
        game_id,
        data,
        name,
        extension,
        date_modified,
        date_created,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'set'
                + "/by-game-id/by-profile-id/by-path/by-version"
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                + "/@path/" + path            
                + "/@version/" + version            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@username": username
            , "@code": code
            , "@profile_id": profile_id
            , "@increment": increment
            , "@path": path
            , "@display_name": display_name
            , "@uuid": uuid
            , "@platform": platform
            , "@filename": filename
            , "@source": source
            , "@version": version
            , "@game_network": game_network
            , "@type": type
            , "@status": status
            , "@hash": hash
            , "@description": description
            , "@content_type": content_type
            , "@active": active
            , "@game_id": game_id
            , "@data": data
            , "@name": name
            , "@extension": extension
            , "@date_modified": date_modified
            , "@date_created": date_created
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_content_game_id_profile_id_path_version_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_set_game_profile_content_game_id_profile_id_path_version_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_content_game_id_profile_id_path_version(data);} catch(e) { _log("Error calling: error_set_game_profile_content_game_id_profile_id_path_version: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_set_game_profile_content_game_id_profile_id_path_version_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_content_game_id_profile_id_path_version(data);} catch(e) { _log("Error calling: handle_set_game_profile_content_game_id_profile_id_path_version: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_profile_content_game_id_profile_id_path_version_platform_increment: function
    (
        username,
        code,
        profile_id,
        increment,
        path,
        display_name,
        uuid,
        platform,
        filename,
        source,
        version,
        game_network,
        type,
        status,
        hash,
        description,
        content_type,
        active,
        game_id,
        data,
        name,
        extension,
        date_modified,
        date_created,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'set'
                + "/by-game-id/by-profile-id/by-path/by-version/by-platform/by-increment"
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                + "/@path/" + path            
                + "/@version/" + version            
                + "/@platform/" + platform            
                + "/@increment/" + increment            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@username": username
            , "@code": code
            , "@profile_id": profile_id
            , "@increment": increment
            , "@path": path
            , "@display_name": display_name
            , "@uuid": uuid
            , "@platform": platform
            , "@filename": filename
            , "@source": source
            , "@version": version
            , "@game_network": game_network
            , "@type": type
            , "@status": status
            , "@hash": hash
            , "@description": description
            , "@content_type": content_type
            , "@active": active
            , "@game_id": game_id
            , "@data": data
            , "@name": name
            , "@extension": extension
            , "@date_modified": date_modified
            , "@date_created": date_created
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_content_game_id_profile_id_path_version_platform_increment_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_set_game_profile_content_game_id_profile_id_path_version_platform_increment_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_content_game_id_profile_id_path_version_platform_increment(data);} catch(e) { _log("Error calling: error_set_game_profile_content_game_id_profile_id_path_version_platform_increment: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_set_game_profile_content_game_id_profile_id_path_version_platform_increment_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_content_game_id_profile_id_path_version_platform_increment(data);} catch(e) { _log("Error calling: handle_set_game_profile_content_game_id_profile_id_path_version_platform_increment: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_profile_content_game_id_username_path: function
    (
        username,
        code,
        profile_id,
        increment,
        path,
        display_name,
        uuid,
        platform,
        filename,
        source,
        version,
        game_network,
        type,
        status,
        hash,
        description,
        content_type,
        active,
        game_id,
        data,
        name,
        extension,
        date_modified,
        date_created,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'set'
                + "/by-game-id/by-username/by-path"
                + "/@game_id/" + game_id            
                + "/@username/" + username            
                + "/@path/" + path            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@username": username
            , "@code": code
            , "@profile_id": profile_id
            , "@increment": increment
            , "@path": path
            , "@display_name": display_name
            , "@uuid": uuid
            , "@platform": platform
            , "@filename": filename
            , "@source": source
            , "@version": version
            , "@game_network": game_network
            , "@type": type
            , "@status": status
            , "@hash": hash
            , "@description": description
            , "@content_type": content_type
            , "@active": active
            , "@game_id": game_id
            , "@data": data
            , "@name": name
            , "@extension": extension
            , "@date_modified": date_modified
            , "@date_created": date_created
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_content_game_id_username_path_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_set_game_profile_content_game_id_username_path_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_content_game_id_username_path(data);} catch(e) { _log("Error calling: error_set_game_profile_content_game_id_username_path: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_set_game_profile_content_game_id_username_path_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_content_game_id_username_path(data);} catch(e) { _log("Error calling: handle_set_game_profile_content_game_id_username_path: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_profile_content_game_id_username_path_version: function
    (
        username,
        code,
        profile_id,
        increment,
        path,
        display_name,
        uuid,
        platform,
        filename,
        source,
        version,
        game_network,
        type,
        status,
        hash,
        description,
        content_type,
        active,
        game_id,
        data,
        name,
        extension,
        date_modified,
        date_created,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'set'
                + "/by-game-id/by-username/by-path/by-version"
                + "/@game_id/" + game_id            
                + "/@username/" + username            
                + "/@path/" + path            
                + "/@version/" + version            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@username": username
            , "@code": code
            , "@profile_id": profile_id
            , "@increment": increment
            , "@path": path
            , "@display_name": display_name
            , "@uuid": uuid
            , "@platform": platform
            , "@filename": filename
            , "@source": source
            , "@version": version
            , "@game_network": game_network
            , "@type": type
            , "@status": status
            , "@hash": hash
            , "@description": description
            , "@content_type": content_type
            , "@active": active
            , "@game_id": game_id
            , "@data": data
            , "@name": name
            , "@extension": extension
            , "@date_modified": date_modified
            , "@date_created": date_created
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_content_game_id_username_path_version_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_set_game_profile_content_game_id_username_path_version_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_content_game_id_username_path_version(data);} catch(e) { _log("Error calling: error_set_game_profile_content_game_id_username_path_version: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_set_game_profile_content_game_id_username_path_version_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_content_game_id_username_path_version(data);} catch(e) { _log("Error calling: handle_set_game_profile_content_game_id_username_path_version: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_profile_content_game_id_username_path_version_platform_increment: function
    (
        username,
        code,
        profile_id,
        increment,
        path,
        display_name,
        uuid,
        platform,
        filename,
        source,
        version,
        game_network,
        type,
        status,
        hash,
        description,
        content_type,
        active,
        game_id,
        data,
        name,
        extension,
        date_modified,
        date_created,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'set'
                + "/by-game-id/by-username/by-path/by-version/by-platform/by-increment"
                + "/@game_id/" + game_id            
                + "/@username/" + username            
                + "/@path/" + path            
                + "/@version/" + version            
                + "/@platform/" + platform            
                + "/@increment/" + increment            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@username": username
            , "@code": code
            , "@profile_id": profile_id
            , "@increment": increment
            , "@path": path
            , "@display_name": display_name
            , "@uuid": uuid
            , "@platform": platform
            , "@filename": filename
            , "@source": source
            , "@version": version
            , "@game_network": game_network
            , "@type": type
            , "@status": status
            , "@hash": hash
            , "@description": description
            , "@content_type": content_type
            , "@active": active
            , "@game_id": game_id
            , "@data": data
            , "@name": name
            , "@extension": extension
            , "@date_modified": date_modified
            , "@date_created": date_created
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_content_game_id_username_path_version_platform_increment_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_set_game_profile_content_game_id_username_path_version_platform_increment_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_content_game_id_username_path_version_platform_increment(data);} catch(e) { _log("Error calling: error_set_game_profile_content_game_id_username_path_version_platform_increment: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_set_game_profile_content_game_id_username_path_version_platform_increment_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_content_game_id_username_path_version_platform_increment(data);} catch(e) { _log("Error calling: handle_set_game_profile_content_game_id_username_path_version_platform_increment: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_profile_content_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_profile_content_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_del_game_profile_content_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_profile_content_uuid(data);} catch(e) { _log("Error calling: error_del_game_profile_content_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_del_game_profile_content_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_profile_content_uuid(data);} catch(e) { _log("Error calling: handle_del_game_profile_content_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_profile_content_game_id_profile_id: function
    (
        game_id,
        profile_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'del'
                + "/by-game-id/by-profile-id"
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_profile_content_game_id_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_del_game_profile_content_game_id_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_profile_content_game_id_profile_id(data);} catch(e) { _log("Error calling: error_del_game_profile_content_game_id_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_del_game_profile_content_game_id_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_profile_content_game_id_profile_id(data);} catch(e) { _log("Error calling: handle_del_game_profile_content_game_id_profile_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_profile_content_game_id_username: function
    (
        game_id,
        username,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'del'
                + "/by-game-id/by-username"
                + "/@game_id/" + game_id            
                + "/@username/" + username            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_profile_content_game_id_username_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_del_game_profile_content_game_id_username_callback", true);
            // call a method that can be inline callback
            try {error_del_game_profile_content_game_id_username(data);} catch(e) { _log("Error calling: error_del_game_profile_content_game_id_username: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_del_game_profile_content_game_id_username_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_profile_content_game_id_username(data);} catch(e) { _log("Error calling: handle_del_game_profile_content_game_id_username: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_profile_content_username: function
    (
        username,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'del'
                + "/by-username"
                + "/@username/" + username            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_profile_content_username_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_del_game_profile_content_username_callback", true);
            // call a method that can be inline callback
            try {error_del_game_profile_content_username(data);} catch(e) { _log("Error calling: error_del_game_profile_content_username: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_del_game_profile_content_username_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_profile_content_username(data);} catch(e) { _log("Error calling: handle_del_game_profile_content_username: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_profile_content_game_id_profile_id_path: function
    (
        game_id,
        profile_id,
        path,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'del'
                + "/by-game-id/by-profile-id/by-path"
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                + "/@path/" + path            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_profile_content_game_id_profile_id_path_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_del_game_profile_content_game_id_profile_id_path_callback", true);
            // call a method that can be inline callback
            try {error_del_game_profile_content_game_id_profile_id_path(data);} catch(e) { _log("Error calling: error_del_game_profile_content_game_id_profile_id_path: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_del_game_profile_content_game_id_profile_id_path_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_profile_content_game_id_profile_id_path(data);} catch(e) { _log("Error calling: handle_del_game_profile_content_game_id_profile_id_path: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_profile_content_game_id_profile_id_path_version: function
    (
        game_id,
        profile_id,
        path,
        version,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'del'
                + "/by-game-id/by-profile-id/by-path/by-version"
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                + "/@path/" + path            
                + "/@version/" + version            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_profile_content_game_id_profile_id_path_version_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_del_game_profile_content_game_id_profile_id_path_version_callback", true);
            // call a method that can be inline callback
            try {error_del_game_profile_content_game_id_profile_id_path_version(data);} catch(e) { _log("Error calling: error_del_game_profile_content_game_id_profile_id_path_version: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_del_game_profile_content_game_id_profile_id_path_version_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_profile_content_game_id_profile_id_path_version(data);} catch(e) { _log("Error calling: handle_del_game_profile_content_game_id_profile_id_path_version: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_profile_content_game_id_profile_id_path_version_platform_increment: function
    (
        game_id,
        profile_id,
        path,
        version,
        platform,
        increment,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'del'
                + "/by-game-id/by-profile-id/by-path/by-version/by-platform/by-increment"
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                + "/@path/" + path            
                + "/@version/" + version            
                + "/@platform/" + platform            
                + "/@increment/" + increment            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_profile_content_game_id_profile_id_path_version_platform_increment_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_del_game_profile_content_game_id_profile_id_path_version_platform_increment_callback", true);
            // call a method that can be inline callback
            try {error_del_game_profile_content_game_id_profile_id_path_version_platform_increment(data);} catch(e) { _log("Error calling: error_del_game_profile_content_game_id_profile_id_path_version_platform_increment: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_del_game_profile_content_game_id_profile_id_path_version_platform_increment_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_profile_content_game_id_profile_id_path_version_platform_increment(data);} catch(e) { _log("Error calling: handle_del_game_profile_content_game_id_profile_id_path_version_platform_increment: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_profile_content_game_id_username_path: function
    (
        game_id,
        username,
        path,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'del'
                + "/by-game-id/by-username/by-path"
                + "/@game_id/" + game_id            
                + "/@username/" + username            
                + "/@path/" + path            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_profile_content_game_id_username_path_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_del_game_profile_content_game_id_username_path_callback", true);
            // call a method that can be inline callback
            try {error_del_game_profile_content_game_id_username_path(data);} catch(e) { _log("Error calling: error_del_game_profile_content_game_id_username_path: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_del_game_profile_content_game_id_username_path_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_profile_content_game_id_username_path(data);} catch(e) { _log("Error calling: handle_del_game_profile_content_game_id_username_path: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_profile_content_game_id_username_path_version: function
    (
        game_id,
        username,
        path,
        version,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'del'
                + "/by-game-id/by-username/by-path/by-version"
                + "/@game_id/" + game_id            
                + "/@username/" + username            
                + "/@path/" + path            
                + "/@version/" + version            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_profile_content_game_id_username_path_version_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_del_game_profile_content_game_id_username_path_version_callback", true);
            // call a method that can be inline callback
            try {error_del_game_profile_content_game_id_username_path_version(data);} catch(e) { _log("Error calling: error_del_game_profile_content_game_id_username_path_version: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_del_game_profile_content_game_id_username_path_version_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_profile_content_game_id_username_path_version(data);} catch(e) { _log("Error calling: handle_del_game_profile_content_game_id_username_path_version: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_profile_content_game_id_username_path_version_platform_increment: function
    (
        game_id,
        username,
        path,
        version,
        platform,
        increment,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'del'
                + "/by-game-id/by-username/by-path/by-version/by-platform/by-increment"
                + "/@game_id/" + game_id            
                + "/@username/" + username            
                + "/@path/" + path            
                + "/@version/" + version            
                + "/@platform/" + platform            
                + "/@increment/" + increment            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_profile_content_game_id_username_path_version_platform_increment_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_del_game_profile_content_game_id_username_path_version_platform_increment_callback", true);
            // call a method that can be inline callback
            try {error_del_game_profile_content_game_id_username_path_version_platform_increment(data);} catch(e) { _log("Error calling: error_del_game_profile_content_game_id_username_path_version_platform_increment: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_del_game_profile_content_game_id_username_path_version_platform_increment_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_profile_content_game_id_username_path_version_platform_increment(data);} catch(e) { _log("Error calling: handle_del_game_profile_content_game_id_username_path_version_platform_increment: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_content: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_content_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_get_game_profile_content_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_content(data);} catch(e) { _log("Error calling: error_get_game_profile_content: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_get_game_profile_content_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_content(data);} catch(e) { _log("Error calling: handle_get_game_profile_content: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_content_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_content_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_get_game_profile_content_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_content_uuid(data);} catch(e) { _log("Error calling: error_get_game_profile_content_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_get_game_profile_content_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_content_uuid(data);} catch(e) { _log("Error calling: handle_get_game_profile_content_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_content_game_id_profile_id: function
    (
        game_id,
        profile_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'get'
                + "/by-game-id/by-profile-id"
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_content_game_id_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_get_game_profile_content_game_id_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_content_game_id_profile_id(data);} catch(e) { _log("Error calling: error_get_game_profile_content_game_id_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_get_game_profile_content_game_id_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_content_game_id_profile_id(data);} catch(e) { _log("Error calling: handle_get_game_profile_content_game_id_profile_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_content_game_id_username: function
    (
        game_id,
        username,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'get'
                + "/by-game-id/by-username"
                + "/@game_id/" + game_id            
                + "/@username/" + username            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_content_game_id_username_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_get_game_profile_content_game_id_username_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_content_game_id_username(data);} catch(e) { _log("Error calling: error_get_game_profile_content_game_id_username: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_get_game_profile_content_game_id_username_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_content_game_id_username(data);} catch(e) { _log("Error calling: handle_get_game_profile_content_game_id_username: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_content_username: function
    (
        username,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'get'
                + "/by-username"
                + "/@username/" + username            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_content_username_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_get_game_profile_content_username_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_content_username(data);} catch(e) { _log("Error calling: error_get_game_profile_content_username: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_get_game_profile_content_username_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_content_username(data);} catch(e) { _log("Error calling: handle_get_game_profile_content_username: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_content_game_id_profile_id_path: function
    (
        game_id,
        profile_id,
        path,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'get'
                + "/by-game-id/by-profile-id/by-path"
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                + "/@path/" + path            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_content_game_id_profile_id_path_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_get_game_profile_content_game_id_profile_id_path_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_content_game_id_profile_id_path(data);} catch(e) { _log("Error calling: error_get_game_profile_content_game_id_profile_id_path: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_get_game_profile_content_game_id_profile_id_path_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_content_game_id_profile_id_path(data);} catch(e) { _log("Error calling: handle_get_game_profile_content_game_id_profile_id_path: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_content_game_id_profile_id_path_version: function
    (
        game_id,
        profile_id,
        path,
        version,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'get'
                + "/by-game-id/by-profile-id/by-path/by-version"
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                + "/@path/" + path            
                + "/@version/" + version            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_content_game_id_profile_id_path_version_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_get_game_profile_content_game_id_profile_id_path_version_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_content_game_id_profile_id_path_version(data);} catch(e) { _log("Error calling: error_get_game_profile_content_game_id_profile_id_path_version: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_get_game_profile_content_game_id_profile_id_path_version_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_content_game_id_profile_id_path_version(data);} catch(e) { _log("Error calling: handle_get_game_profile_content_game_id_profile_id_path_version: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_content_game_id_profile_id_path_version_platform_increment: function
    (
        game_id,
        profile_id,
        path,
        version,
        platform,
        increment,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'get'
                + "/by-game-id/by-profile-id/by-path/by-version/by-platform/by-increment"
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                + "/@path/" + path            
                + "/@version/" + version            
                + "/@platform/" + platform            
                + "/@increment/" + increment            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_content_game_id_profile_id_path_version_platform_increment_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_get_game_profile_content_game_id_profile_id_path_version_platform_increment_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_content_game_id_profile_id_path_version_platform_increment(data);} catch(e) { _log("Error calling: error_get_game_profile_content_game_id_profile_id_path_version_platform_increment: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_get_game_profile_content_game_id_profile_id_path_version_platform_increment_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_content_game_id_profile_id_path_version_platform_increment(data);} catch(e) { _log("Error calling: handle_get_game_profile_content_game_id_profile_id_path_version_platform_increment: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_content_game_id_username_path: function
    (
        game_id,
        username,
        path,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'get'
                + "/by-game-id/by-username/by-path"
                + "/@game_id/" + game_id            
                + "/@username/" + username            
                + "/@path/" + path            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_content_game_id_username_path_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_get_game_profile_content_game_id_username_path_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_content_game_id_username_path(data);} catch(e) { _log("Error calling: error_get_game_profile_content_game_id_username_path: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_get_game_profile_content_game_id_username_path_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_content_game_id_username_path(data);} catch(e) { _log("Error calling: handle_get_game_profile_content_game_id_username_path: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_content_game_id_username_path_version: function
    (
        game_id,
        username,
        path,
        version,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'get'
                + "/by-game-id/by-username/by-path/by-version"
                + "/@game_id/" + game_id            
                + "/@username/" + username            
                + "/@path/" + path            
                + "/@version/" + version            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_content_game_id_username_path_version_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_get_game_profile_content_game_id_username_path_version_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_content_game_id_username_path_version(data);} catch(e) { _log("Error calling: error_get_game_profile_content_game_id_username_path_version: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_get_game_profile_content_game_id_username_path_version_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_content_game_id_username_path_version(data);} catch(e) { _log("Error calling: handle_get_game_profile_content_game_id_username_path_version: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_content_game_id_username_path_version_platform_increment: function
    (
        game_id,
        username,
        path,
        version,
        platform,
        increment,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_content_service + 'get'
                + "/by-game-id/by-username/by-path/by-version/by-platform/by-increment"
                + "/@game_id/" + game_id            
                + "/@username/" + username            
                + "/@path/" + path            
                + "/@version/" + version            
                + "/@platform/" + platform            
                + "/@increment/" + increment            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_content_game_id_username_path_version_platform_increment_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_content_get_game_profile_content_game_id_username_path_version_platform_increment_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_content_game_id_username_path_version_platform_increment(data);} catch(e) { _log("Error calling: error_get_game_profile_content_game_id_username_path_version_platform_increment: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_content_get_game_profile_content_game_id_username_path_version_platform_increment_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_content_game_id_username_path_version_platform_increment(data);} catch(e) { _log("Error calling: handle_get_game_profile_content_game_id_username_path_version_platform_increment: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_app = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_app.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_app: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_app_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_app_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_app_count_game_app_callback", true);
            // call a method that can be inline callback
            try {error_count_game_app(data);} catch(e) { _log("Error calling: error_count_game_app: " + e);}
        }
        else {
            _log("SUCCESS::game_app_count_game_app_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_app(data);} catch(e) { _log("Error calling: handle_count_game_app: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_app_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_app_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_app_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_app_count_game_app_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_app_uuid(data);} catch(e) { _log("Error calling: error_count_game_app_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_app_count_game_app_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_app_uuid(data);} catch(e) { _log("Error calling: handle_count_game_app_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_app_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_app_service + 'count'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_app_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_app_count_game_app_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_app_game_id(data);} catch(e) { _log("Error calling: error_count_game_app_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_app_count_game_app_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_app_game_id(data);} catch(e) { _log("Error calling: handle_count_game_app_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_app_app_id: function
    (
        app_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_app_service + 'count'
                + "/by-app-id"
                + "/@app_id/" + app_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_app_app_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_app_count_game_app_app_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_app_app_id(data);} catch(e) { _log("Error calling: error_count_game_app_app_id: " + e);}
        }
        else {
            _log("SUCCESS::game_app_count_game_app_app_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_app_app_id(data);} catch(e) { _log("Error calling: handle_count_game_app_app_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_app_game_id_app_id: function
    (
        game_id,
        app_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_app_service + 'count'
                + "/by-game-id/by-app-id"
                + "/@game_id/" + game_id            
                + "/@app_id/" + app_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_app_game_id_app_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_app_count_game_app_game_id_app_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_app_game_id_app_id(data);} catch(e) { _log("Error calling: error_count_game_app_game_id_app_id: " + e);}
        }
        else {
            _log("SUCCESS::game_app_count_game_app_game_id_app_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_app_game_id_app_id(data);} catch(e) { _log("Error calling: handle_count_game_app_game_id_app_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_app_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_app_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_app_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_app_browse_game_app_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_app_filter(data);} catch(e) { _log("Error calling: error_browse_game_app_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_app_browse_game_app_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_app_filter(data);} catch(e) { _log("Error calling: handle_browse_game_app_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_app_uuid: function
    (
        status,
        uuid,
        date_modified,
        active,
        date_created,
        game_id,
        type,
        app_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_app_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@active": active
            , "@date_created": date_created
            , "@game_id": game_id
            , "@type": type
            , "@app_id": app_id
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_app_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_app_set_game_app_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_app_uuid(data);} catch(e) { _log("Error calling: error_set_game_app_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_app_set_game_app_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_app_uuid(data);} catch(e) { _log("Error calling: handle_set_game_app_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_app_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_app_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_app_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_app_del_game_app_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_app_uuid(data);} catch(e) { _log("Error calling: error_del_game_app_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_app_del_game_app_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_app_uuid(data);} catch(e) { _log("Error calling: handle_del_game_app_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_app: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_app_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_app_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_app_get_game_app_callback", true);
            // call a method that can be inline callback
            try {error_get_game_app(data);} catch(e) { _log("Error calling: error_get_game_app: " + e);}
        }
        else {
            _log("SUCCESS::game_app_get_game_app_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_app(data);} catch(e) { _log("Error calling: handle_get_game_app: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_app_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_app_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_app_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_app_get_game_app_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_app_uuid(data);} catch(e) { _log("Error calling: error_get_game_app_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_app_get_game_app_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_app_uuid(data);} catch(e) { _log("Error calling: handle_get_game_app_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_app_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_app_service + 'get'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_app_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_app_get_game_app_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_app_game_id(data);} catch(e) { _log("Error calling: error_get_game_app_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_app_get_game_app_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_app_game_id(data);} catch(e) { _log("Error calling: handle_get_game_app_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_app_app_id: function
    (
        app_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_app_service + 'get'
                + "/by-app-id"
                + "/@app_id/" + app_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_app_app_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_app_get_game_app_app_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_app_app_id(data);} catch(e) { _log("Error calling: error_get_game_app_app_id: " + e);}
        }
        else {
            _log("SUCCESS::game_app_get_game_app_app_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_app_app_id(data);} catch(e) { _log("Error calling: handle_get_game_app_app_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_app_game_id_app_id: function
    (
        game_id,
        app_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_app_service + 'get'
                + "/by-game-id/by-app-id"
                + "/@game_id/" + game_id            
                + "/@app_id/" + app_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_app_game_id_app_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_app_get_game_app_game_id_app_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_app_game_id_app_id(data);} catch(e) { _log("Error calling: error_get_game_app_game_id_app_id: " + e);}
        }
        else {
            _log("SUCCESS::game_app_get_game_app_game_id_app_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_app_game_id_app_id(data);} catch(e) { _log("Error calling: handle_get_game_app_game_id_app_id: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.profile_game_location = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.profile_game_location.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_profile_game_location: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_location_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_location_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_location_count_profile_game_location_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game_location(data);} catch(e) { _log("Error calling: error_count_profile_game_location: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_location_count_profile_game_location_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game_location(data);} catch(e) { _log("Error calling: handle_count_profile_game_location: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_profile_game_location_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_location_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_location_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_location_count_profile_game_location_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game_location_uuid(data);} catch(e) { _log("Error calling: error_count_profile_game_location_uuid: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_location_count_profile_game_location_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game_location_uuid(data);} catch(e) { _log("Error calling: handle_count_profile_game_location_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_profile_game_location_game_location_id: function
    (
        game_location_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_location_service + 'count'
                + "/by-game-location-id"
                + "/@game_location_id/" + game_location_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_location_game_location_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_location_count_profile_game_location_game_location_id_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game_location_game_location_id(data);} catch(e) { _log("Error calling: error_count_profile_game_location_game_location_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_location_count_profile_game_location_game_location_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game_location_game_location_id(data);} catch(e) { _log("Error calling: handle_count_profile_game_location_game_location_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_profile_game_location_profile_id: function
    (
        profile_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_location_service + 'count'
                + "/by-profile-id"
                + "/@profile_id/" + profile_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_location_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_location_count_profile_game_location_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game_location_profile_id(data);} catch(e) { _log("Error calling: error_count_profile_game_location_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_location_count_profile_game_location_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game_location_profile_id(data);} catch(e) { _log("Error calling: handle_count_profile_game_location_profile_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_profile_game_location_profile_id_game_location_id: function
    (
        profile_id,
        game_location_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_location_service + 'count'
                + "/by-profile-id/by-game-location-id"
                + "/@profile_id/" + profile_id            
                + "/@game_location_id/" + game_location_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_profile_game_location_profile_id_game_location_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_location_count_profile_game_location_profile_id_game_location_id_callback", true);
            // call a method that can be inline callback
            try {error_count_profile_game_location_profile_id_game_location_id(data);} catch(e) { _log("Error calling: error_count_profile_game_location_profile_id_game_location_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_location_count_profile_game_location_profile_id_game_location_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_profile_game_location_profile_id_game_location_id(data);} catch(e) { _log("Error calling: handle_count_profile_game_location_profile_id_game_location_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_profile_game_location_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_location_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_profile_game_location_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_location_browse_profile_game_location_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_profile_game_location_filter(data);} catch(e) { _log("Error calling: error_browse_profile_game_location_filter: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_location_browse_profile_game_location_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_profile_game_location_filter(data);} catch(e) { _log("Error calling: handle_browse_profile_game_location_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_profile_game_location_uuid: function
    (
        status,
        game_location_id,
        type_id,
        uuid,
        date_modified,
        active,
        date_created,
        profile_id,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_location_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@game_location_id": game_location_id
            , "@type_id": type_id
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@active": active
            , "@date_created": date_created
            , "@profile_id": profile_id
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_profile_game_location_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_location_set_profile_game_location_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_profile_game_location_uuid(data);} catch(e) { _log("Error calling: error_set_profile_game_location_uuid: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_location_set_profile_game_location_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_profile_game_location_uuid(data);} catch(e) { _log("Error calling: handle_set_profile_game_location_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_profile_game_location_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_location_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_profile_game_location_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_location_del_profile_game_location_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_profile_game_location_uuid(data);} catch(e) { _log("Error calling: error_del_profile_game_location_uuid: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_location_del_profile_game_location_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_profile_game_location_uuid(data);} catch(e) { _log("Error calling: handle_del_profile_game_location_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_profile_game_location: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_location_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_profile_game_location_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_location_get_profile_game_location_callback", true);
            // call a method that can be inline callback
            try {error_get_profile_game_location(data);} catch(e) { _log("Error calling: error_get_profile_game_location: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_location_get_profile_game_location_callback", false);
            // call a method that can be inline callback
            try {handle_get_profile_game_location(data);} catch(e) { _log("Error calling: handle_get_profile_game_location: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_profile_game_location_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_location_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_profile_game_location_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_location_get_profile_game_location_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_profile_game_location_uuid(data);} catch(e) { _log("Error calling: error_get_profile_game_location_uuid: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_location_get_profile_game_location_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_profile_game_location_uuid(data);} catch(e) { _log("Error calling: handle_get_profile_game_location_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_profile_game_location_game_location_id: function
    (
        game_location_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_location_service + 'get'
                + "/by-game-location-id"
                + "/@game_location_id/" + game_location_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_profile_game_location_game_location_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_location_get_profile_game_location_game_location_id_callback", true);
            // call a method that can be inline callback
            try {error_get_profile_game_location_game_location_id(data);} catch(e) { _log("Error calling: error_get_profile_game_location_game_location_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_location_get_profile_game_location_game_location_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_profile_game_location_game_location_id(data);} catch(e) { _log("Error calling: handle_get_profile_game_location_game_location_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_profile_game_location_profile_id: function
    (
        profile_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_location_service + 'get'
                + "/by-profile-id"
                + "/@profile_id/" + profile_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_profile_game_location_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_location_get_profile_game_location_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_get_profile_game_location_profile_id(data);} catch(e) { _log("Error calling: error_get_profile_game_location_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_location_get_profile_game_location_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_profile_game_location_profile_id(data);} catch(e) { _log("Error calling: handle_get_profile_game_location_profile_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_profile_game_location_profile_id_game_location_id: function
    (
        profile_id,
        game_location_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.profile_game_location_service + 'get'
                + "/by-profile-id/by-game-location-id"
                + "/@profile_id/" + profile_id            
                + "/@game_location_id/" + game_location_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_profile_game_location_profile_id_game_location_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::profile_game_location_get_profile_game_location_profile_id_game_location_id_callback", true);
            // call a method that can be inline callback
            try {error_get_profile_game_location_profile_id_game_location_id(data);} catch(e) { _log("Error calling: error_get_profile_game_location_profile_id_game_location_id: " + e);}
        }
        else {
            _log("SUCCESS::profile_game_location_get_profile_game_location_profile_id_game_location_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_profile_game_location_profile_id_game_location_id(data);} catch(e) { _log("Error calling: handle_get_profile_game_location_profile_id_game_location_id: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_photo = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_photo.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_photo: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_photo_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_count_game_photo_callback", true);
            // call a method that can be inline callback
            try {error_count_game_photo(data);} catch(e) { _log("Error calling: error_count_game_photo: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_count_game_photo_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_photo(data);} catch(e) { _log("Error calling: handle_count_game_photo: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_photo_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_photo_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_count_game_photo_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_photo_uuid(data);} catch(e) { _log("Error calling: error_count_game_photo_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_count_game_photo_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_photo_uuid(data);} catch(e) { _log("Error calling: handle_count_game_photo_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_photo_external_id: function
    (
        external_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'count'
                + "/by-external-id"
                + "/@external_id/" + external_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_photo_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_count_game_photo_external_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_photo_external_id(data);} catch(e) { _log("Error calling: error_count_game_photo_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_count_game_photo_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_photo_external_id(data);} catch(e) { _log("Error calling: handle_count_game_photo_external_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_photo_url: function
    (
        url,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'count'
                + "/by-url"
                + "/@url/" + url            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_photo_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_count_game_photo_url_callback", true);
            // call a method that can be inline callback
            try {error_count_game_photo_url(data);} catch(e) { _log("Error calling: error_count_game_photo_url: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_count_game_photo_url_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_photo_url(data);} catch(e) { _log("Error calling: handle_count_game_photo_url: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_photo_url_external_id: function
    (
        url,
        external_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'count'
                + "/by-url/by-external-id"
                + "/@url/" + url            
                + "/@external_id/" + external_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_photo_url_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_count_game_photo_url_external_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_photo_url_external_id(data);} catch(e) { _log("Error calling: error_count_game_photo_url_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_count_game_photo_url_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_photo_url_external_id(data);} catch(e) { _log("Error calling: handle_count_game_photo_url_external_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_photo_uuid_external_id: function
    (
        uuid,
        external_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'count'
                + "/by-uuid/by-external-id"
                + "/@uuid/" + uuid            
                + "/@external_id/" + external_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_photo_uuid_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_count_game_photo_uuid_external_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_photo_uuid_external_id(data);} catch(e) { _log("Error calling: error_count_game_photo_uuid_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_count_game_photo_uuid_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_photo_uuid_external_id(data);} catch(e) { _log("Error calling: handle_count_game_photo_uuid_external_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_photo_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_photo_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_browse_game_photo_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_photo_filter(data);} catch(e) { _log("Error calling: error_browse_game_photo_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_browse_game_photo_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_photo_filter(data);} catch(e) { _log("Error calling: handle_browse_game_photo_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_photo_uuid: function
    (
        status,
        third_party_oembed,
        code,
        display_name,
        name,
        date_modified,
        url,
        third_party_data,
        uuid,
        third_party_url,
        third_party_id,
        content_type,
        external_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@uuid": uuid
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@content_type": content_type
            , "@external_id": external_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_photo_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_set_game_photo_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_photo_uuid(data);} catch(e) { _log("Error calling: error_set_game_photo_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_set_game_photo_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_photo_uuid(data);} catch(e) { _log("Error calling: handle_set_game_photo_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_photo_external_id: function
    (
        status,
        third_party_oembed,
        code,
        display_name,
        name,
        date_modified,
        url,
        third_party_data,
        uuid,
        third_party_url,
        third_party_id,
        content_type,
        external_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'set'
                + "/by-external-id"
                + "/@external_id/" + external_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@uuid": uuid
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@content_type": content_type
            , "@external_id": external_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_photo_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_set_game_photo_external_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_photo_external_id(data);} catch(e) { _log("Error calling: error_set_game_photo_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_set_game_photo_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_photo_external_id(data);} catch(e) { _log("Error calling: handle_set_game_photo_external_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_photo_url: function
    (
        status,
        third_party_oembed,
        code,
        display_name,
        name,
        date_modified,
        url,
        third_party_data,
        uuid,
        third_party_url,
        third_party_id,
        content_type,
        external_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'set'
                + "/by-url"
                + "/@url/" + url            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@uuid": uuid
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@content_type": content_type
            , "@external_id": external_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_photo_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_set_game_photo_url_callback", true);
            // call a method that can be inline callback
            try {error_set_game_photo_url(data);} catch(e) { _log("Error calling: error_set_game_photo_url: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_set_game_photo_url_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_photo_url(data);} catch(e) { _log("Error calling: handle_set_game_photo_url: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_photo_url_external_id: function
    (
        status,
        third_party_oembed,
        code,
        display_name,
        name,
        date_modified,
        url,
        third_party_data,
        uuid,
        third_party_url,
        third_party_id,
        content_type,
        external_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'set'
                + "/by-url/by-external-id"
                + "/@url/" + url            
                + "/@external_id/" + external_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@uuid": uuid
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@content_type": content_type
            , "@external_id": external_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_photo_url_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_set_game_photo_url_external_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_photo_url_external_id(data);} catch(e) { _log("Error calling: error_set_game_photo_url_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_set_game_photo_url_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_photo_url_external_id(data);} catch(e) { _log("Error calling: handle_set_game_photo_url_external_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_photo_uuid_external_id: function
    (
        status,
        third_party_oembed,
        code,
        display_name,
        name,
        date_modified,
        url,
        third_party_data,
        uuid,
        third_party_url,
        third_party_id,
        content_type,
        external_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'set'
                + "/by-uuid/by-external-id"
                + "/@uuid/" + uuid            
                + "/@external_id/" + external_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@uuid": uuid
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@content_type": content_type
            , "@external_id": external_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_photo_uuid_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_set_game_photo_uuid_external_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_photo_uuid_external_id(data);} catch(e) { _log("Error calling: error_set_game_photo_uuid_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_set_game_photo_uuid_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_photo_uuid_external_id(data);} catch(e) { _log("Error calling: handle_set_game_photo_uuid_external_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_photo_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_photo_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_del_game_photo_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_photo_uuid(data);} catch(e) { _log("Error calling: error_del_game_photo_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_del_game_photo_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_photo_uuid(data);} catch(e) { _log("Error calling: handle_del_game_photo_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_photo_external_id: function
    (
        external_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'del'
                + "/by-external-id"
                + "/@external_id/" + external_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_photo_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_del_game_photo_external_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_photo_external_id(data);} catch(e) { _log("Error calling: error_del_game_photo_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_del_game_photo_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_photo_external_id(data);} catch(e) { _log("Error calling: handle_del_game_photo_external_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_photo_url: function
    (
        url,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'del'
                + "/by-url"
                + "/@url/" + url            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_photo_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_del_game_photo_url_callback", true);
            // call a method that can be inline callback
            try {error_del_game_photo_url(data);} catch(e) { _log("Error calling: error_del_game_photo_url: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_del_game_photo_url_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_photo_url(data);} catch(e) { _log("Error calling: handle_del_game_photo_url: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_photo_url_external_id: function
    (
        url,
        external_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'del'
                + "/by-url/by-external-id"
                + "/@url/" + url            
                + "/@external_id/" + external_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_photo_url_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_del_game_photo_url_external_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_photo_url_external_id(data);} catch(e) { _log("Error calling: error_del_game_photo_url_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_del_game_photo_url_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_photo_url_external_id(data);} catch(e) { _log("Error calling: handle_del_game_photo_url_external_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_photo_uuid_external_id: function
    (
        uuid,
        external_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'del'
                + "/by-uuid/by-external-id"
                + "/@uuid/" + uuid            
                + "/@external_id/" + external_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_photo_uuid_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_del_game_photo_uuid_external_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_photo_uuid_external_id(data);} catch(e) { _log("Error calling: error_del_game_photo_uuid_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_del_game_photo_uuid_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_photo_uuid_external_id(data);} catch(e) { _log("Error calling: handle_del_game_photo_uuid_external_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_photo: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_photo_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_get_game_photo_callback", true);
            // call a method that can be inline callback
            try {error_get_game_photo(data);} catch(e) { _log("Error calling: error_get_game_photo: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_get_game_photo_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_photo(data);} catch(e) { _log("Error calling: handle_get_game_photo: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_photo_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_photo_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_get_game_photo_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_photo_uuid(data);} catch(e) { _log("Error calling: error_get_game_photo_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_get_game_photo_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_photo_uuid(data);} catch(e) { _log("Error calling: handle_get_game_photo_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_photo_external_id: function
    (
        external_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'get'
                + "/by-external-id"
                + "/@external_id/" + external_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_photo_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_get_game_photo_external_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_photo_external_id(data);} catch(e) { _log("Error calling: error_get_game_photo_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_get_game_photo_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_photo_external_id(data);} catch(e) { _log("Error calling: handle_get_game_photo_external_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_photo_url: function
    (
        url,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'get'
                + "/by-url"
                + "/@url/" + url            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_photo_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_get_game_photo_url_callback", true);
            // call a method that can be inline callback
            try {error_get_game_photo_url(data);} catch(e) { _log("Error calling: error_get_game_photo_url: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_get_game_photo_url_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_photo_url(data);} catch(e) { _log("Error calling: handle_get_game_photo_url: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_photo_url_external_id: function
    (
        url,
        external_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'get'
                + "/by-url/by-external-id"
                + "/@url/" + url            
                + "/@external_id/" + external_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_photo_url_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_get_game_photo_url_external_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_photo_url_external_id(data);} catch(e) { _log("Error calling: error_get_game_photo_url_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_get_game_photo_url_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_photo_url_external_id(data);} catch(e) { _log("Error calling: handle_get_game_photo_url_external_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_photo_uuid_external_id: function
    (
        uuid,
        external_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_photo_service + 'get'
                + "/by-uuid/by-external-id"
                + "/@uuid/" + uuid            
                + "/@external_id/" + external_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_photo_uuid_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_photo_get_game_photo_uuid_external_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_photo_uuid_external_id(data);} catch(e) { _log("Error calling: error_get_game_photo_uuid_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_photo_get_game_photo_uuid_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_photo_uuid_external_id(data);} catch(e) { _log("Error calling: handle_get_game_photo_uuid_external_id: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_video = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_video.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_video: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_video_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_count_game_video_callback", true);
            // call a method that can be inline callback
            try {error_count_game_video(data);} catch(e) { _log("Error calling: error_count_game_video: " + e);}
        }
        else {
            _log("SUCCESS::game_video_count_game_video_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_video(data);} catch(e) { _log("Error calling: handle_count_game_video: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_video_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_video_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_count_game_video_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_video_uuid(data);} catch(e) { _log("Error calling: error_count_game_video_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_video_count_game_video_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_video_uuid(data);} catch(e) { _log("Error calling: handle_count_game_video_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_video_external_id: function
    (
        external_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'count'
                + "/by-external-id"
                + "/@external_id/" + external_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_video_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_count_game_video_external_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_video_external_id(data);} catch(e) { _log("Error calling: error_count_game_video_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_video_count_game_video_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_video_external_id(data);} catch(e) { _log("Error calling: handle_count_game_video_external_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_video_url: function
    (
        url,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'count'
                + "/by-url"
                + "/@url/" + url            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_video_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_count_game_video_url_callback", true);
            // call a method that can be inline callback
            try {error_count_game_video_url(data);} catch(e) { _log("Error calling: error_count_game_video_url: " + e);}
        }
        else {
            _log("SUCCESS::game_video_count_game_video_url_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_video_url(data);} catch(e) { _log("Error calling: handle_count_game_video_url: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_video_url_external_id: function
    (
        url,
        external_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'count'
                + "/by-url/by-external-id"
                + "/@url/" + url            
                + "/@external_id/" + external_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_video_url_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_count_game_video_url_external_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_video_url_external_id(data);} catch(e) { _log("Error calling: error_count_game_video_url_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_video_count_game_video_url_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_video_url_external_id(data);} catch(e) { _log("Error calling: handle_count_game_video_url_external_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_video_uuid_external_id: function
    (
        uuid,
        external_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'count'
                + "/by-uuid/by-external-id"
                + "/@uuid/" + uuid            
                + "/@external_id/" + external_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_video_uuid_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_count_game_video_uuid_external_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_video_uuid_external_id(data);} catch(e) { _log("Error calling: error_count_game_video_uuid_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_video_count_game_video_uuid_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_video_uuid_external_id(data);} catch(e) { _log("Error calling: handle_count_game_video_uuid_external_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_video_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_video_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_browse_game_video_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_video_filter(data);} catch(e) { _log("Error calling: error_browse_game_video_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_video_browse_game_video_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_video_filter(data);} catch(e) { _log("Error calling: handle_browse_game_video_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_video_uuid: function
    (
        status,
        third_party_oembed,
        code,
        display_name,
        name,
        date_modified,
        url,
        third_party_data,
        uuid,
        third_party_url,
        third_party_id,
        content_type,
        external_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@uuid": uuid
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@content_type": content_type
            , "@external_id": external_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_video_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_set_game_video_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_video_uuid(data);} catch(e) { _log("Error calling: error_set_game_video_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_video_set_game_video_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_video_uuid(data);} catch(e) { _log("Error calling: handle_set_game_video_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_video_external_id: function
    (
        status,
        third_party_oembed,
        code,
        display_name,
        name,
        date_modified,
        url,
        third_party_data,
        uuid,
        third_party_url,
        third_party_id,
        content_type,
        external_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'set'
                + "/by-external-id"
                + "/@external_id/" + external_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@uuid": uuid
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@content_type": content_type
            , "@external_id": external_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_video_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_set_game_video_external_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_video_external_id(data);} catch(e) { _log("Error calling: error_set_game_video_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_video_set_game_video_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_video_external_id(data);} catch(e) { _log("Error calling: handle_set_game_video_external_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_video_url: function
    (
        status,
        third_party_oembed,
        code,
        display_name,
        name,
        date_modified,
        url,
        third_party_data,
        uuid,
        third_party_url,
        third_party_id,
        content_type,
        external_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'set'
                + "/by-url"
                + "/@url/" + url            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@uuid": uuid
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@content_type": content_type
            , "@external_id": external_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_video_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_set_game_video_url_callback", true);
            // call a method that can be inline callback
            try {error_set_game_video_url(data);} catch(e) { _log("Error calling: error_set_game_video_url: " + e);}
        }
        else {
            _log("SUCCESS::game_video_set_game_video_url_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_video_url(data);} catch(e) { _log("Error calling: handle_set_game_video_url: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_video_url_external_id: function
    (
        status,
        third_party_oembed,
        code,
        display_name,
        name,
        date_modified,
        url,
        third_party_data,
        uuid,
        third_party_url,
        third_party_id,
        content_type,
        external_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'set'
                + "/by-url/by-external-id"
                + "/@url/" + url            
                + "/@external_id/" + external_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@uuid": uuid
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@content_type": content_type
            , "@external_id": external_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_video_url_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_set_game_video_url_external_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_video_url_external_id(data);} catch(e) { _log("Error calling: error_set_game_video_url_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_video_set_game_video_url_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_video_url_external_id(data);} catch(e) { _log("Error calling: handle_set_game_video_url_external_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_video_uuid_external_id: function
    (
        status,
        third_party_oembed,
        code,
        display_name,
        name,
        date_modified,
        url,
        third_party_data,
        uuid,
        third_party_url,
        third_party_id,
        content_type,
        external_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'set'
                + "/by-uuid/by-external-id"
                + "/@uuid/" + uuid            
                + "/@external_id/" + external_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@uuid": uuid
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@content_type": content_type
            , "@external_id": external_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_video_uuid_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_set_game_video_uuid_external_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_video_uuid_external_id(data);} catch(e) { _log("Error calling: error_set_game_video_uuid_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_video_set_game_video_uuid_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_video_uuid_external_id(data);} catch(e) { _log("Error calling: handle_set_game_video_uuid_external_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_video_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_video_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_del_game_video_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_video_uuid(data);} catch(e) { _log("Error calling: error_del_game_video_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_video_del_game_video_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_video_uuid(data);} catch(e) { _log("Error calling: handle_del_game_video_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_video_external_id: function
    (
        external_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'del'
                + "/by-external-id"
                + "/@external_id/" + external_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_video_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_del_game_video_external_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_video_external_id(data);} catch(e) { _log("Error calling: error_del_game_video_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_video_del_game_video_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_video_external_id(data);} catch(e) { _log("Error calling: handle_del_game_video_external_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_video_url: function
    (
        url,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'del'
                + "/by-url"
                + "/@url/" + url            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_video_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_del_game_video_url_callback", true);
            // call a method that can be inline callback
            try {error_del_game_video_url(data);} catch(e) { _log("Error calling: error_del_game_video_url: " + e);}
        }
        else {
            _log("SUCCESS::game_video_del_game_video_url_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_video_url(data);} catch(e) { _log("Error calling: handle_del_game_video_url: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_video_url_external_id: function
    (
        url,
        external_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'del'
                + "/by-url/by-external-id"
                + "/@url/" + url            
                + "/@external_id/" + external_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_video_url_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_del_game_video_url_external_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_video_url_external_id(data);} catch(e) { _log("Error calling: error_del_game_video_url_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_video_del_game_video_url_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_video_url_external_id(data);} catch(e) { _log("Error calling: handle_del_game_video_url_external_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_video_uuid_external_id: function
    (
        uuid,
        external_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'del'
                + "/by-uuid/by-external-id"
                + "/@uuid/" + uuid            
                + "/@external_id/" + external_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_video_uuid_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_del_game_video_uuid_external_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_video_uuid_external_id(data);} catch(e) { _log("Error calling: error_del_game_video_uuid_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_video_del_game_video_uuid_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_video_uuid_external_id(data);} catch(e) { _log("Error calling: handle_del_game_video_uuid_external_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_video: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_video_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_get_game_video_callback", true);
            // call a method that can be inline callback
            try {error_get_game_video(data);} catch(e) { _log("Error calling: error_get_game_video: " + e);}
        }
        else {
            _log("SUCCESS::game_video_get_game_video_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_video(data);} catch(e) { _log("Error calling: handle_get_game_video: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_video_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_video_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_get_game_video_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_video_uuid(data);} catch(e) { _log("Error calling: error_get_game_video_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_video_get_game_video_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_video_uuid(data);} catch(e) { _log("Error calling: handle_get_game_video_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_video_external_id: function
    (
        external_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'get'
                + "/by-external-id"
                + "/@external_id/" + external_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_video_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_get_game_video_external_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_video_external_id(data);} catch(e) { _log("Error calling: error_get_game_video_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_video_get_game_video_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_video_external_id(data);} catch(e) { _log("Error calling: handle_get_game_video_external_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_video_url: function
    (
        url,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'get'
                + "/by-url"
                + "/@url/" + url            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_video_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_get_game_video_url_callback", true);
            // call a method that can be inline callback
            try {error_get_game_video_url(data);} catch(e) { _log("Error calling: error_get_game_video_url: " + e);}
        }
        else {
            _log("SUCCESS::game_video_get_game_video_url_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_video_url(data);} catch(e) { _log("Error calling: handle_get_game_video_url: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_video_url_external_id: function
    (
        url,
        external_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'get'
                + "/by-url/by-external-id"
                + "/@url/" + url            
                + "/@external_id/" + external_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_video_url_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_get_game_video_url_external_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_video_url_external_id(data);} catch(e) { _log("Error calling: error_get_game_video_url_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_video_get_game_video_url_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_video_url_external_id(data);} catch(e) { _log("Error calling: handle_get_game_video_url_external_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_video_uuid_external_id: function
    (
        uuid,
        external_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_video_service + 'get'
                + "/by-uuid/by-external-id"
                + "/@uuid/" + uuid            
                + "/@external_id/" + external_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_video_uuid_external_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_video_get_game_video_uuid_external_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_video_uuid_external_id(data);} catch(e) { _log("Error calling: error_get_game_video_uuid_external_id: " + e);}
        }
        else {
            _log("SUCCESS::game_video_get_game_video_uuid_external_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_video_uuid_external_id(data);} catch(e) { _log("Error calling: handle_get_game_video_uuid_external_id: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_rpg_item = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_rpg_item.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_rpg_item: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_count_game_rpg_item_callback", true);
            // call a method that can be inline callback
            try {error_count_game_rpg_item(data);} catch(e) { _log("Error calling: error_count_game_rpg_item: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_count_game_rpg_item_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_rpg_item(data);} catch(e) { _log("Error calling: handle_count_game_rpg_item: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_count_game_rpg_item_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_rpg_item_uuid(data);} catch(e) { _log("Error calling: error_count_game_rpg_item_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_count_game_rpg_item_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_rpg_item_uuid(data);} catch(e) { _log("Error calling: handle_count_game_rpg_item_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'count'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_count_game_rpg_item_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_rpg_item_game_id(data);} catch(e) { _log("Error calling: error_count_game_rpg_item_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_count_game_rpg_item_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_rpg_item_game_id(data);} catch(e) { _log("Error calling: handle_count_game_rpg_item_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_url: function
    (
        url,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'count'
                + "/by-url"
                + "/@url/" + url            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_count_game_rpg_item_url_callback", true);
            // call a method that can be inline callback
            try {error_count_game_rpg_item_url(data);} catch(e) { _log("Error calling: error_count_game_rpg_item_url: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_count_game_rpg_item_url_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_rpg_item_url(data);} catch(e) { _log("Error calling: handle_count_game_rpg_item_url: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_url_game_id: function
    (
        url,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'count'
                + "/by-url/by-game-id"
                + "/@url/" + url            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_url_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_count_game_rpg_item_url_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_rpg_item_url_game_id(data);} catch(e) { _log("Error calling: error_count_game_rpg_item_url_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_count_game_rpg_item_url_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_rpg_item_url_game_id(data);} catch(e) { _log("Error calling: handle_count_game_rpg_item_url_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_uuid_game_id: function
    (
        uuid,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'count'
                + "/by-uuid/by-game-id"
                + "/@uuid/" + uuid            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_uuid_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_count_game_rpg_item_uuid_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_rpg_item_uuid_game_id(data);} catch(e) { _log("Error calling: error_count_game_rpg_item_uuid_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_count_game_rpg_item_uuid_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_rpg_item_uuid_game_id(data);} catch(e) { _log("Error calling: handle_count_game_rpg_item_uuid_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_rpg_item_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_rpg_item_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_browse_game_rpg_item_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_rpg_item_filter(data);} catch(e) { _log("Error calling: error_browse_game_rpg_item_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_browse_game_rpg_item_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_rpg_item_filter(data);} catch(e) { _log("Error calling: handle_browse_game_rpg_item_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_rpg_item_uuid: function
    (
        third_party_oembed,
        code,
        game_defense,
        third_party_url,
        third_party_id,
        game_attack,
        display_name,
        uuid,
        game_health,
        game_energy,
        type,
        status,
        description,
        content_type,
        active,
        game_id,
        name,
        date_modified,
        url,
        third_party_data,
        game_price,
        game_type,
        game_skill,
        date_created,
        game_data,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@game_defense": game_defense
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@game_attack": game_attack
            , "@display_name": display_name
            , "@uuid": uuid
            , "@game_health": game_health
            , "@game_energy": game_energy
            , "@type": type
            , "@status": status
            , "@description": description
            , "@content_type": content_type
            , "@active": active
            , "@game_id": game_id
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@game_price": game_price
            , "@game_type": game_type
            , "@game_skill": game_skill
            , "@date_created": date_created
            , "@game_data": game_data
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_rpg_item_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_set_game_rpg_item_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_rpg_item_uuid(data);} catch(e) { _log("Error calling: error_set_game_rpg_item_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_set_game_rpg_item_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_rpg_item_uuid(data);} catch(e) { _log("Error calling: handle_set_game_rpg_item_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_rpg_item_game_id: function
    (
        third_party_oembed,
        code,
        game_defense,
        third_party_url,
        third_party_id,
        game_attack,
        display_name,
        uuid,
        game_health,
        game_energy,
        type,
        status,
        description,
        content_type,
        active,
        game_id,
        name,
        date_modified,
        url,
        third_party_data,
        game_price,
        game_type,
        game_skill,
        date_created,
        game_data,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'set'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@game_defense": game_defense
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@game_attack": game_attack
            , "@display_name": display_name
            , "@uuid": uuid
            , "@game_health": game_health
            , "@game_energy": game_energy
            , "@type": type
            , "@status": status
            , "@description": description
            , "@content_type": content_type
            , "@active": active
            , "@game_id": game_id
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@game_price": game_price
            , "@game_type": game_type
            , "@game_skill": game_skill
            , "@date_created": date_created
            , "@game_data": game_data
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_rpg_item_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_set_game_rpg_item_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_rpg_item_game_id(data);} catch(e) { _log("Error calling: error_set_game_rpg_item_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_set_game_rpg_item_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_rpg_item_game_id(data);} catch(e) { _log("Error calling: handle_set_game_rpg_item_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_rpg_item_url: function
    (
        third_party_oembed,
        code,
        game_defense,
        third_party_url,
        third_party_id,
        game_attack,
        display_name,
        uuid,
        game_health,
        game_energy,
        type,
        status,
        description,
        content_type,
        active,
        game_id,
        name,
        date_modified,
        url,
        third_party_data,
        game_price,
        game_type,
        game_skill,
        date_created,
        game_data,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'set'
                + "/by-url"
                + "/@url/" + url            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@game_defense": game_defense
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@game_attack": game_attack
            , "@display_name": display_name
            , "@uuid": uuid
            , "@game_health": game_health
            , "@game_energy": game_energy
            , "@type": type
            , "@status": status
            , "@description": description
            , "@content_type": content_type
            , "@active": active
            , "@game_id": game_id
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@game_price": game_price
            , "@game_type": game_type
            , "@game_skill": game_skill
            , "@date_created": date_created
            , "@game_data": game_data
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_rpg_item_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_set_game_rpg_item_url_callback", true);
            // call a method that can be inline callback
            try {error_set_game_rpg_item_url(data);} catch(e) { _log("Error calling: error_set_game_rpg_item_url: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_set_game_rpg_item_url_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_rpg_item_url(data);} catch(e) { _log("Error calling: handle_set_game_rpg_item_url: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_rpg_item_url_game_id: function
    (
        third_party_oembed,
        code,
        game_defense,
        third_party_url,
        third_party_id,
        game_attack,
        display_name,
        uuid,
        game_health,
        game_energy,
        type,
        status,
        description,
        content_type,
        active,
        game_id,
        name,
        date_modified,
        url,
        third_party_data,
        game_price,
        game_type,
        game_skill,
        date_created,
        game_data,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'set'
                + "/by-url/by-game-id"
                + "/@url/" + url            
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@game_defense": game_defense
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@game_attack": game_attack
            , "@display_name": display_name
            , "@uuid": uuid
            , "@game_health": game_health
            , "@game_energy": game_energy
            , "@type": type
            , "@status": status
            , "@description": description
            , "@content_type": content_type
            , "@active": active
            , "@game_id": game_id
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@game_price": game_price
            , "@game_type": game_type
            , "@game_skill": game_skill
            , "@date_created": date_created
            , "@game_data": game_data
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_rpg_item_url_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_set_game_rpg_item_url_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_rpg_item_url_game_id(data);} catch(e) { _log("Error calling: error_set_game_rpg_item_url_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_set_game_rpg_item_url_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_rpg_item_url_game_id(data);} catch(e) { _log("Error calling: handle_set_game_rpg_item_url_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_rpg_item_uuid_game_id: function
    (
        third_party_oembed,
        code,
        game_defense,
        third_party_url,
        third_party_id,
        game_attack,
        display_name,
        uuid,
        game_health,
        game_energy,
        type,
        status,
        description,
        content_type,
        active,
        game_id,
        name,
        date_modified,
        url,
        third_party_data,
        game_price,
        game_type,
        game_skill,
        date_created,
        game_data,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'set'
                + "/by-uuid/by-game-id"
                + "/@uuid/" + uuid            
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@game_defense": game_defense
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@game_attack": game_attack
            , "@display_name": display_name
            , "@uuid": uuid
            , "@game_health": game_health
            , "@game_energy": game_energy
            , "@type": type
            , "@status": status
            , "@description": description
            , "@content_type": content_type
            , "@active": active
            , "@game_id": game_id
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@game_price": game_price
            , "@game_type": game_type
            , "@game_skill": game_skill
            , "@date_created": date_created
            , "@game_data": game_data
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_rpg_item_uuid_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_set_game_rpg_item_uuid_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_rpg_item_uuid_game_id(data);} catch(e) { _log("Error calling: error_set_game_rpg_item_uuid_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_set_game_rpg_item_uuid_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_rpg_item_uuid_game_id(data);} catch(e) { _log("Error calling: handle_set_game_rpg_item_uuid_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_rpg_item_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_del_game_rpg_item_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_rpg_item_uuid(data);} catch(e) { _log("Error calling: error_del_game_rpg_item_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_del_game_rpg_item_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_rpg_item_uuid(data);} catch(e) { _log("Error calling: handle_del_game_rpg_item_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'del'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_del_game_rpg_item_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_rpg_item_game_id(data);} catch(e) { _log("Error calling: error_del_game_rpg_item_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_del_game_rpg_item_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_rpg_item_game_id(data);} catch(e) { _log("Error calling: handle_del_game_rpg_item_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_url: function
    (
        url,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'del'
                + "/by-url"
                + "/@url/" + url            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_del_game_rpg_item_url_callback", true);
            // call a method that can be inline callback
            try {error_del_game_rpg_item_url(data);} catch(e) { _log("Error calling: error_del_game_rpg_item_url: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_del_game_rpg_item_url_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_rpg_item_url(data);} catch(e) { _log("Error calling: handle_del_game_rpg_item_url: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_url_game_id: function
    (
        url,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'del'
                + "/by-url/by-game-id"
                + "/@url/" + url            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_url_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_del_game_rpg_item_url_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_rpg_item_url_game_id(data);} catch(e) { _log("Error calling: error_del_game_rpg_item_url_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_del_game_rpg_item_url_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_rpg_item_url_game_id(data);} catch(e) { _log("Error calling: handle_del_game_rpg_item_url_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_uuid_game_id: function
    (
        uuid,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'del'
                + "/by-uuid/by-game-id"
                + "/@uuid/" + uuid            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_uuid_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_del_game_rpg_item_uuid_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_rpg_item_uuid_game_id(data);} catch(e) { _log("Error calling: error_del_game_rpg_item_uuid_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_del_game_rpg_item_uuid_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_rpg_item_uuid_game_id(data);} catch(e) { _log("Error calling: handle_del_game_rpg_item_uuid_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_rpg_item: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_get_game_rpg_item_callback", true);
            // call a method that can be inline callback
            try {error_get_game_rpg_item(data);} catch(e) { _log("Error calling: error_get_game_rpg_item: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_get_game_rpg_item_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_rpg_item(data);} catch(e) { _log("Error calling: handle_get_game_rpg_item: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_get_game_rpg_item_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_rpg_item_uuid(data);} catch(e) { _log("Error calling: error_get_game_rpg_item_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_get_game_rpg_item_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_rpg_item_uuid(data);} catch(e) { _log("Error calling: handle_get_game_rpg_item_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'get'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_get_game_rpg_item_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_rpg_item_game_id(data);} catch(e) { _log("Error calling: error_get_game_rpg_item_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_get_game_rpg_item_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_rpg_item_game_id(data);} catch(e) { _log("Error calling: handle_get_game_rpg_item_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_url: function
    (
        url,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'get'
                + "/by-url"
                + "/@url/" + url            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_get_game_rpg_item_url_callback", true);
            // call a method that can be inline callback
            try {error_get_game_rpg_item_url(data);} catch(e) { _log("Error calling: error_get_game_rpg_item_url: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_get_game_rpg_item_url_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_rpg_item_url(data);} catch(e) { _log("Error calling: handle_get_game_rpg_item_url: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_url_game_id: function
    (
        url,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'get'
                + "/by-url/by-game-id"
                + "/@url/" + url            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_url_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_get_game_rpg_item_url_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_rpg_item_url_game_id(data);} catch(e) { _log("Error calling: error_get_game_rpg_item_url_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_get_game_rpg_item_url_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_rpg_item_url_game_id(data);} catch(e) { _log("Error calling: handle_get_game_rpg_item_url_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_uuid_game_id: function
    (
        uuid,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_service + 'get'
                + "/by-uuid/by-game-id"
                + "/@uuid/" + uuid            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_uuid_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_get_game_rpg_item_uuid_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_rpg_item_uuid_game_id(data);} catch(e) { _log("Error calling: error_get_game_rpg_item_uuid_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_get_game_rpg_item_uuid_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_rpg_item_uuid_game_id(data);} catch(e) { _log("Error calling: handle_get_game_rpg_item_uuid_game_id: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_rpg_item_weapon = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_rpg_item_weapon.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_rpg_item_weapon: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_weapon_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_count_game_rpg_item_weapon_callback", true);
            // call a method that can be inline callback
            try {error_count_game_rpg_item_weapon(data);} catch(e) { _log("Error calling: error_count_game_rpg_item_weapon: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_count_game_rpg_item_weapon_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_rpg_item_weapon(data);} catch(e) { _log("Error calling: handle_count_game_rpg_item_weapon: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_weapon_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_weapon_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_count_game_rpg_item_weapon_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_rpg_item_weapon_uuid(data);} catch(e) { _log("Error calling: error_count_game_rpg_item_weapon_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_count_game_rpg_item_weapon_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_rpg_item_weapon_uuid(data);} catch(e) { _log("Error calling: handle_count_game_rpg_item_weapon_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_weapon_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'count'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_weapon_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_count_game_rpg_item_weapon_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_rpg_item_weapon_game_id(data);} catch(e) { _log("Error calling: error_count_game_rpg_item_weapon_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_count_game_rpg_item_weapon_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_rpg_item_weapon_game_id(data);} catch(e) { _log("Error calling: handle_count_game_rpg_item_weapon_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_weapon_url: function
    (
        url,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'count'
                + "/by-url"
                + "/@url/" + url            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_weapon_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_count_game_rpg_item_weapon_url_callback", true);
            // call a method that can be inline callback
            try {error_count_game_rpg_item_weapon_url(data);} catch(e) { _log("Error calling: error_count_game_rpg_item_weapon_url: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_count_game_rpg_item_weapon_url_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_rpg_item_weapon_url(data);} catch(e) { _log("Error calling: handle_count_game_rpg_item_weapon_url: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_weapon_url_game_id: function
    (
        url,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'count'
                + "/by-url/by-game-id"
                + "/@url/" + url            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_weapon_url_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_count_game_rpg_item_weapon_url_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_rpg_item_weapon_url_game_id(data);} catch(e) { _log("Error calling: error_count_game_rpg_item_weapon_url_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_count_game_rpg_item_weapon_url_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_rpg_item_weapon_url_game_id(data);} catch(e) { _log("Error calling: handle_count_game_rpg_item_weapon_url_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_weapon_uuid_game_id: function
    (
        uuid,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'count'
                + "/by-uuid/by-game-id"
                + "/@uuid/" + uuid            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_weapon_uuid_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_count_game_rpg_item_weapon_uuid_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_rpg_item_weapon_uuid_game_id(data);} catch(e) { _log("Error calling: error_count_game_rpg_item_weapon_uuid_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_count_game_rpg_item_weapon_uuid_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_rpg_item_weapon_uuid_game_id(data);} catch(e) { _log("Error calling: handle_count_game_rpg_item_weapon_uuid_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_rpg_item_weapon_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_rpg_item_weapon_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_browse_game_rpg_item_weapon_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_rpg_item_weapon_filter(data);} catch(e) { _log("Error calling: error_browse_game_rpg_item_weapon_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_browse_game_rpg_item_weapon_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_rpg_item_weapon_filter(data);} catch(e) { _log("Error calling: handle_browse_game_rpg_item_weapon_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_rpg_item_weapon_uuid: function
    (
        status,
        third_party_oembed,
        code,
        description,
        game_defense,
        third_party_url,
        third_party_id,
        content_type,
        type,
        active,
        game_id,
        game_attack,
        uuid,
        display_name,
        name,
        date_modified,
        url,
        third_party_data,
        game_price,
        game_type,
        game_skill,
        game_health,
        date_created,
        game_energy,
        game_data,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@description": description
            , "@game_defense": game_defense
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@content_type": content_type
            , "@type": type
            , "@active": active
            , "@game_id": game_id
            , "@game_attack": game_attack
            , "@uuid": uuid
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@game_price": game_price
            , "@game_type": game_type
            , "@game_skill": game_skill
            , "@game_health": game_health
            , "@date_created": date_created
            , "@game_energy": game_energy
            , "@game_data": game_data
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_rpg_item_weapon_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_set_game_rpg_item_weapon_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_rpg_item_weapon_uuid(data);} catch(e) { _log("Error calling: error_set_game_rpg_item_weapon_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_set_game_rpg_item_weapon_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_rpg_item_weapon_uuid(data);} catch(e) { _log("Error calling: handle_set_game_rpg_item_weapon_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_rpg_item_weapon_game_id: function
    (
        status,
        third_party_oembed,
        code,
        description,
        game_defense,
        third_party_url,
        third_party_id,
        content_type,
        type,
        active,
        game_id,
        game_attack,
        uuid,
        display_name,
        name,
        date_modified,
        url,
        third_party_data,
        game_price,
        game_type,
        game_skill,
        game_health,
        date_created,
        game_energy,
        game_data,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'set'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@description": description
            , "@game_defense": game_defense
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@content_type": content_type
            , "@type": type
            , "@active": active
            , "@game_id": game_id
            , "@game_attack": game_attack
            , "@uuid": uuid
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@game_price": game_price
            , "@game_type": game_type
            , "@game_skill": game_skill
            , "@game_health": game_health
            , "@date_created": date_created
            , "@game_energy": game_energy
            , "@game_data": game_data
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_rpg_item_weapon_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_set_game_rpg_item_weapon_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_rpg_item_weapon_game_id(data);} catch(e) { _log("Error calling: error_set_game_rpg_item_weapon_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_set_game_rpg_item_weapon_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_rpg_item_weapon_game_id(data);} catch(e) { _log("Error calling: handle_set_game_rpg_item_weapon_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_rpg_item_weapon_url: function
    (
        status,
        third_party_oembed,
        code,
        description,
        game_defense,
        third_party_url,
        third_party_id,
        content_type,
        type,
        active,
        game_id,
        game_attack,
        uuid,
        display_name,
        name,
        date_modified,
        url,
        third_party_data,
        game_price,
        game_type,
        game_skill,
        game_health,
        date_created,
        game_energy,
        game_data,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'set'
                + "/by-url"
                + "/@url/" + url            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@description": description
            , "@game_defense": game_defense
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@content_type": content_type
            , "@type": type
            , "@active": active
            , "@game_id": game_id
            , "@game_attack": game_attack
            , "@uuid": uuid
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@game_price": game_price
            , "@game_type": game_type
            , "@game_skill": game_skill
            , "@game_health": game_health
            , "@date_created": date_created
            , "@game_energy": game_energy
            , "@game_data": game_data
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_rpg_item_weapon_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_set_game_rpg_item_weapon_url_callback", true);
            // call a method that can be inline callback
            try {error_set_game_rpg_item_weapon_url(data);} catch(e) { _log("Error calling: error_set_game_rpg_item_weapon_url: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_set_game_rpg_item_weapon_url_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_rpg_item_weapon_url(data);} catch(e) { _log("Error calling: handle_set_game_rpg_item_weapon_url: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_rpg_item_weapon_url_game_id: function
    (
        status,
        third_party_oembed,
        code,
        description,
        game_defense,
        third_party_url,
        third_party_id,
        content_type,
        type,
        active,
        game_id,
        game_attack,
        uuid,
        display_name,
        name,
        date_modified,
        url,
        third_party_data,
        game_price,
        game_type,
        game_skill,
        game_health,
        date_created,
        game_energy,
        game_data,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'set'
                + "/by-url/by-game-id"
                + "/@url/" + url            
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@description": description
            , "@game_defense": game_defense
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@content_type": content_type
            , "@type": type
            , "@active": active
            , "@game_id": game_id
            , "@game_attack": game_attack
            , "@uuid": uuid
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@game_price": game_price
            , "@game_type": game_type
            , "@game_skill": game_skill
            , "@game_health": game_health
            , "@date_created": date_created
            , "@game_energy": game_energy
            , "@game_data": game_data
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_rpg_item_weapon_url_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_set_game_rpg_item_weapon_url_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_rpg_item_weapon_url_game_id(data);} catch(e) { _log("Error calling: error_set_game_rpg_item_weapon_url_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_set_game_rpg_item_weapon_url_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_rpg_item_weapon_url_game_id(data);} catch(e) { _log("Error calling: handle_set_game_rpg_item_weapon_url_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_rpg_item_weapon_uuid_game_id: function
    (
        status,
        third_party_oembed,
        code,
        description,
        game_defense,
        third_party_url,
        third_party_id,
        content_type,
        type,
        active,
        game_id,
        game_attack,
        uuid,
        display_name,
        name,
        date_modified,
        url,
        third_party_data,
        game_price,
        game_type,
        game_skill,
        game_health,
        date_created,
        game_energy,
        game_data,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'set'
                + "/by-uuid/by-game-id"
                + "/@uuid/" + uuid            
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@description": description
            , "@game_defense": game_defense
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@content_type": content_type
            , "@type": type
            , "@active": active
            , "@game_id": game_id
            , "@game_attack": game_attack
            , "@uuid": uuid
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@game_price": game_price
            , "@game_type": game_type
            , "@game_skill": game_skill
            , "@game_health": game_health
            , "@date_created": date_created
            , "@game_energy": game_energy
            , "@game_data": game_data
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_rpg_item_weapon_uuid_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_set_game_rpg_item_weapon_uuid_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_rpg_item_weapon_uuid_game_id(data);} catch(e) { _log("Error calling: error_set_game_rpg_item_weapon_uuid_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_set_game_rpg_item_weapon_uuid_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_rpg_item_weapon_uuid_game_id(data);} catch(e) { _log("Error calling: handle_set_game_rpg_item_weapon_uuid_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_rpg_item_weapon_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_weapon_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_del_game_rpg_item_weapon_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_rpg_item_weapon_uuid(data);} catch(e) { _log("Error calling: error_del_game_rpg_item_weapon_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_del_game_rpg_item_weapon_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_rpg_item_weapon_uuid(data);} catch(e) { _log("Error calling: handle_del_game_rpg_item_weapon_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_weapon_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'del'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_weapon_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_del_game_rpg_item_weapon_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_rpg_item_weapon_game_id(data);} catch(e) { _log("Error calling: error_del_game_rpg_item_weapon_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_del_game_rpg_item_weapon_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_rpg_item_weapon_game_id(data);} catch(e) { _log("Error calling: handle_del_game_rpg_item_weapon_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_weapon_url: function
    (
        url,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'del'
                + "/by-url"
                + "/@url/" + url            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_weapon_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_del_game_rpg_item_weapon_url_callback", true);
            // call a method that can be inline callback
            try {error_del_game_rpg_item_weapon_url(data);} catch(e) { _log("Error calling: error_del_game_rpg_item_weapon_url: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_del_game_rpg_item_weapon_url_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_rpg_item_weapon_url(data);} catch(e) { _log("Error calling: handle_del_game_rpg_item_weapon_url: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_weapon_url_game_id: function
    (
        url,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'del'
                + "/by-url/by-game-id"
                + "/@url/" + url            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_weapon_url_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_del_game_rpg_item_weapon_url_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_rpg_item_weapon_url_game_id(data);} catch(e) { _log("Error calling: error_del_game_rpg_item_weapon_url_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_del_game_rpg_item_weapon_url_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_rpg_item_weapon_url_game_id(data);} catch(e) { _log("Error calling: handle_del_game_rpg_item_weapon_url_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_weapon_uuid_game_id: function
    (
        uuid,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'del'
                + "/by-uuid/by-game-id"
                + "/@uuid/" + uuid            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_weapon_uuid_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_del_game_rpg_item_weapon_uuid_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_rpg_item_weapon_uuid_game_id(data);} catch(e) { _log("Error calling: error_del_game_rpg_item_weapon_uuid_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_del_game_rpg_item_weapon_uuid_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_rpg_item_weapon_uuid_game_id(data);} catch(e) { _log("Error calling: handle_del_game_rpg_item_weapon_uuid_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_weapon: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_weapon_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_get_game_rpg_item_weapon_callback", true);
            // call a method that can be inline callback
            try {error_get_game_rpg_item_weapon(data);} catch(e) { _log("Error calling: error_get_game_rpg_item_weapon: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_get_game_rpg_item_weapon_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_rpg_item_weapon(data);} catch(e) { _log("Error calling: handle_get_game_rpg_item_weapon: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_weapon_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_weapon_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_get_game_rpg_item_weapon_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_rpg_item_weapon_uuid(data);} catch(e) { _log("Error calling: error_get_game_rpg_item_weapon_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_get_game_rpg_item_weapon_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_rpg_item_weapon_uuid(data);} catch(e) { _log("Error calling: handle_get_game_rpg_item_weapon_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_weapon_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'get'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_weapon_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_get_game_rpg_item_weapon_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_rpg_item_weapon_game_id(data);} catch(e) { _log("Error calling: error_get_game_rpg_item_weapon_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_get_game_rpg_item_weapon_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_rpg_item_weapon_game_id(data);} catch(e) { _log("Error calling: handle_get_game_rpg_item_weapon_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_weapon_url: function
    (
        url,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'get'
                + "/by-url"
                + "/@url/" + url            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_weapon_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_get_game_rpg_item_weapon_url_callback", true);
            // call a method that can be inline callback
            try {error_get_game_rpg_item_weapon_url(data);} catch(e) { _log("Error calling: error_get_game_rpg_item_weapon_url: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_get_game_rpg_item_weapon_url_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_rpg_item_weapon_url(data);} catch(e) { _log("Error calling: handle_get_game_rpg_item_weapon_url: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_weapon_url_game_id: function
    (
        url,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'get'
                + "/by-url/by-game-id"
                + "/@url/" + url            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_weapon_url_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_get_game_rpg_item_weapon_url_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_rpg_item_weapon_url_game_id(data);} catch(e) { _log("Error calling: error_get_game_rpg_item_weapon_url_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_get_game_rpg_item_weapon_url_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_rpg_item_weapon_url_game_id(data);} catch(e) { _log("Error calling: handle_get_game_rpg_item_weapon_url_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_weapon_uuid_game_id: function
    (
        uuid,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_weapon_service + 'get'
                + "/by-uuid/by-game-id"
                + "/@uuid/" + uuid            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_weapon_uuid_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_weapon_get_game_rpg_item_weapon_uuid_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_rpg_item_weapon_uuid_game_id(data);} catch(e) { _log("Error calling: error_get_game_rpg_item_weapon_uuid_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_weapon_get_game_rpg_item_weapon_uuid_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_rpg_item_weapon_uuid_game_id(data);} catch(e) { _log("Error calling: handle_get_game_rpg_item_weapon_uuid_game_id: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_rpg_item_skill = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_rpg_item_skill.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_rpg_item_skill: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_skill_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_count_game_rpg_item_skill_callback", true);
            // call a method that can be inline callback
            try {error_count_game_rpg_item_skill(data);} catch(e) { _log("Error calling: error_count_game_rpg_item_skill: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_count_game_rpg_item_skill_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_rpg_item_skill(data);} catch(e) { _log("Error calling: handle_count_game_rpg_item_skill: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_skill_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_skill_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_count_game_rpg_item_skill_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_rpg_item_skill_uuid(data);} catch(e) { _log("Error calling: error_count_game_rpg_item_skill_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_count_game_rpg_item_skill_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_rpg_item_skill_uuid(data);} catch(e) { _log("Error calling: handle_count_game_rpg_item_skill_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_skill_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'count'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_skill_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_count_game_rpg_item_skill_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_rpg_item_skill_game_id(data);} catch(e) { _log("Error calling: error_count_game_rpg_item_skill_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_count_game_rpg_item_skill_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_rpg_item_skill_game_id(data);} catch(e) { _log("Error calling: handle_count_game_rpg_item_skill_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_skill_url: function
    (
        url,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'count'
                + "/by-url"
                + "/@url/" + url            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_skill_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_count_game_rpg_item_skill_url_callback", true);
            // call a method that can be inline callback
            try {error_count_game_rpg_item_skill_url(data);} catch(e) { _log("Error calling: error_count_game_rpg_item_skill_url: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_count_game_rpg_item_skill_url_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_rpg_item_skill_url(data);} catch(e) { _log("Error calling: handle_count_game_rpg_item_skill_url: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_skill_url_game_id: function
    (
        url,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'count'
                + "/by-url/by-game-id"
                + "/@url/" + url            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_skill_url_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_count_game_rpg_item_skill_url_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_rpg_item_skill_url_game_id(data);} catch(e) { _log("Error calling: error_count_game_rpg_item_skill_url_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_count_game_rpg_item_skill_url_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_rpg_item_skill_url_game_id(data);} catch(e) { _log("Error calling: handle_count_game_rpg_item_skill_url_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_skill_uuid_game_id: function
    (
        uuid,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'count'
                + "/by-uuid/by-game-id"
                + "/@uuid/" + uuid            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_rpg_item_skill_uuid_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_count_game_rpg_item_skill_uuid_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_rpg_item_skill_uuid_game_id(data);} catch(e) { _log("Error calling: error_count_game_rpg_item_skill_uuid_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_count_game_rpg_item_skill_uuid_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_rpg_item_skill_uuid_game_id(data);} catch(e) { _log("Error calling: handle_count_game_rpg_item_skill_uuid_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_rpg_item_skill_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_rpg_item_skill_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_browse_game_rpg_item_skill_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_rpg_item_skill_filter(data);} catch(e) { _log("Error calling: error_browse_game_rpg_item_skill_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_browse_game_rpg_item_skill_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_rpg_item_skill_filter(data);} catch(e) { _log("Error calling: handle_browse_game_rpg_item_skill_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_rpg_item_skill_uuid: function
    (
        status,
        third_party_oembed,
        code,
        description,
        game_defense,
        third_party_url,
        third_party_id,
        content_type,
        type,
        active,
        game_id,
        game_attack,
        uuid,
        display_name,
        name,
        date_modified,
        url,
        third_party_data,
        game_price,
        game_type,
        game_skill,
        game_health,
        date_created,
        game_energy,
        game_data,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@description": description
            , "@game_defense": game_defense
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@content_type": content_type
            , "@type": type
            , "@active": active
            , "@game_id": game_id
            , "@game_attack": game_attack
            , "@uuid": uuid
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@game_price": game_price
            , "@game_type": game_type
            , "@game_skill": game_skill
            , "@game_health": game_health
            , "@date_created": date_created
            , "@game_energy": game_energy
            , "@game_data": game_data
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_rpg_item_skill_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_set_game_rpg_item_skill_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_rpg_item_skill_uuid(data);} catch(e) { _log("Error calling: error_set_game_rpg_item_skill_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_set_game_rpg_item_skill_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_rpg_item_skill_uuid(data);} catch(e) { _log("Error calling: handle_set_game_rpg_item_skill_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_rpg_item_skill_game_id: function
    (
        status,
        third_party_oembed,
        code,
        description,
        game_defense,
        third_party_url,
        third_party_id,
        content_type,
        type,
        active,
        game_id,
        game_attack,
        uuid,
        display_name,
        name,
        date_modified,
        url,
        third_party_data,
        game_price,
        game_type,
        game_skill,
        game_health,
        date_created,
        game_energy,
        game_data,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'set'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@description": description
            , "@game_defense": game_defense
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@content_type": content_type
            , "@type": type
            , "@active": active
            , "@game_id": game_id
            , "@game_attack": game_attack
            , "@uuid": uuid
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@game_price": game_price
            , "@game_type": game_type
            , "@game_skill": game_skill
            , "@game_health": game_health
            , "@date_created": date_created
            , "@game_energy": game_energy
            , "@game_data": game_data
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_rpg_item_skill_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_set_game_rpg_item_skill_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_rpg_item_skill_game_id(data);} catch(e) { _log("Error calling: error_set_game_rpg_item_skill_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_set_game_rpg_item_skill_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_rpg_item_skill_game_id(data);} catch(e) { _log("Error calling: handle_set_game_rpg_item_skill_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_rpg_item_skill_url: function
    (
        status,
        third_party_oembed,
        code,
        description,
        game_defense,
        third_party_url,
        third_party_id,
        content_type,
        type,
        active,
        game_id,
        game_attack,
        uuid,
        display_name,
        name,
        date_modified,
        url,
        third_party_data,
        game_price,
        game_type,
        game_skill,
        game_health,
        date_created,
        game_energy,
        game_data,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'set'
                + "/by-url"
                + "/@url/" + url            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@description": description
            , "@game_defense": game_defense
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@content_type": content_type
            , "@type": type
            , "@active": active
            , "@game_id": game_id
            , "@game_attack": game_attack
            , "@uuid": uuid
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@game_price": game_price
            , "@game_type": game_type
            , "@game_skill": game_skill
            , "@game_health": game_health
            , "@date_created": date_created
            , "@game_energy": game_energy
            , "@game_data": game_data
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_rpg_item_skill_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_set_game_rpg_item_skill_url_callback", true);
            // call a method that can be inline callback
            try {error_set_game_rpg_item_skill_url(data);} catch(e) { _log("Error calling: error_set_game_rpg_item_skill_url: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_set_game_rpg_item_skill_url_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_rpg_item_skill_url(data);} catch(e) { _log("Error calling: handle_set_game_rpg_item_skill_url: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_rpg_item_skill_url_game_id: function
    (
        status,
        third_party_oembed,
        code,
        description,
        game_defense,
        third_party_url,
        third_party_id,
        content_type,
        type,
        active,
        game_id,
        game_attack,
        uuid,
        display_name,
        name,
        date_modified,
        url,
        third_party_data,
        game_price,
        game_type,
        game_skill,
        game_health,
        date_created,
        game_energy,
        game_data,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'set'
                + "/by-url/by-game-id"
                + "/@url/" + url            
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@description": description
            , "@game_defense": game_defense
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@content_type": content_type
            , "@type": type
            , "@active": active
            , "@game_id": game_id
            , "@game_attack": game_attack
            , "@uuid": uuid
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@game_price": game_price
            , "@game_type": game_type
            , "@game_skill": game_skill
            , "@game_health": game_health
            , "@date_created": date_created
            , "@game_energy": game_energy
            , "@game_data": game_data
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_rpg_item_skill_url_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_set_game_rpg_item_skill_url_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_rpg_item_skill_url_game_id(data);} catch(e) { _log("Error calling: error_set_game_rpg_item_skill_url_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_set_game_rpg_item_skill_url_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_rpg_item_skill_url_game_id(data);} catch(e) { _log("Error calling: handle_set_game_rpg_item_skill_url_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_rpg_item_skill_uuid_game_id: function
    (
        status,
        third_party_oembed,
        code,
        description,
        game_defense,
        third_party_url,
        third_party_id,
        content_type,
        type,
        active,
        game_id,
        game_attack,
        uuid,
        display_name,
        name,
        date_modified,
        url,
        third_party_data,
        game_price,
        game_type,
        game_skill,
        game_health,
        date_created,
        game_energy,
        game_data,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'set'
                + "/by-uuid/by-game-id"
                + "/@uuid/" + uuid            
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@third_party_oembed": third_party_oembed
            , "@code": code
            , "@description": description
            , "@game_defense": game_defense
            , "@third_party_url": third_party_url
            , "@third_party_id": third_party_id
            , "@content_type": content_type
            , "@type": type
            , "@active": active
            , "@game_id": game_id
            , "@game_attack": game_attack
            , "@uuid": uuid
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@third_party_data": third_party_data
            , "@game_price": game_price
            , "@game_type": game_type
            , "@game_skill": game_skill
            , "@game_health": game_health
            , "@date_created": date_created
            , "@game_energy": game_energy
            , "@game_data": game_data
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_rpg_item_skill_uuid_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_set_game_rpg_item_skill_uuid_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_rpg_item_skill_uuid_game_id(data);} catch(e) { _log("Error calling: error_set_game_rpg_item_skill_uuid_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_set_game_rpg_item_skill_uuid_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_rpg_item_skill_uuid_game_id(data);} catch(e) { _log("Error calling: handle_set_game_rpg_item_skill_uuid_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_rpg_item_skill_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_skill_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_del_game_rpg_item_skill_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_rpg_item_skill_uuid(data);} catch(e) { _log("Error calling: error_del_game_rpg_item_skill_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_del_game_rpg_item_skill_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_rpg_item_skill_uuid(data);} catch(e) { _log("Error calling: handle_del_game_rpg_item_skill_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_skill_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'del'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_skill_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_del_game_rpg_item_skill_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_rpg_item_skill_game_id(data);} catch(e) { _log("Error calling: error_del_game_rpg_item_skill_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_del_game_rpg_item_skill_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_rpg_item_skill_game_id(data);} catch(e) { _log("Error calling: handle_del_game_rpg_item_skill_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_skill_url: function
    (
        url,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'del'
                + "/by-url"
                + "/@url/" + url            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_skill_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_del_game_rpg_item_skill_url_callback", true);
            // call a method that can be inline callback
            try {error_del_game_rpg_item_skill_url(data);} catch(e) { _log("Error calling: error_del_game_rpg_item_skill_url: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_del_game_rpg_item_skill_url_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_rpg_item_skill_url(data);} catch(e) { _log("Error calling: handle_del_game_rpg_item_skill_url: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_skill_url_game_id: function
    (
        url,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'del'
                + "/by-url/by-game-id"
                + "/@url/" + url            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_skill_url_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_del_game_rpg_item_skill_url_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_rpg_item_skill_url_game_id(data);} catch(e) { _log("Error calling: error_del_game_rpg_item_skill_url_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_del_game_rpg_item_skill_url_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_rpg_item_skill_url_game_id(data);} catch(e) { _log("Error calling: handle_del_game_rpg_item_skill_url_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_skill_uuid_game_id: function
    (
        uuid,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'del'
                + "/by-uuid/by-game-id"
                + "/@uuid/" + uuid            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_rpg_item_skill_uuid_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_del_game_rpg_item_skill_uuid_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_rpg_item_skill_uuid_game_id(data);} catch(e) { _log("Error calling: error_del_game_rpg_item_skill_uuid_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_del_game_rpg_item_skill_uuid_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_rpg_item_skill_uuid_game_id(data);} catch(e) { _log("Error calling: handle_del_game_rpg_item_skill_uuid_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_skill: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_skill_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_get_game_rpg_item_skill_callback", true);
            // call a method that can be inline callback
            try {error_get_game_rpg_item_skill(data);} catch(e) { _log("Error calling: error_get_game_rpg_item_skill: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_get_game_rpg_item_skill_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_rpg_item_skill(data);} catch(e) { _log("Error calling: handle_get_game_rpg_item_skill: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_skill_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_skill_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_get_game_rpg_item_skill_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_rpg_item_skill_uuid(data);} catch(e) { _log("Error calling: error_get_game_rpg_item_skill_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_get_game_rpg_item_skill_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_rpg_item_skill_uuid(data);} catch(e) { _log("Error calling: handle_get_game_rpg_item_skill_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_skill_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'get'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_skill_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_get_game_rpg_item_skill_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_rpg_item_skill_game_id(data);} catch(e) { _log("Error calling: error_get_game_rpg_item_skill_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_get_game_rpg_item_skill_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_rpg_item_skill_game_id(data);} catch(e) { _log("Error calling: handle_get_game_rpg_item_skill_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_skill_url: function
    (
        url,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'get'
                + "/by-url"
                + "/@url/" + url            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_skill_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_get_game_rpg_item_skill_url_callback", true);
            // call a method that can be inline callback
            try {error_get_game_rpg_item_skill_url(data);} catch(e) { _log("Error calling: error_get_game_rpg_item_skill_url: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_get_game_rpg_item_skill_url_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_rpg_item_skill_url(data);} catch(e) { _log("Error calling: handle_get_game_rpg_item_skill_url: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_skill_url_game_id: function
    (
        url,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'get'
                + "/by-url/by-game-id"
                + "/@url/" + url            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_skill_url_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_get_game_rpg_item_skill_url_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_rpg_item_skill_url_game_id(data);} catch(e) { _log("Error calling: error_get_game_rpg_item_skill_url_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_get_game_rpg_item_skill_url_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_rpg_item_skill_url_game_id(data);} catch(e) { _log("Error calling: handle_get_game_rpg_item_skill_url_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_skill_uuid_game_id: function
    (
        uuid,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_rpg_item_skill_service + 'get'
                + "/by-uuid/by-game-id"
                + "/@uuid/" + uuid            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_rpg_item_skill_uuid_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_rpg_item_skill_get_game_rpg_item_skill_uuid_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_rpg_item_skill_uuid_game_id(data);} catch(e) { _log("Error calling: error_get_game_rpg_item_skill_uuid_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_rpg_item_skill_get_game_rpg_item_skill_uuid_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_rpg_item_skill_uuid_game_id(data);} catch(e) { _log("Error calling: handle_get_game_rpg_item_skill_uuid_game_id: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_product = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_product.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_product: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_product_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_count_game_product_callback", true);
            // call a method that can be inline callback
            try {error_count_game_product(data);} catch(e) { _log("Error calling: error_count_game_product: " + e);}
        }
        else {
            _log("SUCCESS::game_product_count_game_product_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_product(data);} catch(e) { _log("Error calling: handle_count_game_product: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_product_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_product_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_count_game_product_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_product_uuid(data);} catch(e) { _log("Error calling: error_count_game_product_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_product_count_game_product_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_product_uuid(data);} catch(e) { _log("Error calling: handle_count_game_product_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_product_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'count'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_product_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_count_game_product_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_product_game_id(data);} catch(e) { _log("Error calling: error_count_game_product_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_product_count_game_product_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_product_game_id(data);} catch(e) { _log("Error calling: handle_count_game_product_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_product_url: function
    (
        url,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'count'
                + "/by-url"
                + "/@url/" + url            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_product_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_count_game_product_url_callback", true);
            // call a method that can be inline callback
            try {error_count_game_product_url(data);} catch(e) { _log("Error calling: error_count_game_product_url: " + e);}
        }
        else {
            _log("SUCCESS::game_product_count_game_product_url_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_product_url(data);} catch(e) { _log("Error calling: handle_count_game_product_url: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_product_url_game_id: function
    (
        url,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'count'
                + "/by-url/by-game-id"
                + "/@url/" + url            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_product_url_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_count_game_product_url_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_product_url_game_id(data);} catch(e) { _log("Error calling: error_count_game_product_url_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_product_count_game_product_url_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_product_url_game_id(data);} catch(e) { _log("Error calling: handle_count_game_product_url_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_product_uuid_game_id: function
    (
        uuid,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'count'
                + "/by-uuid/by-game-id"
                + "/@uuid/" + uuid            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_product_uuid_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_count_game_product_uuid_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_product_uuid_game_id(data);} catch(e) { _log("Error calling: error_count_game_product_uuid_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_product_count_game_product_uuid_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_product_uuid_game_id(data);} catch(e) { _log("Error calling: handle_count_game_product_uuid_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_product_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_product_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_browse_game_product_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_product_filter(data);} catch(e) { _log("Error calling: error_browse_game_product_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_product_browse_game_product_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_product_filter(data);} catch(e) { _log("Error calling: handle_browse_game_product_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_product_uuid: function
    (
        status,
        code,
        display_name,
        name,
        date_modified,
        url,
        uuid,
        game_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@uuid": uuid
            , "@game_id": game_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_product_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_set_game_product_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_product_uuid(data);} catch(e) { _log("Error calling: error_set_game_product_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_product_set_game_product_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_product_uuid(data);} catch(e) { _log("Error calling: handle_set_game_product_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_product_game_id: function
    (
        status,
        code,
        display_name,
        name,
        date_modified,
        url,
        uuid,
        game_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'set'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@uuid": uuid
            , "@game_id": game_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_product_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_set_game_product_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_product_game_id(data);} catch(e) { _log("Error calling: error_set_game_product_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_product_set_game_product_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_product_game_id(data);} catch(e) { _log("Error calling: handle_set_game_product_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_product_url: function
    (
        status,
        code,
        display_name,
        name,
        date_modified,
        url,
        uuid,
        game_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'set'
                + "/by-url"
                + "/@url/" + url            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@uuid": uuid
            , "@game_id": game_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_product_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_set_game_product_url_callback", true);
            // call a method that can be inline callback
            try {error_set_game_product_url(data);} catch(e) { _log("Error calling: error_set_game_product_url: " + e);}
        }
        else {
            _log("SUCCESS::game_product_set_game_product_url_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_product_url(data);} catch(e) { _log("Error calling: handle_set_game_product_url: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_product_url_game_id: function
    (
        status,
        code,
        display_name,
        name,
        date_modified,
        url,
        uuid,
        game_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'set'
                + "/by-url/by-game-id"
                + "/@url/" + url            
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@uuid": uuid
            , "@game_id": game_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_product_url_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_set_game_product_url_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_product_url_game_id(data);} catch(e) { _log("Error calling: error_set_game_product_url_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_product_set_game_product_url_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_product_url_game_id(data);} catch(e) { _log("Error calling: handle_set_game_product_url_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_product_uuid_game_id: function
    (
        status,
        code,
        display_name,
        name,
        date_modified,
        url,
        uuid,
        game_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'set'
                + "/by-uuid/by-game-id"
                + "/@uuid/" + uuid            
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@url": url
            , "@uuid": uuid
            , "@game_id": game_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_product_uuid_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_set_game_product_uuid_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_product_uuid_game_id(data);} catch(e) { _log("Error calling: error_set_game_product_uuid_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_product_set_game_product_uuid_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_product_uuid_game_id(data);} catch(e) { _log("Error calling: handle_set_game_product_uuid_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_product_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_product_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_del_game_product_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_product_uuid(data);} catch(e) { _log("Error calling: error_del_game_product_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_product_del_game_product_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_product_uuid(data);} catch(e) { _log("Error calling: handle_del_game_product_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_product_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'del'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_product_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_del_game_product_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_product_game_id(data);} catch(e) { _log("Error calling: error_del_game_product_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_product_del_game_product_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_product_game_id(data);} catch(e) { _log("Error calling: handle_del_game_product_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_product_url: function
    (
        url,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'del'
                + "/by-url"
                + "/@url/" + url            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_product_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_del_game_product_url_callback", true);
            // call a method that can be inline callback
            try {error_del_game_product_url(data);} catch(e) { _log("Error calling: error_del_game_product_url: " + e);}
        }
        else {
            _log("SUCCESS::game_product_del_game_product_url_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_product_url(data);} catch(e) { _log("Error calling: handle_del_game_product_url: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_product_url_game_id: function
    (
        url,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'del'
                + "/by-url/by-game-id"
                + "/@url/" + url            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_product_url_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_del_game_product_url_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_product_url_game_id(data);} catch(e) { _log("Error calling: error_del_game_product_url_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_product_del_game_product_url_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_product_url_game_id(data);} catch(e) { _log("Error calling: handle_del_game_product_url_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_product_uuid_game_id: function
    (
        uuid,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'del'
                + "/by-uuid/by-game-id"
                + "/@uuid/" + uuid            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_product_uuid_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_del_game_product_uuid_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_product_uuid_game_id(data);} catch(e) { _log("Error calling: error_del_game_product_uuid_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_product_del_game_product_uuid_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_product_uuid_game_id(data);} catch(e) { _log("Error calling: handle_del_game_product_uuid_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_product: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_product_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_get_game_product_callback", true);
            // call a method that can be inline callback
            try {error_get_game_product(data);} catch(e) { _log("Error calling: error_get_game_product: " + e);}
        }
        else {
            _log("SUCCESS::game_product_get_game_product_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_product(data);} catch(e) { _log("Error calling: handle_get_game_product: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_product_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_product_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_get_game_product_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_product_uuid(data);} catch(e) { _log("Error calling: error_get_game_product_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_product_get_game_product_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_product_uuid(data);} catch(e) { _log("Error calling: handle_get_game_product_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_product_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'get'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_product_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_get_game_product_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_product_game_id(data);} catch(e) { _log("Error calling: error_get_game_product_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_product_get_game_product_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_product_game_id(data);} catch(e) { _log("Error calling: handle_get_game_product_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_product_url: function
    (
        url,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'get'
                + "/by-url"
                + "/@url/" + url            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_product_url_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_get_game_product_url_callback", true);
            // call a method that can be inline callback
            try {error_get_game_product_url(data);} catch(e) { _log("Error calling: error_get_game_product_url: " + e);}
        }
        else {
            _log("SUCCESS::game_product_get_game_product_url_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_product_url(data);} catch(e) { _log("Error calling: handle_get_game_product_url: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_product_url_game_id: function
    (
        url,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'get'
                + "/by-url/by-game-id"
                + "/@url/" + url            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_product_url_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_get_game_product_url_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_product_url_game_id(data);} catch(e) { _log("Error calling: error_get_game_product_url_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_product_get_game_product_url_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_product_url_game_id(data);} catch(e) { _log("Error calling: handle_get_game_product_url_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_product_uuid_game_id: function
    (
        uuid,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_product_service + 'get'
                + "/by-uuid/by-game-id"
                + "/@uuid/" + uuid            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_product_uuid_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_product_get_game_product_uuid_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_product_uuid_game_id(data);} catch(e) { _log("Error calling: error_get_game_product_uuid_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_product_get_game_product_uuid_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_product_uuid_game_id(data);} catch(e) { _log("Error calling: handle_get_game_product_uuid_game_id: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_statistic_leaderboard = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_statistic_leaderboard.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_count_game_statistic_leaderboard_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_leaderboard(data);} catch(e) { _log("Error calling: error_count_game_statistic_leaderboard: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_count_game_statistic_leaderboard_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_leaderboard(data);} catch(e) { _log("Error calling: handle_count_game_statistic_leaderboard: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_count_game_statistic_leaderboard_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_leaderboard_uuid(data);} catch(e) { _log("Error calling: error_count_game_statistic_leaderboard_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_count_game_statistic_leaderboard_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_leaderboard_uuid(data);} catch(e) { _log("Error calling: handle_count_game_statistic_leaderboard_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'count'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_count_game_statistic_leaderboard_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_leaderboard_game_id(data);} catch(e) { _log("Error calling: error_count_game_statistic_leaderboard_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_count_game_statistic_leaderboard_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_leaderboard_game_id(data);} catch(e) { _log("Error calling: handle_count_game_statistic_leaderboard_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'count'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_count_game_statistic_leaderboard_code_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_leaderboard_code(data);} catch(e) { _log("Error calling: error_count_game_statistic_leaderboard_code: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_count_game_statistic_leaderboard_code_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_leaderboard_code(data);} catch(e) { _log("Error calling: handle_count_game_statistic_leaderboard_code: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'count'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_count_game_statistic_leaderboard_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_leaderboard_code_game_id(data);} catch(e) { _log("Error calling: error_count_game_statistic_leaderboard_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_count_game_statistic_leaderboard_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_leaderboard_code_game_id(data);} catch(e) { _log("Error calling: handle_count_game_statistic_leaderboard_code_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_code_game_id_profile_id: function
    (
        code,
        game_id,
        profile_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'count'
                + "/by-code/by-game-id/by-profile-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_code_game_id_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_count_game_statistic_leaderboard_code_game_id_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_leaderboard_code_game_id_profile_id(data);} catch(e) { _log("Error calling: error_count_game_statistic_leaderboard_code_game_id_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_count_game_statistic_leaderboard_code_game_id_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_leaderboard_code_game_id_profile_id(data);} catch(e) { _log("Error calling: handle_count_game_statistic_leaderboard_code_game_id_profile_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_code_game_id_profile_id_timestamp: function
    (
        code,
        game_id,
        profile_id,
        timestamp,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'count'
                + "/by-code/by-game-id/by-profile-id/by-timestamp"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                + "/@timestamp/" + timestamp            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_code_game_id_profile_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_count_game_statistic_leaderboard_code_game_id_profile_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_leaderboard_code_game_id_profile_id_timestamp(data);} catch(e) { _log("Error calling: error_count_game_statistic_leaderboard_code_game_id_profile_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_count_game_statistic_leaderboard_code_game_id_profile_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_leaderboard_code_game_id_profile_id_timestamp(data);} catch(e) { _log("Error calling: handle_count_game_statistic_leaderboard_code_game_id_profile_id_timestamp: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'count'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_count_game_statistic_leaderboard_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_leaderboard_profile_id_game_id(data);} catch(e) { _log("Error calling: error_count_game_statistic_leaderboard_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_count_game_statistic_leaderboard_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_leaderboard_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_count_game_statistic_leaderboard_profile_id_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_statistic_leaderboard_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_statistic_leaderboard_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_browse_game_statistic_leaderboard_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_statistic_leaderboard_filter(data);} catch(e) { _log("Error calling: error_browse_game_statistic_leaderboard_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_browse_game_statistic_leaderboard_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_statistic_leaderboard_filter(data);} catch(e) { _log("Error calling: handle_browse_game_statistic_leaderboard_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_uuid: function
    (
        status,
        username,
        code,
        timestamp,
        profile_id,
        rank,
        rank_change,
        game_id,
        active,
        rank_total_count,
        absolute_value,
        data,
        stat_value,
        network,
        uuid,
        date_modified,
        level,
        stat_value_formatted,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@profile_id": profile_id
            , "@rank": rank
            , "@rank_change": rank_change
            , "@game_id": game_id
            , "@active": active
            , "@rank_total_count": rank_total_count
            , "@absolute_value": absolute_value
            , "@data": data
            , "@stat_value": stat_value
            , "@network": network
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@stat_value_formatted": stat_value_formatted
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_set_game_statistic_leaderboard_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_statistic_leaderboard_uuid(data);} catch(e) { _log("Error calling: error_set_game_statistic_leaderboard_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_set_game_statistic_leaderboard_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_statistic_leaderboard_uuid(data);} catch(e) { _log("Error calling: handle_set_game_statistic_leaderboard_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_uuid_profile_id_game_id_timestamp: function
    (
        status,
        username,
        code,
        timestamp,
        profile_id,
        rank,
        rank_change,
        game_id,
        active,
        rank_total_count,
        absolute_value,
        data,
        stat_value,
        network,
        uuid,
        date_modified,
        level,
        stat_value_formatted,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'set'
                + "/by-uuid/by-profile-id/by-game-id/by-timestamp"
                + "/@uuid/" + uuid            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@timestamp/" + timestamp            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@profile_id": profile_id
            , "@rank": rank
            , "@rank_change": rank_change
            , "@game_id": game_id
            , "@active": active
            , "@rank_total_count": rank_total_count
            , "@absolute_value": absolute_value
            , "@data": data
            , "@stat_value": stat_value
            , "@network": network
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@stat_value_formatted": stat_value_formatted
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_uuid_profile_id_game_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_set_game_statistic_leaderboard_uuid_profile_id_game_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_set_game_statistic_leaderboard_uuid_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: error_set_game_statistic_leaderboard_uuid_profile_id_game_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_set_game_statistic_leaderboard_uuid_profile_id_game_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_statistic_leaderboard_uuid_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: handle_set_game_statistic_leaderboard_uuid_profile_id_game_id_timestamp: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_code: function
    (
        status,
        username,
        code,
        timestamp,
        profile_id,
        rank,
        rank_change,
        game_id,
        active,
        rank_total_count,
        absolute_value,
        data,
        stat_value,
        network,
        uuid,
        date_modified,
        level,
        stat_value_formatted,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'set'
                + "/by-code"
                + "/@code/" + code            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@profile_id": profile_id
            , "@rank": rank
            , "@rank_change": rank_change
            , "@game_id": game_id
            , "@active": active
            , "@rank_total_count": rank_total_count
            , "@absolute_value": absolute_value
            , "@data": data
            , "@stat_value": stat_value
            , "@network": network
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@stat_value_formatted": stat_value_formatted
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_set_game_statistic_leaderboard_code_callback", true);
            // call a method that can be inline callback
            try {error_set_game_statistic_leaderboard_code(data);} catch(e) { _log("Error calling: error_set_game_statistic_leaderboard_code: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_set_game_statistic_leaderboard_code_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_statistic_leaderboard_code(data);} catch(e) { _log("Error calling: handle_set_game_statistic_leaderboard_code: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_code_game_id: function
    (
        status,
        username,
        code,
        timestamp,
        profile_id,
        rank,
        rank_change,
        game_id,
        active,
        rank_total_count,
        absolute_value,
        data,
        stat_value,
        network,
        uuid,
        date_modified,
        level,
        stat_value_formatted,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'set'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@profile_id": profile_id
            , "@rank": rank
            , "@rank_change": rank_change
            , "@game_id": game_id
            , "@active": active
            , "@rank_total_count": rank_total_count
            , "@absolute_value": absolute_value
            , "@data": data
            , "@stat_value": stat_value
            , "@network": network
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@stat_value_formatted": stat_value_formatted
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_set_game_statistic_leaderboard_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_statistic_leaderboard_code_game_id(data);} catch(e) { _log("Error calling: error_set_game_statistic_leaderboard_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_set_game_statistic_leaderboard_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_statistic_leaderboard_code_game_id(data);} catch(e) { _log("Error calling: handle_set_game_statistic_leaderboard_code_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_code_game_id_profile_id: function
    (
        status,
        username,
        code,
        timestamp,
        profile_id,
        rank,
        rank_change,
        game_id,
        active,
        rank_total_count,
        absolute_value,
        data,
        stat_value,
        network,
        uuid,
        date_modified,
        level,
        stat_value_formatted,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'set'
                + "/by-code/by-game-id/by-profile-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@profile_id": profile_id
            , "@rank": rank
            , "@rank_change": rank_change
            , "@game_id": game_id
            , "@active": active
            , "@rank_total_count": rank_total_count
            , "@absolute_value": absolute_value
            , "@data": data
            , "@stat_value": stat_value
            , "@network": network
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@stat_value_formatted": stat_value_formatted
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_code_game_id_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_set_game_statistic_leaderboard_code_game_id_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_statistic_leaderboard_code_game_id_profile_id(data);} catch(e) { _log("Error calling: error_set_game_statistic_leaderboard_code_game_id_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_set_game_statistic_leaderboard_code_game_id_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_statistic_leaderboard_code_game_id_profile_id(data);} catch(e) { _log("Error calling: handle_set_game_statistic_leaderboard_code_game_id_profile_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_code_game_id_profile_id_timestamp: function
    (
        status,
        username,
        code,
        timestamp,
        profile_id,
        rank,
        rank_change,
        game_id,
        active,
        rank_total_count,
        absolute_value,
        data,
        stat_value,
        network,
        uuid,
        date_modified,
        level,
        stat_value_formatted,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'set'
                + "/by-code/by-game-id/by-profile-id/by-timestamp"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                + "/@timestamp/" + timestamp            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@profile_id": profile_id
            , "@rank": rank
            , "@rank_change": rank_change
            , "@game_id": game_id
            , "@active": active
            , "@rank_total_count": rank_total_count
            , "@absolute_value": absolute_value
            , "@data": data
            , "@stat_value": stat_value
            , "@network": network
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@stat_value_formatted": stat_value_formatted
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_code_game_id_profile_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_set_game_statistic_leaderboard_code_game_id_profile_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_set_game_statistic_leaderboard_code_game_id_profile_id_timestamp(data);} catch(e) { _log("Error calling: error_set_game_statistic_leaderboard_code_game_id_profile_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_set_game_statistic_leaderboard_code_game_id_profile_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_statistic_leaderboard_code_game_id_profile_id_timestamp(data);} catch(e) { _log("Error calling: handle_set_game_statistic_leaderboard_code_game_id_profile_id_timestamp: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_del_game_statistic_leaderboard_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_statistic_leaderboard_uuid(data);} catch(e) { _log("Error calling: error_del_game_statistic_leaderboard_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_del_game_statistic_leaderboard_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_statistic_leaderboard_uuid(data);} catch(e) { _log("Error calling: handle_del_game_statistic_leaderboard_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'del'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_del_game_statistic_leaderboard_code_callback", true);
            // call a method that can be inline callback
            try {error_del_game_statistic_leaderboard_code(data);} catch(e) { _log("Error calling: error_del_game_statistic_leaderboard_code: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_del_game_statistic_leaderboard_code_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_statistic_leaderboard_code(data);} catch(e) { _log("Error calling: handle_del_game_statistic_leaderboard_code: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'del'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_del_game_statistic_leaderboard_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_statistic_leaderboard_code_game_id(data);} catch(e) { _log("Error calling: error_del_game_statistic_leaderboard_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_del_game_statistic_leaderboard_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_statistic_leaderboard_code_game_id(data);} catch(e) { _log("Error calling: handle_del_game_statistic_leaderboard_code_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_code_game_id_profile_id: function
    (
        code,
        game_id,
        profile_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'del'
                + "/by-code/by-game-id/by-profile-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_code_game_id_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_del_game_statistic_leaderboard_code_game_id_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_statistic_leaderboard_code_game_id_profile_id(data);} catch(e) { _log("Error calling: error_del_game_statistic_leaderboard_code_game_id_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_del_game_statistic_leaderboard_code_game_id_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_statistic_leaderboard_code_game_id_profile_id(data);} catch(e) { _log("Error calling: handle_del_game_statistic_leaderboard_code_game_id_profile_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_code_game_id_profile_id_timestamp: function
    (
        code,
        game_id,
        profile_id,
        timestamp,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'del'
                + "/by-code/by-game-id/by-profile-id/by-timestamp"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                + "/@timestamp/" + timestamp            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_code_game_id_profile_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_del_game_statistic_leaderboard_code_game_id_profile_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_del_game_statistic_leaderboard_code_game_id_profile_id_timestamp(data);} catch(e) { _log("Error calling: error_del_game_statistic_leaderboard_code_game_id_profile_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_del_game_statistic_leaderboard_code_game_id_profile_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_statistic_leaderboard_code_game_id_profile_id_timestamp(data);} catch(e) { _log("Error calling: handle_del_game_statistic_leaderboard_code_game_id_profile_id_timestamp: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'del'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_del_game_statistic_leaderboard_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_statistic_leaderboard_profile_id_game_id(data);} catch(e) { _log("Error calling: error_del_game_statistic_leaderboard_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_del_game_statistic_leaderboard_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_statistic_leaderboard_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_del_game_statistic_leaderboard_profile_id_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_get_game_statistic_leaderboard_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_leaderboard(data);} catch(e) { _log("Error calling: error_get_game_statistic_leaderboard: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_get_game_statistic_leaderboard_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_leaderboard(data);} catch(e) { _log("Error calling: handle_get_game_statistic_leaderboard: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_get_game_statistic_leaderboard_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_leaderboard_uuid(data);} catch(e) { _log("Error calling: error_get_game_statistic_leaderboard_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_get_game_statistic_leaderboard_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_leaderboard_uuid(data);} catch(e) { _log("Error calling: handle_get_game_statistic_leaderboard_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'get'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_get_game_statistic_leaderboard_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_leaderboard_game_id(data);} catch(e) { _log("Error calling: error_get_game_statistic_leaderboard_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_get_game_statistic_leaderboard_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_leaderboard_game_id(data);} catch(e) { _log("Error calling: handle_get_game_statistic_leaderboard_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'get'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_get_game_statistic_leaderboard_code_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_leaderboard_code(data);} catch(e) { _log("Error calling: error_get_game_statistic_leaderboard_code: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_get_game_statistic_leaderboard_code_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_leaderboard_code(data);} catch(e) { _log("Error calling: handle_get_game_statistic_leaderboard_code: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'get'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_get_game_statistic_leaderboard_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_leaderboard_code_game_id(data);} catch(e) { _log("Error calling: error_get_game_statistic_leaderboard_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_get_game_statistic_leaderboard_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_leaderboard_code_game_id(data);} catch(e) { _log("Error calling: handle_get_game_statistic_leaderboard_code_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_code_game_id_profile_id: function
    (
        code,
        game_id,
        profile_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'get'
                + "/by-code/by-game-id/by-profile-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_code_game_id_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_get_game_statistic_leaderboard_code_game_id_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_leaderboard_code_game_id_profile_id(data);} catch(e) { _log("Error calling: error_get_game_statistic_leaderboard_code_game_id_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_get_game_statistic_leaderboard_code_game_id_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_leaderboard_code_game_id_profile_id(data);} catch(e) { _log("Error calling: handle_get_game_statistic_leaderboard_code_game_id_profile_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_code_game_id_profile_id_timestamp: function
    (
        code,
        game_id,
        profile_id,
        timestamp,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'get'
                + "/by-code/by-game-id/by-profile-id/by-timestamp"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                + "/@timestamp/" + timestamp            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_code_game_id_profile_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_get_game_statistic_leaderboard_code_game_id_profile_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_leaderboard_code_game_id_profile_id_timestamp(data);} catch(e) { _log("Error calling: error_get_game_statistic_leaderboard_code_game_id_profile_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_get_game_statistic_leaderboard_code_game_id_profile_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_leaderboard_code_game_id_profile_id_timestamp(data);} catch(e) { _log("Error calling: handle_get_game_statistic_leaderboard_code_game_id_profile_id_timestamp: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'get'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_get_game_statistic_leaderboard_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_leaderboard_profile_id_game_id(data);} catch(e) { _log("Error calling: error_get_game_statistic_leaderboard_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_get_game_statistic_leaderboard_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_leaderboard_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_get_game_statistic_leaderboard_profile_id_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_profile_id_game_id_timestamp: function
    (
        profile_id,
        game_id,
        timestamp,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_service + 'get'
                + "/by-profile-id/by-game-id/by-timestamp"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@timestamp/" + timestamp            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_profile_id_game_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_get_game_statistic_leaderboard_profile_id_game_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_leaderboard_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: error_get_game_statistic_leaderboard_profile_id_game_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_get_game_statistic_leaderboard_profile_id_game_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_leaderboard_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: handle_get_game_statistic_leaderboard_profile_id_game_id_timestamp: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_statistic_leaderboard_rollup = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_statistic_leaderboard_rollup.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_rollup: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_rollup_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_count_game_statistic_leaderboard_rollup_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_leaderboard_rollup(data);} catch(e) { _log("Error calling: error_count_game_statistic_leaderboard_rollup: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_count_game_statistic_leaderboard_rollup_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_leaderboard_rollup(data);} catch(e) { _log("Error calling: handle_count_game_statistic_leaderboard_rollup: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_rollup_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_rollup_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_count_game_statistic_leaderboard_rollup_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_leaderboard_rollup_uuid(data);} catch(e) { _log("Error calling: error_count_game_statistic_leaderboard_rollup_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_count_game_statistic_leaderboard_rollup_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_leaderboard_rollup_uuid(data);} catch(e) { _log("Error calling: handle_count_game_statistic_leaderboard_rollup_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_rollup_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'count'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_rollup_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_count_game_statistic_leaderboard_rollup_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_leaderboard_rollup_game_id(data);} catch(e) { _log("Error calling: error_count_game_statistic_leaderboard_rollup_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_count_game_statistic_leaderboard_rollup_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_leaderboard_rollup_game_id(data);} catch(e) { _log("Error calling: handle_count_game_statistic_leaderboard_rollup_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_rollup_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'count'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_rollup_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_count_game_statistic_leaderboard_rollup_code_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_leaderboard_rollup_code(data);} catch(e) { _log("Error calling: error_count_game_statistic_leaderboard_rollup_code: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_count_game_statistic_leaderboard_rollup_code_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_leaderboard_rollup_code(data);} catch(e) { _log("Error calling: handle_count_game_statistic_leaderboard_rollup_code: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_rollup_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'count'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_rollup_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_count_game_statistic_leaderboard_rollup_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_leaderboard_rollup_code_game_id(data);} catch(e) { _log("Error calling: error_count_game_statistic_leaderboard_rollup_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_count_game_statistic_leaderboard_rollup_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_leaderboard_rollup_code_game_id(data);} catch(e) { _log("Error calling: handle_count_game_statistic_leaderboard_rollup_code_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_rollup_code_game_id_profile_id: function
    (
        code,
        game_id,
        profile_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'count'
                + "/by-code/by-game-id/by-profile-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_rollup_code_game_id_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_count_game_statistic_leaderboard_rollup_code_game_id_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_leaderboard_rollup_code_game_id_profile_id(data);} catch(e) { _log("Error calling: error_count_game_statistic_leaderboard_rollup_code_game_id_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_count_game_statistic_leaderboard_rollup_code_game_id_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_leaderboard_rollup_code_game_id_profile_id(data);} catch(e) { _log("Error calling: handle_count_game_statistic_leaderboard_rollup_code_game_id_profile_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp: function
    (
        code,
        game_id,
        profile_id,
        timestamp,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'count'
                + "/by-code/by-game-id/by-profile-id/by-timestamp"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                + "/@timestamp/" + timestamp            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_count_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp(data);} catch(e) { _log("Error calling: error_count_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_count_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp(data);} catch(e) { _log("Error calling: handle_count_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_rollup_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'count'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_leaderboard_rollup_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_count_game_statistic_leaderboard_rollup_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_leaderboard_rollup_profile_id_game_id(data);} catch(e) { _log("Error calling: error_count_game_statistic_leaderboard_rollup_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_count_game_statistic_leaderboard_rollup_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_leaderboard_rollup_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_count_game_statistic_leaderboard_rollup_profile_id_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_statistic_leaderboard_rollup_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_statistic_leaderboard_rollup_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_browse_game_statistic_leaderboard_rollup_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_statistic_leaderboard_rollup_filter(data);} catch(e) { _log("Error calling: error_browse_game_statistic_leaderboard_rollup_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_browse_game_statistic_leaderboard_rollup_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_statistic_leaderboard_rollup_filter(data);} catch(e) { _log("Error calling: handle_browse_game_statistic_leaderboard_rollup_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_rollup_uuid: function
    (
        status,
        username,
        code,
        timestamp,
        profile_id,
        rank,
        rank_change,
        game_id,
        active,
        rank_total_count,
        absolute_value,
        data,
        stat_value,
        network,
        uuid,
        date_modified,
        level,
        stat_value_formatted,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@profile_id": profile_id
            , "@rank": rank
            , "@rank_change": rank_change
            , "@game_id": game_id
            , "@active": active
            , "@rank_total_count": rank_total_count
            , "@absolute_value": absolute_value
            , "@data": data
            , "@stat_value": stat_value
            , "@network": network
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@stat_value_formatted": stat_value_formatted
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_rollup_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_set_game_statistic_leaderboard_rollup_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_statistic_leaderboard_rollup_uuid(data);} catch(e) { _log("Error calling: error_set_game_statistic_leaderboard_rollup_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_set_game_statistic_leaderboard_rollup_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_statistic_leaderboard_rollup_uuid(data);} catch(e) { _log("Error calling: handle_set_game_statistic_leaderboard_rollup_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_rollup_uuid_profile_id_game_id_timestamp: function
    (
        status,
        username,
        code,
        timestamp,
        profile_id,
        rank,
        rank_change,
        game_id,
        active,
        rank_total_count,
        absolute_value,
        data,
        stat_value,
        network,
        uuid,
        date_modified,
        level,
        stat_value_formatted,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'set'
                + "/by-uuid/by-profile-id/by-game-id/by-timestamp"
                + "/@uuid/" + uuid            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@timestamp/" + timestamp            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@profile_id": profile_id
            , "@rank": rank
            , "@rank_change": rank_change
            , "@game_id": game_id
            , "@active": active
            , "@rank_total_count": rank_total_count
            , "@absolute_value": absolute_value
            , "@data": data
            , "@stat_value": stat_value
            , "@network": network
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@stat_value_formatted": stat_value_formatted
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_rollup_uuid_profile_id_game_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_set_game_statistic_leaderboard_rollup_uuid_profile_id_game_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_set_game_statistic_leaderboard_rollup_uuid_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: error_set_game_statistic_leaderboard_rollup_uuid_profile_id_game_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_set_game_statistic_leaderboard_rollup_uuid_profile_id_game_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_statistic_leaderboard_rollup_uuid_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: handle_set_game_statistic_leaderboard_rollup_uuid_profile_id_game_id_timestamp: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_rollup_code: function
    (
        status,
        username,
        code,
        timestamp,
        profile_id,
        rank,
        rank_change,
        game_id,
        active,
        rank_total_count,
        absolute_value,
        data,
        stat_value,
        network,
        uuid,
        date_modified,
        level,
        stat_value_formatted,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'set'
                + "/by-code"
                + "/@code/" + code            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@profile_id": profile_id
            , "@rank": rank
            , "@rank_change": rank_change
            , "@game_id": game_id
            , "@active": active
            , "@rank_total_count": rank_total_count
            , "@absolute_value": absolute_value
            , "@data": data
            , "@stat_value": stat_value
            , "@network": network
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@stat_value_formatted": stat_value_formatted
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_rollup_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_set_game_statistic_leaderboard_rollup_code_callback", true);
            // call a method that can be inline callback
            try {error_set_game_statistic_leaderboard_rollup_code(data);} catch(e) { _log("Error calling: error_set_game_statistic_leaderboard_rollup_code: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_set_game_statistic_leaderboard_rollup_code_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_statistic_leaderboard_rollup_code(data);} catch(e) { _log("Error calling: handle_set_game_statistic_leaderboard_rollup_code: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_rollup_code_game_id: function
    (
        status,
        username,
        code,
        timestamp,
        profile_id,
        rank,
        rank_change,
        game_id,
        active,
        rank_total_count,
        absolute_value,
        data,
        stat_value,
        network,
        uuid,
        date_modified,
        level,
        stat_value_formatted,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'set'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@profile_id": profile_id
            , "@rank": rank
            , "@rank_change": rank_change
            , "@game_id": game_id
            , "@active": active
            , "@rank_total_count": rank_total_count
            , "@absolute_value": absolute_value
            , "@data": data
            , "@stat_value": stat_value
            , "@network": network
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@stat_value_formatted": stat_value_formatted
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_rollup_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_set_game_statistic_leaderboard_rollup_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_statistic_leaderboard_rollup_code_game_id(data);} catch(e) { _log("Error calling: error_set_game_statistic_leaderboard_rollup_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_set_game_statistic_leaderboard_rollup_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_statistic_leaderboard_rollup_code_game_id(data);} catch(e) { _log("Error calling: handle_set_game_statistic_leaderboard_rollup_code_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_rollup_code_game_id_profile_id: function
    (
        status,
        username,
        code,
        timestamp,
        profile_id,
        rank,
        rank_change,
        game_id,
        active,
        rank_total_count,
        absolute_value,
        data,
        stat_value,
        network,
        uuid,
        date_modified,
        level,
        stat_value_formatted,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'set'
                + "/by-code/by-game-id/by-profile-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@profile_id": profile_id
            , "@rank": rank
            , "@rank_change": rank_change
            , "@game_id": game_id
            , "@active": active
            , "@rank_total_count": rank_total_count
            , "@absolute_value": absolute_value
            , "@data": data
            , "@stat_value": stat_value
            , "@network": network
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@stat_value_formatted": stat_value_formatted
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_rollup_code_game_id_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_set_game_statistic_leaderboard_rollup_code_game_id_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_statistic_leaderboard_rollup_code_game_id_profile_id(data);} catch(e) { _log("Error calling: error_set_game_statistic_leaderboard_rollup_code_game_id_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_set_game_statistic_leaderboard_rollup_code_game_id_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_statistic_leaderboard_rollup_code_game_id_profile_id(data);} catch(e) { _log("Error calling: handle_set_game_statistic_leaderboard_rollup_code_game_id_profile_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp: function
    (
        status,
        username,
        code,
        timestamp,
        profile_id,
        rank,
        rank_change,
        game_id,
        active,
        rank_total_count,
        absolute_value,
        data,
        stat_value,
        network,
        uuid,
        date_modified,
        level,
        stat_value_formatted,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'set'
                + "/by-code/by-game-id/by-profile-id/by-timestamp"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                + "/@timestamp/" + timestamp            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@profile_id": profile_id
            , "@rank": rank
            , "@rank_change": rank_change
            , "@game_id": game_id
            , "@active": active
            , "@rank_total_count": rank_total_count
            , "@absolute_value": absolute_value
            , "@data": data
            , "@stat_value": stat_value
            , "@network": network
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@stat_value_formatted": stat_value_formatted
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_set_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_set_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp(data);} catch(e) { _log("Error calling: error_set_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_set_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp(data);} catch(e) { _log("Error calling: handle_set_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_rollup_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_rollup_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_del_game_statistic_leaderboard_rollup_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_statistic_leaderboard_rollup_uuid(data);} catch(e) { _log("Error calling: error_del_game_statistic_leaderboard_rollup_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_del_game_statistic_leaderboard_rollup_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_statistic_leaderboard_rollup_uuid(data);} catch(e) { _log("Error calling: handle_del_game_statistic_leaderboard_rollup_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_rollup_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'del'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_rollup_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_del_game_statistic_leaderboard_rollup_code_callback", true);
            // call a method that can be inline callback
            try {error_del_game_statistic_leaderboard_rollup_code(data);} catch(e) { _log("Error calling: error_del_game_statistic_leaderboard_rollup_code: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_del_game_statistic_leaderboard_rollup_code_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_statistic_leaderboard_rollup_code(data);} catch(e) { _log("Error calling: handle_del_game_statistic_leaderboard_rollup_code: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_rollup_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'del'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_rollup_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_del_game_statistic_leaderboard_rollup_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_statistic_leaderboard_rollup_code_game_id(data);} catch(e) { _log("Error calling: error_del_game_statistic_leaderboard_rollup_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_del_game_statistic_leaderboard_rollup_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_statistic_leaderboard_rollup_code_game_id(data);} catch(e) { _log("Error calling: handle_del_game_statistic_leaderboard_rollup_code_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_rollup_code_game_id_profile_id: function
    (
        code,
        game_id,
        profile_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'del'
                + "/by-code/by-game-id/by-profile-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_rollup_code_game_id_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_del_game_statistic_leaderboard_rollup_code_game_id_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_statistic_leaderboard_rollup_code_game_id_profile_id(data);} catch(e) { _log("Error calling: error_del_game_statistic_leaderboard_rollup_code_game_id_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_del_game_statistic_leaderboard_rollup_code_game_id_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_statistic_leaderboard_rollup_code_game_id_profile_id(data);} catch(e) { _log("Error calling: handle_del_game_statistic_leaderboard_rollup_code_game_id_profile_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp: function
    (
        code,
        game_id,
        profile_id,
        timestamp,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'del'
                + "/by-code/by-game-id/by-profile-id/by-timestamp"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                + "/@timestamp/" + timestamp            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_del_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_del_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp(data);} catch(e) { _log("Error calling: error_del_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_del_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp(data);} catch(e) { _log("Error calling: handle_del_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_rollup_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'del'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_statistic_leaderboard_rollup_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_del_game_statistic_leaderboard_rollup_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_statistic_leaderboard_rollup_profile_id_game_id(data);} catch(e) { _log("Error calling: error_del_game_statistic_leaderboard_rollup_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_del_game_statistic_leaderboard_rollup_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_statistic_leaderboard_rollup_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_del_game_statistic_leaderboard_rollup_profile_id_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_rollup: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_rollup_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_get_game_statistic_leaderboard_rollup_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_leaderboard_rollup(data);} catch(e) { _log("Error calling: error_get_game_statistic_leaderboard_rollup: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_get_game_statistic_leaderboard_rollup_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_leaderboard_rollup(data);} catch(e) { _log("Error calling: handle_get_game_statistic_leaderboard_rollup: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_rollup_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_rollup_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_get_game_statistic_leaderboard_rollup_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_leaderboard_rollup_uuid(data);} catch(e) { _log("Error calling: error_get_game_statistic_leaderboard_rollup_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_get_game_statistic_leaderboard_rollup_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_leaderboard_rollup_uuid(data);} catch(e) { _log("Error calling: handle_get_game_statistic_leaderboard_rollup_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_rollup_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'get'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_rollup_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_get_game_statistic_leaderboard_rollup_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_leaderboard_rollup_game_id(data);} catch(e) { _log("Error calling: error_get_game_statistic_leaderboard_rollup_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_get_game_statistic_leaderboard_rollup_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_leaderboard_rollup_game_id(data);} catch(e) { _log("Error calling: handle_get_game_statistic_leaderboard_rollup_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_rollup_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'get'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_rollup_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_get_game_statistic_leaderboard_rollup_code_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_leaderboard_rollup_code(data);} catch(e) { _log("Error calling: error_get_game_statistic_leaderboard_rollup_code: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_get_game_statistic_leaderboard_rollup_code_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_leaderboard_rollup_code(data);} catch(e) { _log("Error calling: handle_get_game_statistic_leaderboard_rollup_code: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_rollup_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'get'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_rollup_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_get_game_statistic_leaderboard_rollup_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_leaderboard_rollup_code_game_id(data);} catch(e) { _log("Error calling: error_get_game_statistic_leaderboard_rollup_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_get_game_statistic_leaderboard_rollup_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_leaderboard_rollup_code_game_id(data);} catch(e) { _log("Error calling: handle_get_game_statistic_leaderboard_rollup_code_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_rollup_code_game_id_profile_id: function
    (
        code,
        game_id,
        profile_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'get'
                + "/by-code/by-game-id/by-profile-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_rollup_code_game_id_profile_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_get_game_statistic_leaderboard_rollup_code_game_id_profile_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_leaderboard_rollup_code_game_id_profile_id(data);} catch(e) { _log("Error calling: error_get_game_statistic_leaderboard_rollup_code_game_id_profile_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_get_game_statistic_leaderboard_rollup_code_game_id_profile_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_leaderboard_rollup_code_game_id_profile_id(data);} catch(e) { _log("Error calling: handle_get_game_statistic_leaderboard_rollup_code_game_id_profile_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp: function
    (
        code,
        game_id,
        profile_id,
        timestamp,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'get'
                + "/by-code/by-game-id/by-profile-id/by-timestamp"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                + "/@profile_id/" + profile_id            
                + "/@timestamp/" + timestamp            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_get_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp(data);} catch(e) { _log("Error calling: error_get_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_get_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp(data);} catch(e) { _log("Error calling: handle_get_game_statistic_leaderboard_rollup_code_game_id_profile_id_timestamp: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_rollup_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'get'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_rollup_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_get_game_statistic_leaderboard_rollup_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_leaderboard_rollup_profile_id_game_id(data);} catch(e) { _log("Error calling: error_get_game_statistic_leaderboard_rollup_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_get_game_statistic_leaderboard_rollup_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_leaderboard_rollup_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_get_game_statistic_leaderboard_rollup_profile_id_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_rollup_profile_id_game_id_timestamp: function
    (
        profile_id,
        game_id,
        timestamp,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_leaderboard_rollup_service + 'get'
                + "/by-profile-id/by-game-id/by-timestamp"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@timestamp/" + timestamp            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_leaderboard_rollup_profile_id_game_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_leaderboard_rollup_get_game_statistic_leaderboard_rollup_profile_id_game_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_leaderboard_rollup_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: error_get_game_statistic_leaderboard_rollup_profile_id_game_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_leaderboard_rollup_get_game_statistic_leaderboard_rollup_profile_id_game_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_leaderboard_rollup_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: handle_get_game_statistic_leaderboard_rollup_profile_id_game_id_timestamp: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_live_queue = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_live_queue.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_live_queue: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_queue_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_live_queue_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_queue_count_game_live_queue_callback", true);
            // call a method that can be inline callback
            try {error_count_game_live_queue(data);} catch(e) { _log("Error calling: error_count_game_live_queue: " + e);}
        }
        else {
            _log("SUCCESS::game_live_queue_count_game_live_queue_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_live_queue(data);} catch(e) { _log("Error calling: handle_count_game_live_queue: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_live_queue_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_queue_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_live_queue_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_queue_count_game_live_queue_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_live_queue_uuid(data);} catch(e) { _log("Error calling: error_count_game_live_queue_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_live_queue_count_game_live_queue_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_live_queue_uuid(data);} catch(e) { _log("Error calling: handle_count_game_live_queue_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_live_queue_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_queue_service + 'count'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_live_queue_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_queue_count_game_live_queue_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_live_queue_profile_id_game_id(data);} catch(e) { _log("Error calling: error_count_game_live_queue_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_live_queue_count_game_live_queue_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_live_queue_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_count_game_live_queue_profile_id_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_live_queue_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_queue_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_live_queue_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_queue_browse_game_live_queue_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_live_queue_filter(data);} catch(e) { _log("Error calling: error_browse_game_live_queue_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_live_queue_browse_game_live_queue_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_live_queue_filter(data);} catch(e) { _log("Error calling: handle_browse_game_live_queue_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_live_queue_uuid: function
    (
        status,
        data_stat,
        uuid,
        date_modified,
        active,
        date_created,
        game_id,
        profile_id,
        type,
        data_ad,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_queue_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@data_stat": data_stat
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@active": active
            , "@date_created": date_created
            , "@game_id": game_id
            , "@profile_id": profile_id
            , "@type": type
            , "@data_ad": data_ad
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_live_queue_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_queue_set_game_live_queue_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_live_queue_uuid(data);} catch(e) { _log("Error calling: error_set_game_live_queue_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_live_queue_set_game_live_queue_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_live_queue_uuid(data);} catch(e) { _log("Error calling: handle_set_game_live_queue_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_live_queue_profile_id_game_id: function
    (
        status,
        data_stat,
        uuid,
        date_modified,
        active,
        date_created,
        game_id,
        profile_id,
        type,
        data_ad,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_queue_service + 'set'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@data_stat": data_stat
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@active": active
            , "@date_created": date_created
            , "@game_id": game_id
            , "@profile_id": profile_id
            , "@type": type
            , "@data_ad": data_ad
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_live_queue_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_queue_set_game_live_queue_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_live_queue_profile_id_game_id(data);} catch(e) { _log("Error calling: error_set_game_live_queue_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_live_queue_set_game_live_queue_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_live_queue_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_set_game_live_queue_profile_id_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_live_queue_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_queue_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_live_queue_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_queue_del_game_live_queue_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_live_queue_uuid(data);} catch(e) { _log("Error calling: error_del_game_live_queue_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_live_queue_del_game_live_queue_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_live_queue_uuid(data);} catch(e) { _log("Error calling: handle_del_game_live_queue_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_live_queue_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_queue_service + 'del'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_live_queue_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_queue_del_game_live_queue_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_live_queue_profile_id_game_id(data);} catch(e) { _log("Error calling: error_del_game_live_queue_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_live_queue_del_game_live_queue_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_live_queue_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_del_game_live_queue_profile_id_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_live_queue: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_queue_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_live_queue_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_queue_get_game_live_queue_callback", true);
            // call a method that can be inline callback
            try {error_get_game_live_queue(data);} catch(e) { _log("Error calling: error_get_game_live_queue: " + e);}
        }
        else {
            _log("SUCCESS::game_live_queue_get_game_live_queue_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_live_queue(data);} catch(e) { _log("Error calling: handle_get_game_live_queue: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_live_queue_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_queue_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_live_queue_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_queue_get_game_live_queue_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_live_queue_uuid(data);} catch(e) { _log("Error calling: error_get_game_live_queue_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_live_queue_get_game_live_queue_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_live_queue_uuid(data);} catch(e) { _log("Error calling: handle_get_game_live_queue_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_live_queue_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_queue_service + 'get'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_live_queue_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_queue_get_game_live_queue_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_live_queue_game_id(data);} catch(e) { _log("Error calling: error_get_game_live_queue_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_live_queue_get_game_live_queue_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_live_queue_game_id(data);} catch(e) { _log("Error calling: handle_get_game_live_queue_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_live_queue_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_queue_service + 'get'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_live_queue_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_queue_get_game_live_queue_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_live_queue_profile_id_game_id(data);} catch(e) { _log("Error calling: error_get_game_live_queue_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_live_queue_get_game_live_queue_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_live_queue_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_get_game_live_queue_profile_id_game_id: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_live_recent_queue = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_live_recent_queue.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_live_recent_queue: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_recent_queue_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_live_recent_queue_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_recent_queue_count_game_live_recent_queue_callback", true);
            // call a method that can be inline callback
            try {error_count_game_live_recent_queue(data);} catch(e) { _log("Error calling: error_count_game_live_recent_queue: " + e);}
        }
        else {
            _log("SUCCESS::game_live_recent_queue_count_game_live_recent_queue_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_live_recent_queue(data);} catch(e) { _log("Error calling: handle_count_game_live_recent_queue: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_live_recent_queue_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_recent_queue_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_live_recent_queue_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_recent_queue_count_game_live_recent_queue_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_live_recent_queue_uuid(data);} catch(e) { _log("Error calling: error_count_game_live_recent_queue_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_live_recent_queue_count_game_live_recent_queue_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_live_recent_queue_uuid(data);} catch(e) { _log("Error calling: handle_count_game_live_recent_queue_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_live_recent_queue_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_recent_queue_service + 'count'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_live_recent_queue_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_recent_queue_count_game_live_recent_queue_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_live_recent_queue_profile_id_game_id(data);} catch(e) { _log("Error calling: error_count_game_live_recent_queue_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_live_recent_queue_count_game_live_recent_queue_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_live_recent_queue_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_count_game_live_recent_queue_profile_id_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_live_recent_queue_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_recent_queue_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_live_recent_queue_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_recent_queue_browse_game_live_recent_queue_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_live_recent_queue_filter(data);} catch(e) { _log("Error calling: error_browse_game_live_recent_queue_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_live_recent_queue_browse_game_live_recent_queue_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_live_recent_queue_filter(data);} catch(e) { _log("Error calling: handle_browse_game_live_recent_queue_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_live_recent_queue_uuid: function
    (
        status,
        username,
        code,
        display_name,
        name,
        date_modified,
        data,
        profile_id,
        uuid,
        game,
        game_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_recent_queue_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@data": data
            , "@profile_id": profile_id
            , "@uuid": uuid
            , "@game": game
            , "@game_id": game_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_live_recent_queue_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_recent_queue_set_game_live_recent_queue_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_live_recent_queue_uuid(data);} catch(e) { _log("Error calling: error_set_game_live_recent_queue_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_live_recent_queue_set_game_live_recent_queue_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_live_recent_queue_uuid(data);} catch(e) { _log("Error calling: handle_set_game_live_recent_queue_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_live_recent_queue_profile_id_game_id: function
    (
        status,
        username,
        code,
        display_name,
        name,
        date_modified,
        data,
        profile_id,
        uuid,
        game,
        game_id,
        active,
        date_created,
        type,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_recent_queue_service + 'set'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@data": data
            , "@profile_id": profile_id
            , "@uuid": uuid
            , "@game": game
            , "@game_id": game_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_live_recent_queue_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_recent_queue_set_game_live_recent_queue_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_live_recent_queue_profile_id_game_id(data);} catch(e) { _log("Error calling: error_set_game_live_recent_queue_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_live_recent_queue_set_game_live_recent_queue_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_live_recent_queue_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_set_game_live_recent_queue_profile_id_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_live_recent_queue_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_recent_queue_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_live_recent_queue_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_recent_queue_del_game_live_recent_queue_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_live_recent_queue_uuid(data);} catch(e) { _log("Error calling: error_del_game_live_recent_queue_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_live_recent_queue_del_game_live_recent_queue_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_live_recent_queue_uuid(data);} catch(e) { _log("Error calling: handle_del_game_live_recent_queue_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_live_recent_queue_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_recent_queue_service + 'del'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_live_recent_queue_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_recent_queue_del_game_live_recent_queue_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_live_recent_queue_profile_id_game_id(data);} catch(e) { _log("Error calling: error_del_game_live_recent_queue_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_live_recent_queue_del_game_live_recent_queue_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_live_recent_queue_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_del_game_live_recent_queue_profile_id_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_live_recent_queue: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_recent_queue_service + 'get'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_live_recent_queue_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_recent_queue_get_game_live_recent_queue_callback", true);
            // call a method that can be inline callback
            try {error_get_game_live_recent_queue(data);} catch(e) { _log("Error calling: error_get_game_live_recent_queue: " + e);}
        }
        else {
            _log("SUCCESS::game_live_recent_queue_get_game_live_recent_queue_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_live_recent_queue(data);} catch(e) { _log("Error calling: handle_get_game_live_recent_queue: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_live_recent_queue_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_recent_queue_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_live_recent_queue_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_recent_queue_get_game_live_recent_queue_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_live_recent_queue_uuid(data);} catch(e) { _log("Error calling: error_get_game_live_recent_queue_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_live_recent_queue_get_game_live_recent_queue_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_live_recent_queue_uuid(data);} catch(e) { _log("Error calling: handle_get_game_live_recent_queue_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_live_recent_queue_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_recent_queue_service + 'get'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_live_recent_queue_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_recent_queue_get_game_live_recent_queue_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_live_recent_queue_game_id(data);} catch(e) { _log("Error calling: error_get_game_live_recent_queue_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_live_recent_queue_get_game_live_recent_queue_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_live_recent_queue_game_id(data);} catch(e) { _log("Error calling: handle_get_game_live_recent_queue_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_live_recent_queue_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_live_recent_queue_service + 'get'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_live_recent_queue_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_live_recent_queue_get_game_live_recent_queue_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_live_recent_queue_profile_id_game_id(data);} catch(e) { _log("Error calling: error_get_game_live_recent_queue_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_live_recent_queue_get_game_live_recent_queue_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_live_recent_queue_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_get_game_live_recent_queue_profile_id_game_id: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_profile_statistic = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_profile_statistic.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_profile_statistic: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_count_game_profile_statistic_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_statistic(data);} catch(e) { _log("Error calling: error_count_game_profile_statistic: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_count_game_profile_statistic_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_statistic(data);} catch(e) { _log("Error calling: handle_count_game_profile_statistic: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_count_game_profile_statistic_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_statistic_uuid(data);} catch(e) { _log("Error calling: error_count_game_profile_statistic_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_count_game_profile_statistic_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_statistic_uuid(data);} catch(e) { _log("Error calling: handle_count_game_profile_statistic_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'count'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_count_game_profile_statistic_code_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_statistic_code(data);} catch(e) { _log("Error calling: error_count_game_profile_statistic_code: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_count_game_profile_statistic_code_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_statistic_code(data);} catch(e) { _log("Error calling: handle_count_game_profile_statistic_code: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'count'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_count_game_profile_statistic_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_statistic_game_id(data);} catch(e) { _log("Error calling: error_count_game_profile_statistic_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_count_game_profile_statistic_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_statistic_game_id(data);} catch(e) { _log("Error calling: handle_count_game_profile_statistic_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'count'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_count_game_profile_statistic_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_statistic_code_game_id(data);} catch(e) { _log("Error calling: error_count_game_profile_statistic_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_count_game_profile_statistic_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_statistic_code_game_id(data);} catch(e) { _log("Error calling: handle_count_game_profile_statistic_code_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'count'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_count_game_profile_statistic_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_statistic_profile_id_game_id(data);} catch(e) { _log("Error calling: error_count_game_profile_statistic_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_count_game_profile_statistic_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_statistic_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_count_game_profile_statistic_profile_id_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_code_profile_id_game_id: function
    (
        code,
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'count'
                + "/by-code/by-profile-id/by-game-id"
                + "/@code/" + code            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_code_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_count_game_profile_statistic_code_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_statistic_code_profile_id_game_id(data);} catch(e) { _log("Error calling: error_count_game_profile_statistic_code_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_count_game_profile_statistic_code_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_statistic_code_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_count_game_profile_statistic_code_profile_id_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_code_profile_id_game_id_timestamp: function
    (
        code,
        profile_id,
        game_id,
        timestamp,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'count'
                + "/by-code/by-profile-id/by-game-id/by-timestamp"
                + "/@code/" + code            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@timestamp/" + timestamp            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_code_profile_id_game_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_count_game_profile_statistic_code_profile_id_game_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_statistic_code_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: error_count_game_profile_statistic_code_profile_id_game_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_count_game_profile_statistic_code_profile_id_game_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_statistic_code_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: handle_count_game_profile_statistic_code_profile_id_game_id_timestamp: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_profile_statistic_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_profile_statistic_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_browse_game_profile_statistic_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_profile_statistic_filter(data);} catch(e) { _log("Error calling: error_browse_game_profile_statistic_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_browse_game_profile_statistic_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_profile_statistic_filter(data);} catch(e) { _log("Error calling: handle_browse_game_profile_statistic_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_profile_statistic_uuid: function
    (
        status,
        username,
        code,
        timestamp,
        profile_id,
        active,
        game_id,
        data,
        stat_value,
        uuid,
        date_modified,
        level,
        points,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@profile_id": profile_id
            , "@active": active
            , "@game_id": game_id
            , "@data": data
            , "@stat_value": stat_value
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@points": points
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_statistic_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_set_game_profile_statistic_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_statistic_uuid(data);} catch(e) { _log("Error calling: error_set_game_profile_statistic_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_set_game_profile_statistic_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_statistic_uuid(data);} catch(e) { _log("Error calling: handle_set_game_profile_statistic_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_profile_statistic_uuid_profile_id_game_id_timestamp: function
    (
        status,
        username,
        code,
        timestamp,
        profile_id,
        active,
        game_id,
        data,
        stat_value,
        uuid,
        date_modified,
        level,
        points,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'set'
                + "/by-uuid/by-profile-id/by-game-id/by-timestamp"
                + "/@uuid/" + uuid            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@timestamp/" + timestamp            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@profile_id": profile_id
            , "@active": active
            , "@game_id": game_id
            , "@data": data
            , "@stat_value": stat_value
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@points": points
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_statistic_uuid_profile_id_game_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_set_game_profile_statistic_uuid_profile_id_game_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_statistic_uuid_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: error_set_game_profile_statistic_uuid_profile_id_game_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_set_game_profile_statistic_uuid_profile_id_game_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_statistic_uuid_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: handle_set_game_profile_statistic_uuid_profile_id_game_id_timestamp: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_profile_statistic_profile_id_code: function
    (
        status,
        username,
        code,
        timestamp,
        profile_id,
        active,
        game_id,
        data,
        stat_value,
        uuid,
        date_modified,
        level,
        points,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'set'
                + "/by-profile-id/by-code"
                + "/@profile_id/" + profile_id            
                + "/@code/" + code            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@profile_id": profile_id
            , "@active": active
            , "@game_id": game_id
            , "@data": data
            , "@stat_value": stat_value
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@points": points
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_statistic_profile_id_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_set_game_profile_statistic_profile_id_code_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_statistic_profile_id_code(data);} catch(e) { _log("Error calling: error_set_game_profile_statistic_profile_id_code: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_set_game_profile_statistic_profile_id_code_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_statistic_profile_id_code(data);} catch(e) { _log("Error calling: handle_set_game_profile_statistic_profile_id_code: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_profile_statistic_profile_id_code_timestamp: function
    (
        status,
        username,
        code,
        timestamp,
        profile_id,
        active,
        game_id,
        data,
        stat_value,
        uuid,
        date_modified,
        level,
        points,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'set'
                + "/by-profile-id/by-code/by-timestamp"
                + "/@profile_id/" + profile_id            
                + "/@code/" + code            
                + "/@timestamp/" + timestamp            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@profile_id": profile_id
            , "@active": active
            , "@game_id": game_id
            , "@data": data
            , "@stat_value": stat_value
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@points": points
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_statistic_profile_id_code_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_set_game_profile_statistic_profile_id_code_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_statistic_profile_id_code_timestamp(data);} catch(e) { _log("Error calling: error_set_game_profile_statistic_profile_id_code_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_set_game_profile_statistic_profile_id_code_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_statistic_profile_id_code_timestamp(data);} catch(e) { _log("Error calling: handle_set_game_profile_statistic_profile_id_code_timestamp: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_profile_statistic_code_profile_id_game_id_timestamp: function
    (
        status,
        username,
        code,
        timestamp,
        profile_id,
        active,
        game_id,
        data,
        stat_value,
        uuid,
        date_modified,
        level,
        points,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'set'
                + "/by-code/by-profile-id/by-game-id/by-timestamp"
                + "/@code/" + code            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@timestamp/" + timestamp            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@profile_id": profile_id
            , "@active": active
            , "@game_id": game_id
            , "@data": data
            , "@stat_value": stat_value
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@points": points
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_statistic_code_profile_id_game_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_set_game_profile_statistic_code_profile_id_game_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_statistic_code_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: error_set_game_profile_statistic_code_profile_id_game_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_set_game_profile_statistic_code_profile_id_game_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_statistic_code_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: handle_set_game_profile_statistic_code_profile_id_game_id_timestamp: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_profile_statistic_code_profile_id_game_id: function
    (
        status,
        username,
        code,
        timestamp,
        profile_id,
        active,
        game_id,
        data,
        stat_value,
        uuid,
        date_modified,
        level,
        points,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'set'
                + "/by-code/by-profile-id/by-game-id"
                + "/@code/" + code            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@profile_id": profile_id
            , "@active": active
            , "@game_id": game_id
            , "@data": data
            , "@stat_value": stat_value
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@points": points
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_statistic_code_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_set_game_profile_statistic_code_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_statistic_code_profile_id_game_id(data);} catch(e) { _log("Error calling: error_set_game_profile_statistic_code_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_set_game_profile_statistic_code_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_statistic_code_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_set_game_profile_statistic_code_profile_id_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_profile_statistic_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_profile_statistic_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_del_game_profile_statistic_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_profile_statistic_uuid(data);} catch(e) { _log("Error calling: error_del_game_profile_statistic_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_del_game_profile_statistic_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_profile_statistic_uuid(data);} catch(e) { _log("Error calling: handle_del_game_profile_statistic_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_profile_statistic_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'del'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_profile_statistic_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_del_game_profile_statistic_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_profile_statistic_code_game_id(data);} catch(e) { _log("Error calling: error_del_game_profile_statistic_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_del_game_profile_statistic_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_profile_statistic_code_game_id(data);} catch(e) { _log("Error calling: handle_del_game_profile_statistic_code_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_profile_statistic_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'del'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_profile_statistic_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_del_game_profile_statistic_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_profile_statistic_profile_id_game_id(data);} catch(e) { _log("Error calling: error_del_game_profile_statistic_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_del_game_profile_statistic_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_profile_statistic_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_del_game_profile_statistic_profile_id_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_profile_statistic_code_profile_id_game_id: function
    (
        code,
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'del'
                + "/by-code/by-profile-id/by-game-id"
                + "/@code/" + code            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_profile_statistic_code_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_del_game_profile_statistic_code_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_profile_statistic_code_profile_id_game_id(data);} catch(e) { _log("Error calling: error_del_game_profile_statistic_code_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_del_game_profile_statistic_code_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_profile_statistic_code_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_del_game_profile_statistic_code_profile_id_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_get_game_profile_statistic_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_statistic_uuid(data);} catch(e) { _log("Error calling: error_get_game_profile_statistic_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_get_game_profile_statistic_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_statistic_uuid(data);} catch(e) { _log("Error calling: handle_get_game_profile_statistic_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'get'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_get_game_profile_statistic_code_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_statistic_code(data);} catch(e) { _log("Error calling: error_get_game_profile_statistic_code: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_get_game_profile_statistic_code_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_statistic_code(data);} catch(e) { _log("Error calling: handle_get_game_profile_statistic_code: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'get'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_get_game_profile_statistic_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_statistic_game_id(data);} catch(e) { _log("Error calling: error_get_game_profile_statistic_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_get_game_profile_statistic_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_statistic_game_id(data);} catch(e) { _log("Error calling: handle_get_game_profile_statistic_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'get'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_get_game_profile_statistic_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_statistic_code_game_id(data);} catch(e) { _log("Error calling: error_get_game_profile_statistic_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_get_game_profile_statistic_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_statistic_code_game_id(data);} catch(e) { _log("Error calling: handle_get_game_profile_statistic_code_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'get'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_get_game_profile_statistic_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_statistic_profile_id_game_id(data);} catch(e) { _log("Error calling: error_get_game_profile_statistic_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_get_game_profile_statistic_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_statistic_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_get_game_profile_statistic_profile_id_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_profile_id_game_id_timestamp: function
    (
        profile_id,
        game_id,
        timestamp,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'get'
                + "/by-profile-id/by-game-id/by-timestamp"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@timestamp/" + timestamp            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_profile_id_game_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_get_game_profile_statistic_profile_id_game_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_statistic_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: error_get_game_profile_statistic_profile_id_game_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_get_game_profile_statistic_profile_id_game_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_statistic_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: handle_get_game_profile_statistic_profile_id_game_id_timestamp: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_code_profile_id_game_id: function
    (
        code,
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'get'
                + "/by-code/by-profile-id/by-game-id"
                + "/@code/" + code            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_code_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_get_game_profile_statistic_code_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_statistic_code_profile_id_game_id(data);} catch(e) { _log("Error calling: error_get_game_profile_statistic_code_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_get_game_profile_statistic_code_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_statistic_code_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_get_game_profile_statistic_code_profile_id_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_code_profile_id_game_id_timestamp: function
    (
        code,
        profile_id,
        game_id,
        timestamp,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_service + 'get'
                + "/by-code/by-profile-id/by-game-id/by-timestamp"
                + "/@code/" + code            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@timestamp/" + timestamp            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_code_profile_id_game_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_get_game_profile_statistic_code_profile_id_game_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_statistic_code_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: error_get_game_profile_statistic_code_profile_id_game_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_get_game_profile_statistic_code_profile_id_game_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_statistic_code_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: handle_get_game_profile_statistic_code_profile_id_game_id_timestamp: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_statistic_meta = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_statistic_meta.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_statistic_meta: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_meta_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_meta_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_meta_count_game_statistic_meta_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_meta(data);} catch(e) { _log("Error calling: error_count_game_statistic_meta: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_meta_count_game_statistic_meta_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_meta(data);} catch(e) { _log("Error calling: handle_count_game_statistic_meta: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_statistic_meta_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_meta_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_meta_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_meta_count_game_statistic_meta_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_meta_uuid(data);} catch(e) { _log("Error calling: error_count_game_statistic_meta_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_meta_count_game_statistic_meta_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_meta_uuid(data);} catch(e) { _log("Error calling: handle_count_game_statistic_meta_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_statistic_meta_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_meta_service + 'count'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_meta_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_meta_count_game_statistic_meta_code_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_meta_code(data);} catch(e) { _log("Error calling: error_count_game_statistic_meta_code: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_meta_count_game_statistic_meta_code_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_meta_code(data);} catch(e) { _log("Error calling: handle_count_game_statistic_meta_code: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_statistic_meta_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_meta_service + 'count'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_meta_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_meta_count_game_statistic_meta_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_meta_code_game_id(data);} catch(e) { _log("Error calling: error_count_game_statistic_meta_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_meta_count_game_statistic_meta_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_meta_code_game_id(data);} catch(e) { _log("Error calling: handle_count_game_statistic_meta_code_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_statistic_meta_name: function
    (
        name,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_meta_service + 'count'
                + "/by-name"
                + "/@name/" + name            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_meta_name_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_meta_count_game_statistic_meta_name_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_meta_name(data);} catch(e) { _log("Error calling: error_count_game_statistic_meta_name: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_meta_count_game_statistic_meta_name_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_meta_name(data);} catch(e) { _log("Error calling: handle_count_game_statistic_meta_name: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_statistic_meta_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_meta_service + 'count'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_statistic_meta_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_meta_count_game_statistic_meta_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_statistic_meta_game_id(data);} catch(e) { _log("Error calling: error_count_game_statistic_meta_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_meta_count_game_statistic_meta_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_statistic_meta_game_id(data);} catch(e) { _log("Error calling: handle_count_game_statistic_meta_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_statistic_meta_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_meta_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_statistic_meta_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_meta_browse_game_statistic_meta_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_statistic_meta_filter(data);} catch(e) { _log("Error calling: error_browse_game_statistic_meta_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_meta_browse_game_statistic_meta_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_statistic_meta_filter(data);} catch(e) { _log("Error calling: handle_browse_game_statistic_meta_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_statistic_meta_uuid: function
    (
        status,
        sort,
        code,
        display_name,
        name,
        date_modified,
        data,
        uuid,
        points,
        store_count,
        game_id,
        active,
        date_created,
        type,
        order,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_meta_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@sort": sort
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@data": data
            , "@uuid": uuid
            , "@points": points
            , "@store_count": store_count
            , "@game_id": game_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@order": order
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_statistic_meta_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_meta_set_game_statistic_meta_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_statistic_meta_uuid(data);} catch(e) { _log("Error calling: error_set_game_statistic_meta_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_meta_set_game_statistic_meta_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_statistic_meta_uuid(data);} catch(e) { _log("Error calling: handle_set_game_statistic_meta_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_statistic_meta_code_game_id: function
    (
        status,
        sort,
        code,
        display_name,
        name,
        date_modified,
        data,
        uuid,
        points,
        store_count,
        game_id,
        active,
        date_created,
        type,
        order,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_meta_service + 'set'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@sort": sort
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@data": data
            , "@uuid": uuid
            , "@points": points
            , "@store_count": store_count
            , "@game_id": game_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@order": order
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_statistic_meta_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_meta_set_game_statistic_meta_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_statistic_meta_code_game_id(data);} catch(e) { _log("Error calling: error_set_game_statistic_meta_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_meta_set_game_statistic_meta_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_statistic_meta_code_game_id(data);} catch(e) { _log("Error calling: handle_set_game_statistic_meta_code_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_statistic_meta_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_meta_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_statistic_meta_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_meta_del_game_statistic_meta_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_statistic_meta_uuid(data);} catch(e) { _log("Error calling: error_del_game_statistic_meta_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_meta_del_game_statistic_meta_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_statistic_meta_uuid(data);} catch(e) { _log("Error calling: handle_del_game_statistic_meta_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_statistic_meta_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_meta_service + 'del'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_statistic_meta_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_meta_del_game_statistic_meta_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_statistic_meta_code_game_id(data);} catch(e) { _log("Error calling: error_del_game_statistic_meta_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_meta_del_game_statistic_meta_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_statistic_meta_code_game_id(data);} catch(e) { _log("Error calling: handle_del_game_statistic_meta_code_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_meta_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_meta_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_meta_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_meta_get_game_statistic_meta_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_meta_uuid(data);} catch(e) { _log("Error calling: error_get_game_statistic_meta_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_meta_get_game_statistic_meta_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_meta_uuid(data);} catch(e) { _log("Error calling: handle_get_game_statistic_meta_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_meta_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_meta_service + 'get'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_meta_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_meta_get_game_statistic_meta_code_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_meta_code(data);} catch(e) { _log("Error calling: error_get_game_statistic_meta_code: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_meta_get_game_statistic_meta_code_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_meta_code(data);} catch(e) { _log("Error calling: handle_get_game_statistic_meta_code: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_meta_name: function
    (
        name,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_meta_service + 'get'
                + "/by-name"
                + "/@name/" + name            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_meta_name_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_meta_get_game_statistic_meta_name_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_meta_name(data);} catch(e) { _log("Error calling: error_get_game_statistic_meta_name: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_meta_get_game_statistic_meta_name_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_meta_name(data);} catch(e) { _log("Error calling: handle_get_game_statistic_meta_name: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_meta_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_meta_service + 'get'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_meta_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_meta_get_game_statistic_meta_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_meta_game_id(data);} catch(e) { _log("Error calling: error_get_game_statistic_meta_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_meta_get_game_statistic_meta_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_meta_game_id(data);} catch(e) { _log("Error calling: handle_get_game_statistic_meta_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_statistic_meta_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_statistic_meta_service + 'get'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_statistic_meta_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_statistic_meta_get_game_statistic_meta_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_statistic_meta_code_game_id(data);} catch(e) { _log("Error calling: error_get_game_statistic_meta_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_statistic_meta_get_game_statistic_meta_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_statistic_meta_code_game_id(data);} catch(e) { _log("Error calling: handle_get_game_statistic_meta_code_game_id: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_profile_statistic_timestamp = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_profile_statistic_timestamp.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_profile_statistic_timestamp: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_timestamp_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_timestamp_count_game_profile_statistic_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_statistic_timestamp(data);} catch(e) { _log("Error calling: error_count_game_profile_statistic_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_timestamp_count_game_profile_statistic_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_statistic_timestamp(data);} catch(e) { _log("Error calling: handle_count_game_profile_statistic_timestamp: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_timestamp_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_timestamp_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_timestamp_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_timestamp_count_game_profile_statistic_timestamp_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_statistic_timestamp_uuid(data);} catch(e) { _log("Error calling: error_count_game_profile_statistic_timestamp_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_timestamp_count_game_profile_statistic_timestamp_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_statistic_timestamp_uuid(data);} catch(e) { _log("Error calling: handle_count_game_profile_statistic_timestamp_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_timestamp_code_profile_id_game_id: function
    (
        code,
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_timestamp_service + 'count'
                + "/by-code/by-profile-id/by-game-id"
                + "/@code/" + code            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_timestamp_code_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_timestamp_count_game_profile_statistic_timestamp_code_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_statistic_timestamp_code_profile_id_game_id(data);} catch(e) { _log("Error calling: error_count_game_profile_statistic_timestamp_code_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_timestamp_count_game_profile_statistic_timestamp_code_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_statistic_timestamp_code_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_count_game_profile_statistic_timestamp_code_profile_id_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp: function
    (
        code,
        profile_id,
        game_id,
        timestamp,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_timestamp_service + 'count'
                + "/by-code/by-profile-id/by-game-id/by-timestamp"
                + "/@code/" + code            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@timestamp/" + timestamp            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_timestamp_count_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: error_count_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_timestamp_count_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: handle_count_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_profile_statistic_timestamp_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_timestamp_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_profile_statistic_timestamp_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_timestamp_browse_game_profile_statistic_timestamp_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_profile_statistic_timestamp_filter(data);} catch(e) { _log("Error calling: error_browse_game_profile_statistic_timestamp_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_timestamp_browse_game_profile_statistic_timestamp_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_profile_statistic_timestamp_filter(data);} catch(e) { _log("Error calling: handle_browse_game_profile_statistic_timestamp_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_profile_statistic_timestamp_uuid: function
    (
        status,
        code,
        uuid,
        timestamp,
        date_modified,
        active,
        date_created,
        game_id,
        profile_id,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_timestamp_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@uuid": uuid
            , "@timestamp": timestamp
            , "@date_modified": date_modified
            , "@active": active
            , "@date_created": date_created
            , "@game_id": game_id
            , "@profile_id": profile_id
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_statistic_timestamp_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_timestamp_set_game_profile_statistic_timestamp_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_statistic_timestamp_uuid(data);} catch(e) { _log("Error calling: error_set_game_profile_statistic_timestamp_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_timestamp_set_game_profile_statistic_timestamp_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_statistic_timestamp_uuid(data);} catch(e) { _log("Error calling: handle_set_game_profile_statistic_timestamp_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_profile_statistic_timestamp_code_profile_id_game_id: function
    (
        status,
        code,
        uuid,
        timestamp,
        date_modified,
        active,
        date_created,
        game_id,
        profile_id,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_timestamp_service + 'set'
                + "/by-code/by-profile-id/by-game-id"
                + "/@code/" + code            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@uuid": uuid
            , "@timestamp": timestamp
            , "@date_modified": date_modified
            , "@active": active
            , "@date_created": date_created
            , "@game_id": game_id
            , "@profile_id": profile_id
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_statistic_timestamp_code_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_timestamp_set_game_profile_statistic_timestamp_code_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_statistic_timestamp_code_profile_id_game_id(data);} catch(e) { _log("Error calling: error_set_game_profile_statistic_timestamp_code_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_timestamp_set_game_profile_statistic_timestamp_code_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_statistic_timestamp_code_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_set_game_profile_statistic_timestamp_code_profile_id_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp: function
    (
        status,
        code,
        uuid,
        timestamp,
        date_modified,
        active,
        date_created,
        game_id,
        profile_id,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_timestamp_service + 'set'
                + "/by-code/by-profile-id/by-game-id/by-timestamp"
                + "/@code/" + code            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@timestamp/" + timestamp            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@code": code
            , "@uuid": uuid
            , "@timestamp": timestamp
            , "@date_modified": date_modified
            , "@active": active
            , "@date_created": date_created
            , "@game_id": game_id
            , "@profile_id": profile_id
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_timestamp_set_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: error_set_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_timestamp_set_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: handle_set_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_profile_statistic_timestamp_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_timestamp_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_profile_statistic_timestamp_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_timestamp_del_game_profile_statistic_timestamp_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_profile_statistic_timestamp_uuid(data);} catch(e) { _log("Error calling: error_del_game_profile_statistic_timestamp_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_timestamp_del_game_profile_statistic_timestamp_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_profile_statistic_timestamp_uuid(data);} catch(e) { _log("Error calling: handle_del_game_profile_statistic_timestamp_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_profile_statistic_timestamp_code_profile_id_game_id: function
    (
        code,
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_timestamp_service + 'del'
                + "/by-code/by-profile-id/by-game-id"
                + "/@code/" + code            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_profile_statistic_timestamp_code_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_timestamp_del_game_profile_statistic_timestamp_code_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_profile_statistic_timestamp_code_profile_id_game_id(data);} catch(e) { _log("Error calling: error_del_game_profile_statistic_timestamp_code_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_timestamp_del_game_profile_statistic_timestamp_code_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_profile_statistic_timestamp_code_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_del_game_profile_statistic_timestamp_code_profile_id_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp: function
    (
        code,
        profile_id,
        game_id,
        timestamp,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_timestamp_service + 'del'
                + "/by-code/by-profile-id/by-game-id/by-timestamp"
                + "/@code/" + code            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@timestamp/" + timestamp            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_timestamp_del_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_del_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: error_del_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_timestamp_del_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: handle_del_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_timestamp_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_timestamp_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_timestamp_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_timestamp_get_game_profile_statistic_timestamp_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_statistic_timestamp_uuid(data);} catch(e) { _log("Error calling: error_get_game_profile_statistic_timestamp_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_timestamp_get_game_profile_statistic_timestamp_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_statistic_timestamp_uuid(data);} catch(e) { _log("Error calling: handle_get_game_profile_statistic_timestamp_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_timestamp_code_profile_id_game_id: function
    (
        code,
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_timestamp_service + 'get'
                + "/by-code/by-profile-id/by-game-id"
                + "/@code/" + code            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_timestamp_code_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_timestamp_get_game_profile_statistic_timestamp_code_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_statistic_timestamp_code_profile_id_game_id(data);} catch(e) { _log("Error calling: error_get_game_profile_statistic_timestamp_code_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_timestamp_get_game_profile_statistic_timestamp_code_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_statistic_timestamp_code_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_get_game_profile_statistic_timestamp_code_profile_id_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp: function
    (
        code,
        profile_id,
        game_id,
        timestamp,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_statistic_timestamp_service + 'get'
                + "/by-code/by-profile-id/by-game-id/by-timestamp"
                + "/@code/" + code            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@timestamp/" + timestamp            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_statistic_timestamp_get_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: error_get_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_statistic_timestamp_get_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: handle_get_game_profile_statistic_timestamp_code_profile_id_game_id_timestamp: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_key_meta = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_key_meta.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_key_meta: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_key_meta_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_count_game_key_meta_callback", true);
            // call a method that can be inline callback
            try {error_count_game_key_meta(data);} catch(e) { _log("Error calling: error_count_game_key_meta: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_count_game_key_meta_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_key_meta(data);} catch(e) { _log("Error calling: handle_count_game_key_meta: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_key_meta_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_key_meta_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_count_game_key_meta_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_key_meta_uuid(data);} catch(e) { _log("Error calling: error_count_game_key_meta_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_count_game_key_meta_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_key_meta_uuid(data);} catch(e) { _log("Error calling: handle_count_game_key_meta_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_key_meta_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'count'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_key_meta_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_count_game_key_meta_code_callback", true);
            // call a method that can be inline callback
            try {error_count_game_key_meta_code(data);} catch(e) { _log("Error calling: error_count_game_key_meta_code: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_count_game_key_meta_code_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_key_meta_code(data);} catch(e) { _log("Error calling: handle_count_game_key_meta_code: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_key_meta_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'count'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_key_meta_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_count_game_key_meta_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_key_meta_code_game_id(data);} catch(e) { _log("Error calling: error_count_game_key_meta_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_count_game_key_meta_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_key_meta_code_game_id(data);} catch(e) { _log("Error calling: handle_count_game_key_meta_code_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_key_meta_name: function
    (
        name,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'count'
                + "/by-name"
                + "/@name/" + name            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_key_meta_name_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_count_game_key_meta_name_callback", true);
            // call a method that can be inline callback
            try {error_count_game_key_meta_name(data);} catch(e) { _log("Error calling: error_count_game_key_meta_name: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_count_game_key_meta_name_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_key_meta_name(data);} catch(e) { _log("Error calling: handle_count_game_key_meta_name: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_key_meta_key: function
    (
        key,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'count'
                + "/by-key"
                + "/@key/" + key            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_key_meta_key_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_count_game_key_meta_key_callback", true);
            // call a method that can be inline callback
            try {error_count_game_key_meta_key(data);} catch(e) { _log("Error calling: error_count_game_key_meta_key: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_count_game_key_meta_key_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_key_meta_key(data);} catch(e) { _log("Error calling: handle_count_game_key_meta_key: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_key_meta_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'count'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_key_meta_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_count_game_key_meta_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_key_meta_game_id(data);} catch(e) { _log("Error calling: error_count_game_key_meta_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_count_game_key_meta_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_key_meta_game_id(data);} catch(e) { _log("Error calling: handle_count_game_key_meta_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_key_meta_key_game_id: function
    (
        key,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'count'
                + "/by-key/by-game-id"
                + "/@key/" + key            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_key_meta_key_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_count_game_key_meta_key_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_key_meta_key_game_id(data);} catch(e) { _log("Error calling: error_count_game_key_meta_key_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_count_game_key_meta_key_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_key_meta_key_game_id(data);} catch(e) { _log("Error calling: handle_count_game_key_meta_key_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_key_meta_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_key_meta_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_browse_game_key_meta_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_key_meta_filter(data);} catch(e) { _log("Error calling: error_browse_game_key_meta_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_browse_game_key_meta_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_key_meta_filter(data);} catch(e) { _log("Error calling: handle_browse_game_key_meta_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_key_meta_uuid: function
    (
        status,
        sort,
        code,
        display_name,
        name,
        date_modified,
        data,
        level,
        uuid,
        key_level,
        store_count,
        key,
        game_id,
        active,
        date_created,
        type,
        order,
        key_stat,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@sort": sort
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@data": data
            , "@level": level
            , "@uuid": uuid
            , "@key_level": key_level
            , "@store_count": store_count
            , "@key": key
            , "@game_id": game_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@order": order
            , "@key_stat": key_stat
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_key_meta_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_set_game_key_meta_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_key_meta_uuid(data);} catch(e) { _log("Error calling: error_set_game_key_meta_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_set_game_key_meta_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_key_meta_uuid(data);} catch(e) { _log("Error calling: handle_set_game_key_meta_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_key_meta_code_game_id: function
    (
        status,
        sort,
        code,
        display_name,
        name,
        date_modified,
        data,
        level,
        uuid,
        key_level,
        store_count,
        key,
        game_id,
        active,
        date_created,
        type,
        order,
        key_stat,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'set'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@sort": sort
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@data": data
            , "@level": level
            , "@uuid": uuid
            , "@key_level": key_level
            , "@store_count": store_count
            , "@key": key
            , "@game_id": game_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@order": order
            , "@key_stat": key_stat
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_key_meta_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_set_game_key_meta_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_key_meta_code_game_id(data);} catch(e) { _log("Error calling: error_set_game_key_meta_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_set_game_key_meta_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_key_meta_code_game_id(data);} catch(e) { _log("Error calling: handle_set_game_key_meta_code_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_key_meta_key_game_id: function
    (
        status,
        sort,
        code,
        display_name,
        name,
        date_modified,
        data,
        level,
        uuid,
        key_level,
        store_count,
        key,
        game_id,
        active,
        date_created,
        type,
        order,
        key_stat,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'set'
                + "/by-key/by-game-id"
                + "/@key/" + key            
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@sort": sort
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@data": data
            , "@level": level
            , "@uuid": uuid
            , "@key_level": key_level
            , "@store_count": store_count
            , "@key": key
            , "@game_id": game_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@order": order
            , "@key_stat": key_stat
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_key_meta_key_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_set_game_key_meta_key_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_key_meta_key_game_id(data);} catch(e) { _log("Error calling: error_set_game_key_meta_key_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_set_game_key_meta_key_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_key_meta_key_game_id(data);} catch(e) { _log("Error calling: handle_set_game_key_meta_key_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_key_meta_key_game_id_level: function
    (
        status,
        sort,
        code,
        display_name,
        name,
        date_modified,
        data,
        level,
        uuid,
        key_level,
        store_count,
        key,
        game_id,
        active,
        date_created,
        type,
        order,
        key_stat,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'set'
                + "/by-key/by-game-id/by-level"
                + "/@key/" + key            
                + "/@game_id/" + game_id            
                + "/@level/" + level            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@sort": sort
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@data": data
            , "@level": level
            , "@uuid": uuid
            , "@key_level": key_level
            , "@store_count": store_count
            , "@key": key
            , "@game_id": game_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@order": order
            , "@key_stat": key_stat
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_key_meta_key_game_id_level_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_set_game_key_meta_key_game_id_level_callback", true);
            // call a method that can be inline callback
            try {error_set_game_key_meta_key_game_id_level(data);} catch(e) { _log("Error calling: error_set_game_key_meta_key_game_id_level: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_set_game_key_meta_key_game_id_level_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_key_meta_key_game_id_level(data);} catch(e) { _log("Error calling: handle_set_game_key_meta_key_game_id_level: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_key_meta_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_key_meta_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_del_game_key_meta_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_key_meta_uuid(data);} catch(e) { _log("Error calling: error_del_game_key_meta_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_del_game_key_meta_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_key_meta_uuid(data);} catch(e) { _log("Error calling: handle_del_game_key_meta_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_key_meta_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'del'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_key_meta_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_del_game_key_meta_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_key_meta_code_game_id(data);} catch(e) { _log("Error calling: error_del_game_key_meta_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_del_game_key_meta_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_key_meta_code_game_id(data);} catch(e) { _log("Error calling: handle_del_game_key_meta_code_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_key_meta_key_game_id: function
    (
        key,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'del'
                + "/by-key/by-game-id"
                + "/@key/" + key            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_key_meta_key_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_del_game_key_meta_key_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_key_meta_key_game_id(data);} catch(e) { _log("Error calling: error_del_game_key_meta_key_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_del_game_key_meta_key_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_key_meta_key_game_id(data);} catch(e) { _log("Error calling: handle_del_game_key_meta_key_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_key_meta_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_key_meta_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_get_game_key_meta_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_key_meta_uuid(data);} catch(e) { _log("Error calling: error_get_game_key_meta_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_get_game_key_meta_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_key_meta_uuid(data);} catch(e) { _log("Error calling: handle_get_game_key_meta_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_key_meta_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'get'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_key_meta_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_get_game_key_meta_code_callback", true);
            // call a method that can be inline callback
            try {error_get_game_key_meta_code(data);} catch(e) { _log("Error calling: error_get_game_key_meta_code: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_get_game_key_meta_code_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_key_meta_code(data);} catch(e) { _log("Error calling: handle_get_game_key_meta_code: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_key_meta_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'get'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_key_meta_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_get_game_key_meta_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_key_meta_code_game_id(data);} catch(e) { _log("Error calling: error_get_game_key_meta_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_get_game_key_meta_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_key_meta_code_game_id(data);} catch(e) { _log("Error calling: handle_get_game_key_meta_code_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_key_meta_name: function
    (
        name,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'get'
                + "/by-name"
                + "/@name/" + name            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_key_meta_name_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_get_game_key_meta_name_callback", true);
            // call a method that can be inline callback
            try {error_get_game_key_meta_name(data);} catch(e) { _log("Error calling: error_get_game_key_meta_name: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_get_game_key_meta_name_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_key_meta_name(data);} catch(e) { _log("Error calling: handle_get_game_key_meta_name: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_key_meta_key: function
    (
        key,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'get'
                + "/by-key"
                + "/@key/" + key            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_key_meta_key_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_get_game_key_meta_key_callback", true);
            // call a method that can be inline callback
            try {error_get_game_key_meta_key(data);} catch(e) { _log("Error calling: error_get_game_key_meta_key: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_get_game_key_meta_key_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_key_meta_key(data);} catch(e) { _log("Error calling: handle_get_game_key_meta_key: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_key_meta_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'get'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_key_meta_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_get_game_key_meta_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_key_meta_game_id(data);} catch(e) { _log("Error calling: error_get_game_key_meta_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_get_game_key_meta_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_key_meta_game_id(data);} catch(e) { _log("Error calling: handle_get_game_key_meta_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_key_meta_key_game_id: function
    (
        key,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'get'
                + "/by-key/by-game-id"
                + "/@key/" + key            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_key_meta_key_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_get_game_key_meta_key_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_key_meta_key_game_id(data);} catch(e) { _log("Error calling: error_get_game_key_meta_key_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_get_game_key_meta_key_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_key_meta_key_game_id(data);} catch(e) { _log("Error calling: handle_get_game_key_meta_key_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_key_meta_code_level: function
    (
        code,
        level,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_key_meta_service + 'get'
                + "/by-code/by-level"
                + "/@code/" + code            
                + "/@level/" + level            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_key_meta_code_level_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_key_meta_get_game_key_meta_code_level_callback", true);
            // call a method that can be inline callback
            try {error_get_game_key_meta_code_level(data);} catch(e) { _log("Error calling: error_get_game_key_meta_code_level: " + e);}
        }
        else {
            _log("SUCCESS::game_key_meta_get_game_key_meta_code_level_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_key_meta_code_level(data);} catch(e) { _log("Error calling: handle_get_game_key_meta_code_level: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_level = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_level.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_level: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_level_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_level_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_level_count_game_level_callback", true);
            // call a method that can be inline callback
            try {error_count_game_level(data);} catch(e) { _log("Error calling: error_count_game_level: " + e);}
        }
        else {
            _log("SUCCESS::game_level_count_game_level_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_level(data);} catch(e) { _log("Error calling: handle_count_game_level: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_level_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_level_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_level_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_level_count_game_level_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_level_uuid(data);} catch(e) { _log("Error calling: error_count_game_level_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_level_count_game_level_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_level_uuid(data);} catch(e) { _log("Error calling: handle_count_game_level_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_level_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_level_service + 'count'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_level_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_level_count_game_level_code_callback", true);
            // call a method that can be inline callback
            try {error_count_game_level_code(data);} catch(e) { _log("Error calling: error_count_game_level_code: " + e);}
        }
        else {
            _log("SUCCESS::game_level_count_game_level_code_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_level_code(data);} catch(e) { _log("Error calling: handle_count_game_level_code: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_level_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_level_service + 'count'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_level_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_level_count_game_level_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_level_code_game_id(data);} catch(e) { _log("Error calling: error_count_game_level_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_level_count_game_level_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_level_code_game_id(data);} catch(e) { _log("Error calling: handle_count_game_level_code_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_level_name: function
    (
        name,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_level_service + 'count'
                + "/by-name"
                + "/@name/" + name            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_level_name_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_level_count_game_level_name_callback", true);
            // call a method that can be inline callback
            try {error_count_game_level_name(data);} catch(e) { _log("Error calling: error_count_game_level_name: " + e);}
        }
        else {
            _log("SUCCESS::game_level_count_game_level_name_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_level_name(data);} catch(e) { _log("Error calling: handle_count_game_level_name: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_level_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_level_service + 'count'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_level_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_level_count_game_level_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_level_game_id(data);} catch(e) { _log("Error calling: error_count_game_level_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_level_count_game_level_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_level_game_id(data);} catch(e) { _log("Error calling: handle_count_game_level_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_level_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_level_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_level_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_level_browse_game_level_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_level_filter(data);} catch(e) { _log("Error calling: error_browse_game_level_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_level_browse_game_level_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_level_filter(data);} catch(e) { _log("Error calling: handle_browse_game_level_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_level_uuid: function
    (
        status,
        sort,
        code,
        display_name,
        name,
        date_modified,
        data,
        uuid,
        game_id,
        active,
        date_created,
        type,
        order,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_level_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@sort": sort
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@data": data
            , "@uuid": uuid
            , "@game_id": game_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@order": order
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_level_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_level_set_game_level_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_level_uuid(data);} catch(e) { _log("Error calling: error_set_game_level_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_level_set_game_level_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_level_uuid(data);} catch(e) { _log("Error calling: handle_set_game_level_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_level_code_game_id: function
    (
        status,
        sort,
        code,
        display_name,
        name,
        date_modified,
        data,
        uuid,
        game_id,
        active,
        date_created,
        type,
        order,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_level_service + 'set'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@sort": sort
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@date_modified": date_modified
            , "@data": data
            , "@uuid": uuid
            , "@game_id": game_id
            , "@active": active
            , "@date_created": date_created
            , "@type": type
            , "@order": order
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_level_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_level_set_game_level_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_level_code_game_id(data);} catch(e) { _log("Error calling: error_set_game_level_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_level_set_game_level_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_level_code_game_id(data);} catch(e) { _log("Error calling: handle_set_game_level_code_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_level_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_level_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_level_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_level_del_game_level_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_level_uuid(data);} catch(e) { _log("Error calling: error_del_game_level_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_level_del_game_level_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_level_uuid(data);} catch(e) { _log("Error calling: handle_del_game_level_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_level_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_level_service + 'del'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_level_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_level_del_game_level_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_level_code_game_id(data);} catch(e) { _log("Error calling: error_del_game_level_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_level_del_game_level_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_level_code_game_id(data);} catch(e) { _log("Error calling: handle_del_game_level_code_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_level_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_level_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_level_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_level_get_game_level_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_level_uuid(data);} catch(e) { _log("Error calling: error_get_game_level_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_level_get_game_level_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_level_uuid(data);} catch(e) { _log("Error calling: handle_get_game_level_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_level_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_level_service + 'get'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_level_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_level_get_game_level_code_callback", true);
            // call a method that can be inline callback
            try {error_get_game_level_code(data);} catch(e) { _log("Error calling: error_get_game_level_code: " + e);}
        }
        else {
            _log("SUCCESS::game_level_get_game_level_code_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_level_code(data);} catch(e) { _log("Error calling: handle_get_game_level_code: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_level_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_level_service + 'get'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_level_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_level_get_game_level_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_level_code_game_id(data);} catch(e) { _log("Error calling: error_get_game_level_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_level_get_game_level_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_level_code_game_id(data);} catch(e) { _log("Error calling: handle_get_game_level_code_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_level_name: function
    (
        name,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_level_service + 'get'
                + "/by-name"
                + "/@name/" + name            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_level_name_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_level_get_game_level_name_callback", true);
            // call a method that can be inline callback
            try {error_get_game_level_name(data);} catch(e) { _log("Error calling: error_get_game_level_name: " + e);}
        }
        else {
            _log("SUCCESS::game_level_get_game_level_name_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_level_name(data);} catch(e) { _log("Error calling: handle_get_game_level_name: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_level_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_level_service + 'get'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_level_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_level_get_game_level_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_level_game_id(data);} catch(e) { _log("Error calling: error_get_game_level_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_level_get_game_level_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_level_game_id(data);} catch(e) { _log("Error calling: handle_get_game_level_game_id: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_profile_achievement = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_profile_achievement.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_profile_achievement: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_achievement_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_count_game_profile_achievement_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_achievement(data);} catch(e) { _log("Error calling: error_count_game_profile_achievement: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_count_game_profile_achievement_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_achievement(data);} catch(e) { _log("Error calling: handle_count_game_profile_achievement: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_achievement_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_achievement_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_count_game_profile_achievement_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_achievement_uuid(data);} catch(e) { _log("Error calling: error_count_game_profile_achievement_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_count_game_profile_achievement_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_achievement_uuid(data);} catch(e) { _log("Error calling: handle_count_game_profile_achievement_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_achievement_profile_id_code: function
    (
        profile_id,
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'count'
                + "/by-profile-id/by-code"
                + "/@profile_id/" + profile_id            
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_achievement_profile_id_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_count_game_profile_achievement_profile_id_code_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_achievement_profile_id_code(data);} catch(e) { _log("Error calling: error_count_game_profile_achievement_profile_id_code: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_count_game_profile_achievement_profile_id_code_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_achievement_profile_id_code(data);} catch(e) { _log("Error calling: handle_count_game_profile_achievement_profile_id_code: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_achievement_username: function
    (
        username,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'count'
                + "/by-username"
                + "/@username/" + username            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_achievement_username_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_count_game_profile_achievement_username_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_achievement_username(data);} catch(e) { _log("Error calling: error_count_game_profile_achievement_username: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_count_game_profile_achievement_username_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_achievement_username(data);} catch(e) { _log("Error calling: handle_count_game_profile_achievement_username: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_achievement_code_profile_id_game_id: function
    (
        code,
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'count'
                + "/by-code/by-profile-id/by-game-id"
                + "/@code/" + code            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_achievement_code_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_count_game_profile_achievement_code_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_achievement_code_profile_id_game_id(data);} catch(e) { _log("Error calling: error_count_game_profile_achievement_code_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_count_game_profile_achievement_code_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_achievement_code_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_count_game_profile_achievement_code_profile_id_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_profile_achievement_code_profile_id_game_id_timestamp: function
    (
        code,
        profile_id,
        game_id,
        timestamp,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'count'
                + "/by-code/by-profile-id/by-game-id/by-timestamp"
                + "/@code/" + code            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@timestamp/" + timestamp            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_profile_achievement_code_profile_id_game_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_count_game_profile_achievement_code_profile_id_game_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_count_game_profile_achievement_code_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: error_count_game_profile_achievement_code_profile_id_game_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_count_game_profile_achievement_code_profile_id_game_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_profile_achievement_code_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: handle_count_game_profile_achievement_code_profile_id_game_id_timestamp: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_profile_achievement_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_profile_achievement_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_browse_game_profile_achievement_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_profile_achievement_filter(data);} catch(e) { _log("Error calling: error_browse_game_profile_achievement_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_browse_game_profile_achievement_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_profile_achievement_filter(data);} catch(e) { _log("Error calling: handle_browse_game_profile_achievement_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_profile_achievement_uuid: function
    (
        status,
        username,
        code,
        timestamp,
        completed,
        profile_id,
        active,
        game_id,
        achievement_value,
        data,
        uuid,
        date_modified,
        level,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@completed": completed
            , "@profile_id": profile_id
            , "@active": active
            , "@game_id": game_id
            , "@achievement_value": achievement_value
            , "@data": data
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_achievement_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_set_game_profile_achievement_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_achievement_uuid(data);} catch(e) { _log("Error calling: error_set_game_profile_achievement_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_set_game_profile_achievement_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_achievement_uuid(data);} catch(e) { _log("Error calling: handle_set_game_profile_achievement_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_profile_achievement_uuid_code: function
    (
        status,
        username,
        code,
        timestamp,
        completed,
        profile_id,
        active,
        game_id,
        achievement_value,
        data,
        uuid,
        date_modified,
        level,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'set'
                + "/by-uuid/by-code"
                + "/@uuid/" + uuid            
                + "/@code/" + code            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@completed": completed
            , "@profile_id": profile_id
            , "@active": active
            , "@game_id": game_id
            , "@achievement_value": achievement_value
            , "@data": data
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_achievement_uuid_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_set_game_profile_achievement_uuid_code_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_achievement_uuid_code(data);} catch(e) { _log("Error calling: error_set_game_profile_achievement_uuid_code: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_set_game_profile_achievement_uuid_code_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_achievement_uuid_code(data);} catch(e) { _log("Error calling: handle_set_game_profile_achievement_uuid_code: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_profile_achievement_profile_id_code: function
    (
        status,
        username,
        code,
        timestamp,
        completed,
        profile_id,
        active,
        game_id,
        achievement_value,
        data,
        uuid,
        date_modified,
        level,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'set'
                + "/by-profile-id/by-code"
                + "/@profile_id/" + profile_id            
                + "/@code/" + code            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@completed": completed
            , "@profile_id": profile_id
            , "@active": active
            , "@game_id": game_id
            , "@achievement_value": achievement_value
            , "@data": data
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_achievement_profile_id_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_set_game_profile_achievement_profile_id_code_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_achievement_profile_id_code(data);} catch(e) { _log("Error calling: error_set_game_profile_achievement_profile_id_code: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_set_game_profile_achievement_profile_id_code_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_achievement_profile_id_code(data);} catch(e) { _log("Error calling: handle_set_game_profile_achievement_profile_id_code: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_profile_achievement_code_profile_id_game_id: function
    (
        status,
        username,
        code,
        timestamp,
        completed,
        profile_id,
        active,
        game_id,
        achievement_value,
        data,
        uuid,
        date_modified,
        level,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'set'
                + "/by-code/by-profile-id/by-game-id"
                + "/@code/" + code            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@completed": completed
            , "@profile_id": profile_id
            , "@active": active
            , "@game_id": game_id
            , "@achievement_value": achievement_value
            , "@data": data
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_achievement_code_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_set_game_profile_achievement_code_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_achievement_code_profile_id_game_id(data);} catch(e) { _log("Error calling: error_set_game_profile_achievement_code_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_set_game_profile_achievement_code_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_achievement_code_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_set_game_profile_achievement_code_profile_id_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_profile_achievement_code_profile_id_game_id_timestamp: function
    (
        status,
        username,
        code,
        timestamp,
        completed,
        profile_id,
        active,
        game_id,
        achievement_value,
        data,
        uuid,
        date_modified,
        level,
        date_created,
        type,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'set'
                + "/by-code/by-profile-id/by-game-id/by-timestamp"
                + "/@code/" + code            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@timestamp/" + timestamp            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@username": username
            , "@code": code
            , "@timestamp": timestamp
            , "@completed": completed
            , "@profile_id": profile_id
            , "@active": active
            , "@game_id": game_id
            , "@achievement_value": achievement_value
            , "@data": data
            , "@uuid": uuid
            , "@date_modified": date_modified
            , "@level": level
            , "@date_created": date_created
            , "@type": type
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_profile_achievement_code_profile_id_game_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_set_game_profile_achievement_code_profile_id_game_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_set_game_profile_achievement_code_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: error_set_game_profile_achievement_code_profile_id_game_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_set_game_profile_achievement_code_profile_id_game_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_profile_achievement_code_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: handle_set_game_profile_achievement_code_profile_id_game_id_timestamp: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_profile_achievement_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_profile_achievement_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_del_game_profile_achievement_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_profile_achievement_uuid(data);} catch(e) { _log("Error calling: error_del_game_profile_achievement_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_del_game_profile_achievement_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_profile_achievement_uuid(data);} catch(e) { _log("Error calling: handle_del_game_profile_achievement_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_profile_achievement_profile_id_code: function
    (
        profile_id,
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'del'
                + "/by-profile-id/by-code"
                + "/@profile_id/" + profile_id            
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_profile_achievement_profile_id_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_del_game_profile_achievement_profile_id_code_callback", true);
            // call a method that can be inline callback
            try {error_del_game_profile_achievement_profile_id_code(data);} catch(e) { _log("Error calling: error_del_game_profile_achievement_profile_id_code: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_del_game_profile_achievement_profile_id_code_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_profile_achievement_profile_id_code(data);} catch(e) { _log("Error calling: handle_del_game_profile_achievement_profile_id_code: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_profile_achievement_uuid_code: function
    (
        uuid,
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'del'
                + "/by-uuid/by-code"
                + "/@uuid/" + uuid            
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_profile_achievement_uuid_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_del_game_profile_achievement_uuid_code_callback", true);
            // call a method that can be inline callback
            try {error_del_game_profile_achievement_uuid_code(data);} catch(e) { _log("Error calling: error_del_game_profile_achievement_uuid_code: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_del_game_profile_achievement_uuid_code_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_profile_achievement_uuid_code(data);} catch(e) { _log("Error calling: handle_del_game_profile_achievement_uuid_code: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_achievement_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_achievement_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_get_game_profile_achievement_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_achievement_uuid(data);} catch(e) { _log("Error calling: error_get_game_profile_achievement_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_get_game_profile_achievement_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_achievement_uuid(data);} catch(e) { _log("Error calling: handle_get_game_profile_achievement_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_achievement_profile_id_code: function
    (
        profile_id,
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'get'
                + "/by-profile-id/by-code"
                + "/@profile_id/" + profile_id            
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_achievement_profile_id_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_get_game_profile_achievement_profile_id_code_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_achievement_profile_id_code(data);} catch(e) { _log("Error calling: error_get_game_profile_achievement_profile_id_code: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_get_game_profile_achievement_profile_id_code_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_achievement_profile_id_code(data);} catch(e) { _log("Error calling: handle_get_game_profile_achievement_profile_id_code: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_achievement_username: function
    (
        username,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'get'
                + "/by-username"
                + "/@username/" + username            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_achievement_username_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_get_game_profile_achievement_username_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_achievement_username(data);} catch(e) { _log("Error calling: error_get_game_profile_achievement_username: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_get_game_profile_achievement_username_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_achievement_username(data);} catch(e) { _log("Error calling: handle_get_game_profile_achievement_username: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_achievement_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'get'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_achievement_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_get_game_profile_achievement_code_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_achievement_code(data);} catch(e) { _log("Error calling: error_get_game_profile_achievement_code: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_get_game_profile_achievement_code_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_achievement_code(data);} catch(e) { _log("Error calling: handle_get_game_profile_achievement_code: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_achievement_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'get'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_achievement_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_get_game_profile_achievement_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_achievement_game_id(data);} catch(e) { _log("Error calling: error_get_game_profile_achievement_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_get_game_profile_achievement_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_achievement_game_id(data);} catch(e) { _log("Error calling: handle_get_game_profile_achievement_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_achievement_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'get'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_achievement_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_get_game_profile_achievement_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_achievement_code_game_id(data);} catch(e) { _log("Error calling: error_get_game_profile_achievement_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_get_game_profile_achievement_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_achievement_code_game_id(data);} catch(e) { _log("Error calling: handle_get_game_profile_achievement_code_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_achievement_profile_id_game_id: function
    (
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'get'
                + "/by-profile-id/by-game-id"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_achievement_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_get_game_profile_achievement_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_achievement_profile_id_game_id(data);} catch(e) { _log("Error calling: error_get_game_profile_achievement_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_get_game_profile_achievement_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_achievement_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_get_game_profile_achievement_profile_id_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_achievement_profile_id_game_id_timestamp: function
    (
        profile_id,
        game_id,
        timestamp,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'get'
                + "/by-profile-id/by-game-id/by-timestamp"
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@timestamp/" + timestamp            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_achievement_profile_id_game_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_get_game_profile_achievement_profile_id_game_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_achievement_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: error_get_game_profile_achievement_profile_id_game_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_get_game_profile_achievement_profile_id_game_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_achievement_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: handle_get_game_profile_achievement_profile_id_game_id_timestamp: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_achievement_code_profile_id_game_id: function
    (
        code,
        profile_id,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'get'
                + "/by-code/by-profile-id/by-game-id"
                + "/@code/" + code            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_achievement_code_profile_id_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_get_game_profile_achievement_code_profile_id_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_achievement_code_profile_id_game_id(data);} catch(e) { _log("Error calling: error_get_game_profile_achievement_code_profile_id_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_get_game_profile_achievement_code_profile_id_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_achievement_code_profile_id_game_id(data);} catch(e) { _log("Error calling: handle_get_game_profile_achievement_code_profile_id_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_profile_achievement_code_profile_id_game_id_timestamp: function
    (
        code,
        profile_id,
        game_id,
        timestamp,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_profile_achievement_service + 'get'
                + "/by-code/by-profile-id/by-game-id/by-timestamp"
                + "/@code/" + code            
                + "/@profile_id/" + profile_id            
                + "/@game_id/" + game_id            
                + "/@timestamp/" + timestamp            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_profile_achievement_code_profile_id_game_id_timestamp_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_profile_achievement_get_game_profile_achievement_code_profile_id_game_id_timestamp_callback", true);
            // call a method that can be inline callback
            try {error_get_game_profile_achievement_code_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: error_get_game_profile_achievement_code_profile_id_game_id_timestamp: " + e);}
        }
        else {
            _log("SUCCESS::game_profile_achievement_get_game_profile_achievement_code_profile_id_game_id_timestamp_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_profile_achievement_code_profile_id_game_id_timestamp(data);} catch(e) { _log("Error calling: handle_get_game_profile_achievement_code_profile_id_game_id_timestamp: " + e);}
        }
        
    }
}
//-------------------------------------------------
gaming.game_achievement_meta = function() {
    this.fn_callback;
    this.fn_callbacks;
    return_gaming_obj = this;
}        
        
gaming.game_achievement_meta.prototype = {
    //-------------------------------------------------
    init: function() {

    } 
    ,
    //-------------------------------------------------
    count_game_achievement_meta: function
    (
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_achievement_meta_service + 'count'
                + ""
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_achievement_meta_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_achievement_meta_count_game_achievement_meta_callback", true);
            // call a method that can be inline callback
            try {error_count_game_achievement_meta(data);} catch(e) { _log("Error calling: error_count_game_achievement_meta: " + e);}
        }
        else {
            _log("SUCCESS::game_achievement_meta_count_game_achievement_meta_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_achievement_meta(data);} catch(e) { _log("Error calling: handle_count_game_achievement_meta: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_achievement_meta_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_achievement_meta_service + 'count'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_achievement_meta_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_achievement_meta_count_game_achievement_meta_uuid_callback", true);
            // call a method that can be inline callback
            try {error_count_game_achievement_meta_uuid(data);} catch(e) { _log("Error calling: error_count_game_achievement_meta_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_achievement_meta_count_game_achievement_meta_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_achievement_meta_uuid(data);} catch(e) { _log("Error calling: handle_count_game_achievement_meta_uuid: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_achievement_meta_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_achievement_meta_service + 'count'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_achievement_meta_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_achievement_meta_count_game_achievement_meta_code_callback", true);
            // call a method that can be inline callback
            try {error_count_game_achievement_meta_code(data);} catch(e) { _log("Error calling: error_count_game_achievement_meta_code: " + e);}
        }
        else {
            _log("SUCCESS::game_achievement_meta_count_game_achievement_meta_code_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_achievement_meta_code(data);} catch(e) { _log("Error calling: handle_count_game_achievement_meta_code: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_achievement_meta_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_achievement_meta_service + 'count'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_achievement_meta_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_achievement_meta_count_game_achievement_meta_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_achievement_meta_code_game_id(data);} catch(e) { _log("Error calling: error_count_game_achievement_meta_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_achievement_meta_count_game_achievement_meta_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_achievement_meta_code_game_id(data);} catch(e) { _log("Error calling: handle_count_game_achievement_meta_code_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_achievement_meta_name: function
    (
        name,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_achievement_meta_service + 'count'
                + "/by-name"
                + "/@name/" + name            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_achievement_meta_name_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_achievement_meta_count_game_achievement_meta_name_callback", true);
            // call a method that can be inline callback
            try {error_count_game_achievement_meta_name(data);} catch(e) { _log("Error calling: error_count_game_achievement_meta_name: " + e);}
        }
        else {
            _log("SUCCESS::game_achievement_meta_count_game_achievement_meta_name_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_achievement_meta_name(data);} catch(e) { _log("Error calling: handle_count_game_achievement_meta_name: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    count_game_achievement_meta_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_achievement_meta_service + 'count'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    count_game_achievement_meta_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_achievement_meta_count_game_achievement_meta_game_id_callback", true);
            // call a method that can be inline callback
            try {error_count_game_achievement_meta_game_id(data);} catch(e) { _log("Error calling: error_count_game_achievement_meta_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_achievement_meta_count_game_achievement_meta_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_count_game_achievement_meta_game_id(data);} catch(e) { _log("Error calling: handle_count_game_achievement_meta_game_id: " + e);}
        }
    }
    ,
    //-------------------------------------------------
    browse_game_achievement_meta_filter: function
    (
        page,
        page_size,
        filter,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_achievement_meta_service + 'browse'
                + "/by-filter"
                + "/@page/" + page
                + "/@page_size/" + page_size
                + "/@filter/" + filter
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    browse_game_achievement_meta_filter_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_achievement_meta_browse_game_achievement_meta_filter_callback", true);
            // call a method that can be inline callback
            try {error_browse_game_achievement_meta_filter(data);} catch(e) { _log("Error calling: error_browse_game_achievement_meta_filter: " + e);}
        }
        else {
            _log("SUCCESS::game_achievement_meta_browse_game_achievement_meta_filter_callback", false);
            // call a method that can be inline callback
            try {handle_browse_game_achievement_meta_filter(data);} catch(e) { _log("Error calling: handle_browse_game_achievement_meta_filter: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    set_game_achievement_meta_uuid: function
    (
        status,
        sort,
        code,
        display_name,
        name,
        game_stat,
        date_modified,
        data,
        level,
        uuid,
        points,
        game_id,
        active,
        date_created,
        modifier,
        type,
        leaderboard,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_achievement_meta_service + 'set'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@sort": sort
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@game_stat": game_stat
            , "@date_modified": date_modified
            , "@data": data
            , "@level": level
            , "@uuid": uuid
            , "@points": points
            , "@game_id": game_id
            , "@active": active
            , "@date_created": date_created
            , "@modifier": modifier
            , "@type": type
            , "@leaderboard": leaderboard
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_achievement_meta_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_achievement_meta_set_game_achievement_meta_uuid_callback", true);
            // call a method that can be inline callback
            try {error_set_game_achievement_meta_uuid(data);} catch(e) { _log("Error calling: error_set_game_achievement_meta_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_achievement_meta_set_game_achievement_meta_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_achievement_meta_uuid(data);} catch(e) { _log("Error calling: handle_set_game_achievement_meta_uuid: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    set_game_achievement_meta_code_game_id: function
    (
        status,
        sort,
        code,
        display_name,
        name,
        game_stat,
        date_modified,
        data,
        level,
        uuid,
        points,
        game_id,
        active,
        date_created,
        modifier,
        type,
        leaderboard,
        description,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_achievement_meta_service + 'set'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                        
                ;

        _log("serviceurl::", service_url);
            
        var obj = {
            hash: "08445a31a78661b5c746feff39a9db6e4e2cc5cf"
            , "@status": status
            , "@sort": sort
            , "@code": code
            , "@display_name": display_name
            , "@name": name
            , "@game_stat": game_stat
            , "@date_modified": date_modified
            , "@data": data
            , "@level": level
            , "@uuid": uuid
            , "@points": points
            , "@game_id": game_id
            , "@active": active
            , "@date_created": date_created
            , "@modifier": modifier
            , "@type": type
            , "@leaderboard": leaderboard
            , "@description": description
        }

        _log("obj to submit::", obj);
        
        $.post(service_url, obj, fn, "json");
    }
    ,
    //-------------------------------------------------
    set_game_achievement_meta_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_achievement_meta_set_game_achievement_meta_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_set_game_achievement_meta_code_game_id(data);} catch(e) { _log("Error calling: error_set_game_achievement_meta_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_achievement_meta_set_game_achievement_meta_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_set_game_achievement_meta_code_game_id(data);} catch(e) { _log("Error calling: handle_set_game_achievement_meta_code_game_id: " + e);}
        }
    }                    
    ,
    //-------------------------------------------------
    del_game_achievement_meta_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_achievement_meta_service + 'del'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_achievement_meta_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_achievement_meta_del_game_achievement_meta_uuid_callback", true);
            // call a method that can be inline callback
            try {error_del_game_achievement_meta_uuid(data);} catch(e) { _log("Error calling: error_del_game_achievement_meta_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_achievement_meta_del_game_achievement_meta_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_achievement_meta_uuid(data);} catch(e) { _log("Error calling: handle_del_game_achievement_meta_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    del_game_achievement_meta_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_achievement_meta_service + 'del'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");
    }
    ,
    //-------------------------------------------------
    del_game_achievement_meta_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);      
      
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_achievement_meta_del_game_achievement_meta_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_del_game_achievement_meta_code_game_id(data);} catch(e) { _log("Error calling: error_del_game_achievement_meta_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_achievement_meta_del_game_achievement_meta_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_del_game_achievement_meta_code_game_id(data);} catch(e) { _log("Error calling: handle_del_game_achievement_meta_code_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_achievement_meta_uuid: function
    (
        uuid,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_achievement_meta_service + 'get'
                + "/by-uuid"
                + "/@uuid/" + uuid            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_achievement_meta_uuid_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_achievement_meta_get_game_achievement_meta_uuid_callback", true);
            // call a method that can be inline callback
            try {error_get_game_achievement_meta_uuid(data);} catch(e) { _log("Error calling: error_get_game_achievement_meta_uuid: " + e);}
        }
        else {
            _log("SUCCESS::game_achievement_meta_get_game_achievement_meta_uuid_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_achievement_meta_uuid(data);} catch(e) { _log("Error calling: handle_get_game_achievement_meta_uuid: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_achievement_meta_code: function
    (
        code,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_achievement_meta_service + 'get'
                + "/by-code"
                + "/@code/" + code            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_achievement_meta_code_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_achievement_meta_get_game_achievement_meta_code_callback", true);
            // call a method that can be inline callback
            try {error_get_game_achievement_meta_code(data);} catch(e) { _log("Error calling: error_get_game_achievement_meta_code: " + e);}
        }
        else {
            _log("SUCCESS::game_achievement_meta_get_game_achievement_meta_code_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_achievement_meta_code(data);} catch(e) { _log("Error calling: handle_get_game_achievement_meta_code: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_achievement_meta_code_game_id: function
    (
        code,
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_achievement_meta_service + 'get'
                + "/by-code/by-game-id"
                + "/@code/" + code            
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_achievement_meta_code_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_achievement_meta_get_game_achievement_meta_code_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_achievement_meta_code_game_id(data);} catch(e) { _log("Error calling: error_get_game_achievement_meta_code_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_achievement_meta_get_game_achievement_meta_code_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_achievement_meta_code_game_id(data);} catch(e) { _log("Error calling: handle_get_game_achievement_meta_code_game_id: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_achievement_meta_name: function
    (
        name,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_achievement_meta_service + 'get'
                + "/by-name"
                + "/@name/" + name            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_achievement_meta_name_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_achievement_meta_get_game_achievement_meta_name_callback", true);
            // call a method that can be inline callback
            try {error_get_game_achievement_meta_name(data);} catch(e) { _log("Error calling: error_get_game_achievement_meta_name: " + e);}
        }
        else {
            _log("SUCCESS::game_achievement_meta_get_game_achievement_meta_name_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_achievement_meta_name(data);} catch(e) { _log("Error calling: handle_get_game_achievement_meta_name: " + e);}
        }
        
    }
    ,
    //-------------------------------------------------
    get_game_achievement_meta_game_id: function
    (
        game_id,
        fn
    ){
        this.fn_callback = fn;
        var service_url = gaming_gaming_global.game_achievement_meta_service + 'get'
                + "/by-game-id"
                + "/@game_id/" + game_id            
                ;

        _log("serviceurl::", service_url);
        
        $.get(service_url,
            None
            , fn
            , "json");

    }
    ,
    //-------------------------------------------------
    get_game_achievement_meta_game_id_callback: function(data) {

        _log("data", data);
        _log("data.message", data.message);
        _log("data.error", data.error);
        _log("data.data", data.data);
        _log("data.info", data.info);
        _log("data.action", data.action);
            
        if (data.error > 0 || data.error.length > 1) {
            _log("ERRORS::game_achievement_meta_get_game_achievement_meta_game_id_callback", true);
            // call a method that can be inline callback
            try {error_get_game_achievement_meta_game_id(data);} catch(e) { _log("Error calling: error_get_game_achievement_meta_game_id: " + e);}
        }
        else {
            _log("SUCCESS::game_achievement_meta_get_game_achievement_meta_game_id_callback", false);
            // call a method that can be inline callback
            try {handle_get_game_achievement_meta_game_id(data);} catch(e) { _log("Error calling: handle_get_game_achievement_meta_game_id: " + e);}
        }
        
    }
}






